(ns raylib.functions
  (:require [raylib.arena :as rarena]
            [raylib.enums :as renums]
            [raylib.structs :as rstructs])
  (:import [raylib raylib_h]
           [java.lang.foreign Arena MemorySegment]))

(set! *warn-on-reflection* true)

;;
;; Utility Functions
;;

(defn get-string [^MemorySegment seg]
  (.getUtf8String seg 0))

(defn string
  ([str] (.allocateUtf8String rarena/*current-arena* str))
  ([^Arena arena str] (.allocateUtf8String arena str)))

(defmacro with-drawing [& body]
  `(binding [rarena/*current-arena* (rarena/confined-arena)]
     (try
       (begin-drawing)
       ~@body
       (end-drawing)
       (finally
         (.close rarena/*current-arena*)))))

