// Generated by jextract

package raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Font {
 *     int baseSize;
 *     int glyphCount;
 *     int glyphPadding;
 *     Texture2D texture;
 *     Rectangle* recs;
 *     GlyphInfo* glyphs;
 * };
 * }
 */
public class Font {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$4;
    }
    public static VarHandle baseSize$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int baseSize;
     * }
     */
    public static int baseSize$get(MemorySegment seg) {
        return (int)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int baseSize;
     * }
     */
    public static void baseSize$set(MemorySegment seg, int x) {
        constants$10.const$5.set(seg, x);
    }
    public static int baseSize$get(MemorySegment seg, long index) {
        return (int)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void baseSize$set(MemorySegment seg, long index, int x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle glyphCount$VH() {
        return constants$11.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int glyphCount;
     * }
     */
    public static int glyphCount$get(MemorySegment seg) {
        return (int)constants$11.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int glyphCount;
     * }
     */
    public static void glyphCount$set(MemorySegment seg, int x) {
        constants$11.const$0.set(seg, x);
    }
    public static int glyphCount$get(MemorySegment seg, long index) {
        return (int)constants$11.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void glyphCount$set(MemorySegment seg, long index, int x) {
        constants$11.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle glyphPadding$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int glyphPadding;
     * }
     */
    public static int glyphPadding$get(MemorySegment seg) {
        return (int)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int glyphPadding;
     * }
     */
    public static void glyphPadding$set(MemorySegment seg, int x) {
        constants$11.const$1.set(seg, x);
    }
    public static int glyphPadding$get(MemorySegment seg, long index) {
        return (int)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void glyphPadding$set(MemorySegment seg, long index, int x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment texture$slice(MemorySegment seg) {
        return seg.asSlice(12, 20);
    }
    public static VarHandle recs$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Rectangle* recs;
     * }
     */
    public static MemorySegment recs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Rectangle* recs;
     * }
     */
    public static void recs$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$2.set(seg, x);
    }
    public static MemorySegment recs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void recs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle glyphs$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GlyphInfo* glyphs;
     * }
     */
    public static MemorySegment glyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GlyphInfo* glyphs;
     * }
     */
    public static void glyphs$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$3.set(seg, x);
    }
    public static MemorySegment glyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void glyphs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


