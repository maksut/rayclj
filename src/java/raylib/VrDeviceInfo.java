// Generated by jextract

package raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct VrDeviceInfo {
 *     int hResolution;
 *     int vResolution;
 *     float hScreenSize;
 *     float vScreenSize;
 *     float vScreenCenter;
 *     float eyeToScreenDistance;
 *     float lensSeparationDistance;
 *     float interpupillaryDistance;
 *     float lensDistortionValues[4];
 *     float chromaAbCorrection[4];
 * };
 * }
 */
public class VrDeviceInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$23.const$2;
    }
    public static VarHandle hResolution$VH() {
        return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hResolution;
     * }
     */
    public static int hResolution$get(MemorySegment seg) {
        return (int)constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hResolution;
     * }
     */
    public static void hResolution$set(MemorySegment seg, int x) {
        constants$23.const$3.set(seg, x);
    }
    public static int hResolution$get(MemorySegment seg, long index) {
        return (int)constants$23.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hResolution$set(MemorySegment seg, long index, int x) {
        constants$23.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vResolution$VH() {
        return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int vResolution;
     * }
     */
    public static int vResolution$get(MemorySegment seg) {
        return (int)constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int vResolution;
     * }
     */
    public static void vResolution$set(MemorySegment seg, int x) {
        constants$23.const$4.set(seg, x);
    }
    public static int vResolution$get(MemorySegment seg, long index) {
        return (int)constants$23.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void vResolution$set(MemorySegment seg, long index, int x) {
        constants$23.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hScreenSize$VH() {
        return constants$23.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float hScreenSize;
     * }
     */
    public static float hScreenSize$get(MemorySegment seg) {
        return (float)constants$23.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float hScreenSize;
     * }
     */
    public static void hScreenSize$set(MemorySegment seg, float x) {
        constants$23.const$5.set(seg, x);
    }
    public static float hScreenSize$get(MemorySegment seg, long index) {
        return (float)constants$23.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hScreenSize$set(MemorySegment seg, long index, float x) {
        constants$23.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vScreenSize$VH() {
        return constants$24.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float vScreenSize;
     * }
     */
    public static float vScreenSize$get(MemorySegment seg) {
        return (float)constants$24.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float vScreenSize;
     * }
     */
    public static void vScreenSize$set(MemorySegment seg, float x) {
        constants$24.const$0.set(seg, x);
    }
    public static float vScreenSize$get(MemorySegment seg, long index) {
        return (float)constants$24.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void vScreenSize$set(MemorySegment seg, long index, float x) {
        constants$24.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vScreenCenter$VH() {
        return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float vScreenCenter;
     * }
     */
    public static float vScreenCenter$get(MemorySegment seg) {
        return (float)constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float vScreenCenter;
     * }
     */
    public static void vScreenCenter$set(MemorySegment seg, float x) {
        constants$24.const$1.set(seg, x);
    }
    public static float vScreenCenter$get(MemorySegment seg, long index) {
        return (float)constants$24.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void vScreenCenter$set(MemorySegment seg, long index, float x) {
        constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eyeToScreenDistance$VH() {
        return constants$24.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float eyeToScreenDistance;
     * }
     */
    public static float eyeToScreenDistance$get(MemorySegment seg) {
        return (float)constants$24.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float eyeToScreenDistance;
     * }
     */
    public static void eyeToScreenDistance$set(MemorySegment seg, float x) {
        constants$24.const$2.set(seg, x);
    }
    public static float eyeToScreenDistance$get(MemorySegment seg, long index) {
        return (float)constants$24.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void eyeToScreenDistance$set(MemorySegment seg, long index, float x) {
        constants$24.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lensSeparationDistance$VH() {
        return constants$24.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float lensSeparationDistance;
     * }
     */
    public static float lensSeparationDistance$get(MemorySegment seg) {
        return (float)constants$24.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float lensSeparationDistance;
     * }
     */
    public static void lensSeparationDistance$set(MemorySegment seg, float x) {
        constants$24.const$3.set(seg, x);
    }
    public static float lensSeparationDistance$get(MemorySegment seg, long index) {
        return (float)constants$24.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lensSeparationDistance$set(MemorySegment seg, long index, float x) {
        constants$24.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle interpupillaryDistance$VH() {
        return constants$24.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float interpupillaryDistance;
     * }
     */
    public static float interpupillaryDistance$get(MemorySegment seg) {
        return (float)constants$24.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float interpupillaryDistance;
     * }
     */
    public static void interpupillaryDistance$set(MemorySegment seg, float x) {
        constants$24.const$4.set(seg, x);
    }
    public static float interpupillaryDistance$get(MemorySegment seg, long index) {
        return (float)constants$24.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void interpupillaryDistance$set(MemorySegment seg, long index, float x) {
        constants$24.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lensDistortionValues$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment chromaAbCorrection$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


