// Generated by jextract

package raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Vector3 {
 *     float x;
 *     float y;
 *     float z;
 * };
 * }
 */
public class Vector3 {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    public static VarHandle x$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float x;
     * }
     */
    public static float x$get(MemorySegment seg) {
        return (float)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float x;
     * }
     */
    public static void x$set(MemorySegment seg, float x) {
        constants$0.const$4.set(seg, x);
    }
    public static float x$get(MemorySegment seg, long index) {
        return (float)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, float x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float y;
     * }
     */
    public static float y$get(MemorySegment seg) {
        return (float)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float y;
     * }
     */
    public static void y$set(MemorySegment seg, float x) {
        constants$0.const$5.set(seg, x);
    }
    public static float y$get(MemorySegment seg, long index) {
        return (float)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, float x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle z$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float z;
     * }
     */
    public static float z$get(MemorySegment seg) {
        return (float)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float z;
     * }
     */
    public static void z$set(MemorySegment seg, float x) {
        constants$1.const$0.set(seg, x);
    }
    public static float z$get(MemorySegment seg, long index) {
        return (float)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, float x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


