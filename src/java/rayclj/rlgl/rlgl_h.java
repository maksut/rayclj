// Generated by jextract

package rayclj.rlgl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class rlgl_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define RL_DEFAULT_BATCH_BUFFER_ELEMENTS 8192
     * }
     */
    public static int RL_DEFAULT_BATCH_BUFFER_ELEMENTS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define RL_DEFAULT_BATCH_BUFFERS 1
     * }
     */
    public static int RL_DEFAULT_BATCH_BUFFERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RL_DEFAULT_BATCH_DRAWCALLS 256
     * }
     */
    public static int RL_DEFAULT_BATCH_DRAWCALLS() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS 4
     * }
     */
    public static int RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RL_MAX_MATRIX_STACK_SIZE 32
     * }
     */
    public static int RL_MAX_MATRIX_STACK_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RL_MAX_SHADER_LOCATIONS 32
     * }
     */
    public static int RL_MAX_SHADER_LOCATIONS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_S 10242
     * }
     */
    public static int RL_TEXTURE_WRAP_S() {
        return (int)10242L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_T 10243
     * }
     */
    public static int RL_TEXTURE_WRAP_T() {
        return (int)10243L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_MAG_FILTER 10240
     * }
     */
    public static int RL_TEXTURE_MAG_FILTER() {
        return (int)10240L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_MIN_FILTER 10241
     * }
     */
    public static int RL_TEXTURE_MIN_FILTER() {
        return (int)10241L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_NEAREST 9728
     * }
     */
    public static int RL_TEXTURE_FILTER_NEAREST() {
        return (int)9728L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_LINEAR 9729
     * }
     */
    public static int RL_TEXTURE_FILTER_LINEAR() {
        return (int)9729L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_MIP_NEAREST 9984
     * }
     */
    public static int RL_TEXTURE_FILTER_MIP_NEAREST() {
        return (int)9984L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR 9986
     * }
     */
    public static int RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR() {
        return (int)9986L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST 9985
     * }
     */
    public static int RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST() {
        return (int)9985L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_MIP_LINEAR 9987
     * }
     */
    public static int RL_TEXTURE_FILTER_MIP_LINEAR() {
        return (int)9987L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_FILTER_ANISOTROPIC 12288
     * }
     */
    public static int RL_TEXTURE_FILTER_ANISOTROPIC() {
        return (int)12288L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_MIPMAP_BIAS_RATIO 16384
     * }
     */
    public static int RL_TEXTURE_MIPMAP_BIAS_RATIO() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_REPEAT 10497
     * }
     */
    public static int RL_TEXTURE_WRAP_REPEAT() {
        return (int)10497L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_CLAMP 33071
     * }
     */
    public static int RL_TEXTURE_WRAP_CLAMP() {
        return (int)33071L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_MIRROR_REPEAT 33648
     * }
     */
    public static int RL_TEXTURE_WRAP_MIRROR_REPEAT() {
        return (int)33648L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE_WRAP_MIRROR_CLAMP 34626
     * }
     */
    public static int RL_TEXTURE_WRAP_MIRROR_CLAMP() {
        return (int)34626L;
    }
    /**
     * {@snippet :
     * #define RL_MODELVIEW 5888
     * }
     */
    public static int RL_MODELVIEW() {
        return (int)5888L;
    }
    /**
     * {@snippet :
     * #define RL_PROJECTION 5889
     * }
     */
    public static int RL_PROJECTION() {
        return (int)5889L;
    }
    /**
     * {@snippet :
     * #define RL_TEXTURE 5890
     * }
     */
    public static int RL_TEXTURE() {
        return (int)5890L;
    }
    /**
     * {@snippet :
     * #define RL_LINES 1
     * }
     */
    public static int RL_LINES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RL_TRIANGLES 4
     * }
     */
    public static int RL_TRIANGLES() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RL_QUADS 7
     * }
     */
    public static int RL_QUADS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RL_UNSIGNED_BYTE 5121
     * }
     */
    public static int RL_UNSIGNED_BYTE() {
        return (int)5121L;
    }
    /**
     * {@snippet :
     * #define RL_FLOAT 5126
     * }
     */
    public static int RL_FLOAT() {
        return (int)5126L;
    }
    /**
     * {@snippet :
     * #define RL_STREAM_DRAW 35040
     * }
     */
    public static int RL_STREAM_DRAW() {
        return (int)35040L;
    }
    /**
     * {@snippet :
     * #define RL_STREAM_READ 35041
     * }
     */
    public static int RL_STREAM_READ() {
        return (int)35041L;
    }
    /**
     * {@snippet :
     * #define RL_STREAM_COPY 35042
     * }
     */
    public static int RL_STREAM_COPY() {
        return (int)35042L;
    }
    /**
     * {@snippet :
     * #define RL_STATIC_DRAW 35044
     * }
     */
    public static int RL_STATIC_DRAW() {
        return (int)35044L;
    }
    /**
     * {@snippet :
     * #define RL_STATIC_READ 35045
     * }
     */
    public static int RL_STATIC_READ() {
        return (int)35045L;
    }
    /**
     * {@snippet :
     * #define RL_STATIC_COPY 35046
     * }
     */
    public static int RL_STATIC_COPY() {
        return (int)35046L;
    }
    /**
     * {@snippet :
     * #define RL_DYNAMIC_DRAW 35048
     * }
     */
    public static int RL_DYNAMIC_DRAW() {
        return (int)35048L;
    }
    /**
     * {@snippet :
     * #define RL_DYNAMIC_READ 35049
     * }
     */
    public static int RL_DYNAMIC_READ() {
        return (int)35049L;
    }
    /**
     * {@snippet :
     * #define RL_DYNAMIC_COPY 35050
     * }
     */
    public static int RL_DYNAMIC_COPY() {
        return (int)35050L;
    }
    /**
     * {@snippet :
     * #define RL_FRAGMENT_SHADER 35632
     * }
     */
    public static int RL_FRAGMENT_SHADER() {
        return (int)35632L;
    }
    /**
     * {@snippet :
     * #define RL_VERTEX_SHADER 35633
     * }
     */
    public static int RL_VERTEX_SHADER() {
        return (int)35633L;
    }
    /**
     * {@snippet :
     * #define RL_COMPUTE_SHADER 37305
     * }
     */
    public static int RL_COMPUTE_SHADER() {
        return (int)37305L;
    }
    /**
     * {@snippet :
     * #define RL_ZERO 0
     * }
     */
    public static int RL_ZERO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RL_ONE 1
     * }
     */
    public static int RL_ONE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RL_SRC_COLOR 768
     * }
     */
    public static int RL_SRC_COLOR() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_SRC_COLOR 769
     * }
     */
    public static int RL_ONE_MINUS_SRC_COLOR() {
        return (int)769L;
    }
    /**
     * {@snippet :
     * #define RL_SRC_ALPHA 770
     * }
     */
    public static int RL_SRC_ALPHA() {
        return (int)770L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_SRC_ALPHA 771
     * }
     */
    public static int RL_ONE_MINUS_SRC_ALPHA() {
        return (int)771L;
    }
    /**
     * {@snippet :
     * #define RL_DST_ALPHA 772
     * }
     */
    public static int RL_DST_ALPHA() {
        return (int)772L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_DST_ALPHA 773
     * }
     */
    public static int RL_ONE_MINUS_DST_ALPHA() {
        return (int)773L;
    }
    /**
     * {@snippet :
     * #define RL_DST_COLOR 774
     * }
     */
    public static int RL_DST_COLOR() {
        return (int)774L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_DST_COLOR 775
     * }
     */
    public static int RL_ONE_MINUS_DST_COLOR() {
        return (int)775L;
    }
    /**
     * {@snippet :
     * #define RL_SRC_ALPHA_SATURATE 776
     * }
     */
    public static int RL_SRC_ALPHA_SATURATE() {
        return (int)776L;
    }
    /**
     * {@snippet :
     * #define RL_CONSTANT_COLOR 32769
     * }
     */
    public static int RL_CONSTANT_COLOR() {
        return (int)32769L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_CONSTANT_COLOR 32770
     * }
     */
    public static int RL_ONE_MINUS_CONSTANT_COLOR() {
        return (int)32770L;
    }
    /**
     * {@snippet :
     * #define RL_CONSTANT_ALPHA 32771
     * }
     */
    public static int RL_CONSTANT_ALPHA() {
        return (int)32771L;
    }
    /**
     * {@snippet :
     * #define RL_ONE_MINUS_CONSTANT_ALPHA 32772
     * }
     */
    public static int RL_ONE_MINUS_CONSTANT_ALPHA() {
        return (int)32772L;
    }
    /**
     * {@snippet :
     * #define RL_FUNC_ADD 32774
     * }
     */
    public static int RL_FUNC_ADD() {
        return (int)32774L;
    }
    /**
     * {@snippet :
     * #define RL_MIN 32775
     * }
     */
    public static int RL_MIN() {
        return (int)32775L;
    }
    /**
     * {@snippet :
     * #define RL_MAX 32776
     * }
     */
    public static int RL_MAX() {
        return (int)32776L;
    }
    /**
     * {@snippet :
     * #define RL_FUNC_SUBTRACT 32778
     * }
     */
    public static int RL_FUNC_SUBTRACT() {
        return (int)32778L;
    }
    /**
     * {@snippet :
     * #define RL_FUNC_REVERSE_SUBTRACT 32779
     * }
     */
    public static int RL_FUNC_REVERSE_SUBTRACT() {
        return (int)32779L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_EQUATION 32777
     * }
     */
    public static int RL_BLEND_EQUATION() {
        return (int)32777L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_EQUATION_RGB 32777
     * }
     */
    public static int RL_BLEND_EQUATION_RGB() {
        return (int)32777L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_EQUATION_ALPHA 34877
     * }
     */
    public static int RL_BLEND_EQUATION_ALPHA() {
        return (int)34877L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_DST_RGB 32968
     * }
     */
    public static int RL_BLEND_DST_RGB() {
        return (int)32968L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_SRC_RGB 32969
     * }
     */
    public static int RL_BLEND_SRC_RGB() {
        return (int)32969L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_DST_ALPHA 32970
     * }
     */
    public static int RL_BLEND_DST_ALPHA() {
        return (int)32970L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_SRC_ALPHA 32971
     * }
     */
    public static int RL_BLEND_SRC_ALPHA() {
        return (int)32971L;
    }
    /**
     * {@snippet :
     * #define RL_BLEND_COLOR 32773
     * }
     */
    public static int RL_BLEND_COLOR() {
        return (int)32773L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_11 = 1;
     * }
     */
    public static int RL_OPENGL_11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_21 = 2;
     * }
     */
    public static int RL_OPENGL_21() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_33 = 3;
     * }
     */
    public static int RL_OPENGL_33() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_43 = 4;
     * }
     */
    public static int RL_OPENGL_43() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_ES_20 = 5;
     * }
     */
    public static int RL_OPENGL_ES_20() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_OPENGL_ES_30 = 6;
     * }
     */
    public static int RL_OPENGL_ES_30() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_ALL = 0;
     * }
     */
    public static int RL_LOG_ALL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_TRACE = 1;
     * }
     */
    public static int RL_LOG_TRACE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_DEBUG = 2;
     * }
     */
    public static int RL_LOG_DEBUG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_INFO = 3;
     * }
     */
    public static int RL_LOG_INFO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_WARNING = 4;
     * }
     */
    public static int RL_LOG_WARNING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_ERROR = 5;
     * }
     */
    public static int RL_LOG_ERROR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_FATAL = 6;
     * }
     */
    public static int RL_LOG_FATAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_LOG_NONE = 7;
     * }
     */
    public static int RL_LOG_NONE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R32 = 8;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R32() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R16 = 11;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R16() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13;
     * }
     */
    public static int RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_DXT1_RGB = 14;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_DXT1_RGB() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_ETC1_RGB = 18;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_ETC1_RGB() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_ETC2_RGB = 19;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_ETC2_RGB() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_PVRT_RGB = 21;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_PVRT_RGB() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24;
     * }
     */
    public static int RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_POINT = 0;
     * }
     */
    public static int RL_TEXTURE_FILTER_POINT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_BILINEAR = 1;
     * }
     */
    public static int RL_TEXTURE_FILTER_BILINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_TRILINEAR = 2;
     * }
     */
    public static int RL_TEXTURE_FILTER_TRILINEAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_ANISOTROPIC_4X = 3;
     * }
     */
    public static int RL_TEXTURE_FILTER_ANISOTROPIC_4X() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_ANISOTROPIC_8X = 4;
     * }
     */
    public static int RL_TEXTURE_FILTER_ANISOTROPIC_8X() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_TEXTURE_FILTER_ANISOTROPIC_16X = 5;
     * }
     */
    public static int RL_TEXTURE_FILTER_ANISOTROPIC_16X() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_ALPHA = 0;
     * }
     */
    public static int RL_BLEND_ALPHA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_ADDITIVE = 1;
     * }
     */
    public static int RL_BLEND_ADDITIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_MULTIPLIED = 2;
     * }
     */
    public static int RL_BLEND_MULTIPLIED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_ADD_COLORS = 3;
     * }
     */
    public static int RL_BLEND_ADD_COLORS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_SUBTRACT_COLORS = 4;
     * }
     */
    public static int RL_BLEND_SUBTRACT_COLORS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_ALPHA_PREMULTIPLY = 5;
     * }
     */
    public static int RL_BLEND_ALPHA_PREMULTIPLY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_CUSTOM = 6;
     * }
     */
    public static int RL_BLEND_CUSTOM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_BLEND_CUSTOM_SEPARATE = 7;
     * }
     */
    public static int RL_BLEND_CUSTOM_SEPARATE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_POSITION = 0;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_POSITION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_TEXCOORD01 = 1;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_TEXCOORD01() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_TEXCOORD02 = 2;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_TEXCOORD02() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_NORMAL = 3;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_NORMAL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_TANGENT = 4;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_TANGENT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VERTEX_COLOR = 5;
     * }
     */
    public static int RL_SHADER_LOC_VERTEX_COLOR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MATRIX_MVP = 6;
     * }
     */
    public static int RL_SHADER_LOC_MATRIX_MVP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MATRIX_VIEW = 7;
     * }
     */
    public static int RL_SHADER_LOC_MATRIX_VIEW() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MATRIX_PROJECTION = 8;
     * }
     */
    public static int RL_SHADER_LOC_MATRIX_PROJECTION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MATRIX_MODEL = 9;
     * }
     */
    public static int RL_SHADER_LOC_MATRIX_MODEL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MATRIX_NORMAL = 10;
     * }
     */
    public static int RL_SHADER_LOC_MATRIX_NORMAL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_VECTOR_VIEW = 11;
     * }
     */
    public static int RL_SHADER_LOC_VECTOR_VIEW() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_COLOR_DIFFUSE = 12;
     * }
     */
    public static int RL_SHADER_LOC_COLOR_DIFFUSE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_COLOR_SPECULAR = 13;
     * }
     */
    public static int RL_SHADER_LOC_COLOR_SPECULAR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_COLOR_AMBIENT = 14;
     * }
     */
    public static int RL_SHADER_LOC_COLOR_AMBIENT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_ALBEDO = 15;
     * }
     */
    public static int RL_SHADER_LOC_MAP_ALBEDO() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_METALNESS = 16;
     * }
     */
    public static int RL_SHADER_LOC_MAP_METALNESS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_NORMAL = 17;
     * }
     */
    public static int RL_SHADER_LOC_MAP_NORMAL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_ROUGHNESS = 18;
     * }
     */
    public static int RL_SHADER_LOC_MAP_ROUGHNESS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_OCCLUSION = 19;
     * }
     */
    public static int RL_SHADER_LOC_MAP_OCCLUSION() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_EMISSION = 20;
     * }
     */
    public static int RL_SHADER_LOC_MAP_EMISSION() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_HEIGHT = 21;
     * }
     */
    public static int RL_SHADER_LOC_MAP_HEIGHT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_CUBEMAP = 22;
     * }
     */
    public static int RL_SHADER_LOC_MAP_CUBEMAP() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_IRRADIANCE = 23;
     * }
     */
    public static int RL_SHADER_LOC_MAP_IRRADIANCE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_PREFILTER = 24;
     * }
     */
    public static int RL_SHADER_LOC_MAP_PREFILTER() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_LOC_MAP_BRDF = 25;
     * }
     */
    public static int RL_SHADER_LOC_MAP_BRDF() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_FLOAT = 0;
     * }
     */
    public static int RL_SHADER_UNIFORM_FLOAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_VEC2 = 1;
     * }
     */
    public static int RL_SHADER_UNIFORM_VEC2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_VEC3 = 2;
     * }
     */
    public static int RL_SHADER_UNIFORM_VEC3() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_VEC4 = 3;
     * }
     */
    public static int RL_SHADER_UNIFORM_VEC4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_INT = 4;
     * }
     */
    public static int RL_SHADER_UNIFORM_INT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_IVEC2 = 5;
     * }
     */
    public static int RL_SHADER_UNIFORM_IVEC2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_IVEC3 = 6;
     * }
     */
    public static int RL_SHADER_UNIFORM_IVEC3() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_IVEC4 = 7;
     * }
     */
    public static int RL_SHADER_UNIFORM_IVEC4() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_UNIFORM_SAMPLER2D = 8;
     * }
     */
    public static int RL_SHADER_UNIFORM_SAMPLER2D() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_ATTRIB_FLOAT = 0;
     * }
     */
    public static int RL_SHADER_ATTRIB_FLOAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_ATTRIB_VEC2 = 1;
     * }
     */
    public static int RL_SHADER_ATTRIB_VEC2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_ATTRIB_VEC3 = 2;
     * }
     */
    public static int RL_SHADER_ATTRIB_VEC3() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_SHADER_ATTRIB_VEC4 = 3;
     * }
     */
    public static int RL_SHADER_ATTRIB_VEC4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL0 = 0;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL1 = 1;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL2 = 2;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL3 = 3;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL4 = 4;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL4() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL5 = 5;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL5() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL6 = 6;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL6() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_COLOR_CHANNEL7 = 7;
     * }
     */
    public static int RL_ATTACHMENT_COLOR_CHANNEL7() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_DEPTH = 100;
     * }
     */
    public static int RL_ATTACHMENT_DEPTH() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_STENCIL = 200;
     * }
     */
    public static int RL_ATTACHMENT_STENCIL() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_POSITIVE_X = 0;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_POSITIVE_X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_NEGATIVE_X = 1;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_NEGATIVE_X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_POSITIVE_Y = 2;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_POSITIVE_Y() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y = 3;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_POSITIVE_Z = 4;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_POSITIVE_Z() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z = 5;
     * }
     */
    public static int RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_TEXTURE2D = 100;
     * }
     */
    public static int RL_ATTACHMENT_TEXTURE2D() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .RL_ATTACHMENT_RENDERBUFFER = 200;
     * }
     */
    public static int RL_ATTACHMENT_RENDERBUFFER() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum .RL_CULL_FACE_FRONT = 0;
     * }
     */
    public static int RL_CULL_FACE_FRONT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .RL_CULL_FACE_BACK = 1;
     * }
     */
    public static int RL_CULL_FACE_BACK() {
        return (int)1L;
    }
    public static MethodHandle rlMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"rlMatrixMode");
    }
    /**
     * {@snippet :
     * void rlMatrixMode(int mode);
     * }
     */
    public static void rlMatrixMode(int mode) {
        var mh$ = rlMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"rlPushMatrix");
    }
    /**
     * {@snippet :
     * void rlPushMatrix();
     * }
     */
    public static void rlPushMatrix() {
        var mh$ = rlPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"rlPopMatrix");
    }
    /**
     * {@snippet :
     * void rlPopMatrix();
     * }
     */
    public static void rlPopMatrix() {
        var mh$ = rlPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"rlLoadIdentity");
    }
    /**
     * {@snippet :
     * void rlLoadIdentity();
     * }
     */
    public static void rlLoadIdentity() {
        var mh$ = rlLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"rlTranslatef");
    }
    /**
     * {@snippet :
     * void rlTranslatef(float x, float y, float z);
     * }
     */
    public static void rlTranslatef(float x, float y, float z) {
        var mh$ = rlTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"rlRotatef");
    }
    /**
     * {@snippet :
     * void rlRotatef(float angle, float x, float y, float z);
     * }
     */
    public static void rlRotatef(float angle, float x, float y, float z) {
        var mh$ = rlRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"rlScalef");
    }
    /**
     * {@snippet :
     * void rlScalef(float x, float y, float z);
     * }
     */
    public static void rlScalef(float x, float y, float z) {
        var mh$ = rlScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$6,"rlMultMatrixf");
    }
    /**
     * {@snippet :
     * void rlMultMatrixf(float* matf);
     * }
     */
    public static void rlMultMatrixf(MemorySegment matf) {
        var mh$ = rlMultMatrixf$MH();
        try {
            mh$.invokeExact(matf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"rlFrustum");
    }
    /**
     * {@snippet :
     * void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar);
     * }
     */
    public static void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar) {
        var mh$ = rlFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, znear, zfar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"rlOrtho");
    }
    /**
     * {@snippet :
     * void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar);
     * }
     */
    public static void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar) {
        var mh$ = rlOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, znear, zfar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"rlViewport");
    }
    /**
     * {@snippet :
     * void rlViewport(int x, int y, int width, int height);
     * }
     */
    public static void rlViewport(int x, int y, int width, int height) {
        var mh$ = rlViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"rlBegin");
    }
    /**
     * {@snippet :
     * void rlBegin(int mode);
     * }
     */
    public static void rlBegin(int mode) {
        var mh$ = rlBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"rlEnd");
    }
    /**
     * {@snippet :
     * void rlEnd();
     * }
     */
    public static void rlEnd() {
        var mh$ = rlEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"rlVertex2i");
    }
    /**
     * {@snippet :
     * void rlVertex2i(int x, int y);
     * }
     */
    public static void rlVertex2i(int x, int y) {
        var mh$ = rlVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"rlVertex2f");
    }
    /**
     * {@snippet :
     * void rlVertex2f(float x, float y);
     * }
     */
    public static void rlVertex2f(float x, float y) {
        var mh$ = rlVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"rlVertex3f");
    }
    /**
     * {@snippet :
     * void rlVertex3f(float x, float y, float z);
     * }
     */
    public static void rlVertex3f(float x, float y, float z) {
        var mh$ = rlVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"rlTexCoord2f");
    }
    /**
     * {@snippet :
     * void rlTexCoord2f(float x, float y);
     * }
     */
    public static void rlTexCoord2f(float x, float y) {
        var mh$ = rlTexCoord2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"rlNormal3f");
    }
    /**
     * {@snippet :
     * void rlNormal3f(float x, float y, float z);
     * }
     */
    public static void rlNormal3f(float x, float y, float z) {
        var mh$ = rlNormal3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"rlColor4ub");
    }
    /**
     * {@snippet :
     * void rlColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
     * }
     */
    public static void rlColor4ub(byte r, byte g, byte b, byte a) {
        var mh$ = rlColor4ub$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"rlColor3f");
    }
    /**
     * {@snippet :
     * void rlColor3f(float x, float y, float z);
     * }
     */
    public static void rlColor3f(float x, float y, float z) {
        var mh$ = rlColor3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"rlColor4f");
    }
    /**
     * {@snippet :
     * void rlColor4f(float x, float y, float z, float w);
     * }
     */
    public static void rlColor4f(float x, float y, float z, float w) {
        var mh$ = rlColor4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"rlEnableVertexArray");
    }
    /**
     * {@snippet :
     * _Bool rlEnableVertexArray(unsigned int vaoId);
     * }
     */
    public static boolean rlEnableVertexArray(int vaoId) {
        var mh$ = rlEnableVertexArray$MH();
        try {
            return (boolean)mh$.invokeExact(vaoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"rlDisableVertexArray");
    }
    /**
     * {@snippet :
     * void rlDisableVertexArray();
     * }
     */
    public static void rlDisableVertexArray() {
        var mh$ = rlDisableVertexArray$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"rlEnableVertexBuffer");
    }
    /**
     * {@snippet :
     * void rlEnableVertexBuffer(unsigned int id);
     * }
     */
    public static void rlEnableVertexBuffer(int id) {
        var mh$ = rlEnableVertexBuffer$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"rlDisableVertexBuffer");
    }
    /**
     * {@snippet :
     * void rlDisableVertexBuffer();
     * }
     */
    public static void rlDisableVertexBuffer() {
        var mh$ = rlDisableVertexBuffer$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableVertexBufferElement$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"rlEnableVertexBufferElement");
    }
    /**
     * {@snippet :
     * void rlEnableVertexBufferElement(unsigned int id);
     * }
     */
    public static void rlEnableVertexBufferElement(int id) {
        var mh$ = rlEnableVertexBufferElement$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableVertexBufferElement$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"rlDisableVertexBufferElement");
    }
    /**
     * {@snippet :
     * void rlDisableVertexBufferElement();
     * }
     */
    public static void rlDisableVertexBufferElement() {
        var mh$ = rlDisableVertexBufferElement$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableVertexAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"rlEnableVertexAttribute");
    }
    /**
     * {@snippet :
     * void rlEnableVertexAttribute(unsigned int index);
     * }
     */
    public static void rlEnableVertexAttribute(int index) {
        var mh$ = rlEnableVertexAttribute$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableVertexAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"rlDisableVertexAttribute");
    }
    /**
     * {@snippet :
     * void rlDisableVertexAttribute(unsigned int index);
     * }
     */
    public static void rlDisableVertexAttribute(int index) {
        var mh$ = rlDisableVertexAttribute$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlActiveTextureSlot$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"rlActiveTextureSlot");
    }
    /**
     * {@snippet :
     * void rlActiveTextureSlot(int slot);
     * }
     */
    public static void rlActiveTextureSlot(int slot) {
        var mh$ = rlActiveTextureSlot$MH();
        try {
            mh$.invokeExact(slot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"rlEnableTexture");
    }
    /**
     * {@snippet :
     * void rlEnableTexture(unsigned int id);
     * }
     */
    public static void rlEnableTexture(int id) {
        var mh$ = rlEnableTexture$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"rlDisableTexture");
    }
    /**
     * {@snippet :
     * void rlDisableTexture();
     * }
     */
    public static void rlDisableTexture() {
        var mh$ = rlDisableTexture$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableTextureCubemap$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"rlEnableTextureCubemap");
    }
    /**
     * {@snippet :
     * void rlEnableTextureCubemap(unsigned int id);
     * }
     */
    public static void rlEnableTextureCubemap(int id) {
        var mh$ = rlEnableTextureCubemap$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableTextureCubemap$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"rlDisableTextureCubemap");
    }
    /**
     * {@snippet :
     * void rlDisableTextureCubemap();
     * }
     */
    public static void rlDisableTextureCubemap() {
        var mh$ = rlDisableTextureCubemap$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlTextureParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"rlTextureParameters");
    }
    /**
     * {@snippet :
     * void rlTextureParameters(unsigned int id, int param, int value);
     * }
     */
    public static void rlTextureParameters(int id, int param, int value) {
        var mh$ = rlTextureParameters$MH();
        try {
            mh$.invokeExact(id, param, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlCubemapParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"rlCubemapParameters");
    }
    /**
     * {@snippet :
     * void rlCubemapParameters(unsigned int id, int param, int value);
     * }
     */
    public static void rlCubemapParameters(int id, int param, int value) {
        var mh$ = rlCubemapParameters$MH();
        try {
            mh$.invokeExact(id, param, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableShader$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"rlEnableShader");
    }
    /**
     * {@snippet :
     * void rlEnableShader(unsigned int id);
     * }
     */
    public static void rlEnableShader(int id) {
        var mh$ = rlEnableShader$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableShader$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"rlDisableShader");
    }
    /**
     * {@snippet :
     * void rlDisableShader();
     * }
     */
    public static void rlDisableShader() {
        var mh$ = rlDisableShader$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"rlEnableFramebuffer");
    }
    /**
     * {@snippet :
     * void rlEnableFramebuffer(unsigned int id);
     * }
     */
    public static void rlEnableFramebuffer(int id) {
        var mh$ = rlEnableFramebuffer$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"rlDisableFramebuffer");
    }
    /**
     * {@snippet :
     * void rlDisableFramebuffer();
     * }
     */
    public static void rlDisableFramebuffer() {
        var mh$ = rlDisableFramebuffer$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlActiveDrawBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"rlActiveDrawBuffers");
    }
    /**
     * {@snippet :
     * void rlActiveDrawBuffers(int count);
     * }
     */
    public static void rlActiveDrawBuffers(int count) {
        var mh$ = rlActiveDrawBuffers$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlBlitFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"rlBlitFramebuffer");
    }
    /**
     * {@snippet :
     * void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int dstWidth, int dstHeight, int bufferMask);
     * }
     */
    public static void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int dstWidth, int dstHeight, int bufferMask) {
        var mh$ = rlBlitFramebuffer$MH();
        try {
            mh$.invokeExact(srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, bufferMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableColorBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"rlEnableColorBlend");
    }
    /**
     * {@snippet :
     * void rlEnableColorBlend();
     * }
     */
    public static void rlEnableColorBlend() {
        var mh$ = rlEnableColorBlend$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableColorBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"rlDisableColorBlend");
    }
    /**
     * {@snippet :
     * void rlDisableColorBlend();
     * }
     */
    public static void rlDisableColorBlend() {
        var mh$ = rlDisableColorBlend$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableDepthTest$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"rlEnableDepthTest");
    }
    /**
     * {@snippet :
     * void rlEnableDepthTest();
     * }
     */
    public static void rlEnableDepthTest() {
        var mh$ = rlEnableDepthTest$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableDepthTest$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"rlDisableDepthTest");
    }
    /**
     * {@snippet :
     * void rlDisableDepthTest();
     * }
     */
    public static void rlDisableDepthTest() {
        var mh$ = rlDisableDepthTest$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"rlEnableDepthMask");
    }
    /**
     * {@snippet :
     * void rlEnableDepthMask();
     * }
     */
    public static void rlEnableDepthMask() {
        var mh$ = rlEnableDepthMask$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"rlDisableDepthMask");
    }
    /**
     * {@snippet :
     * void rlDisableDepthMask();
     * }
     */
    public static void rlDisableDepthMask() {
        var mh$ = rlDisableDepthMask$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableBackfaceCulling$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"rlEnableBackfaceCulling");
    }
    /**
     * {@snippet :
     * void rlEnableBackfaceCulling();
     * }
     */
    public static void rlEnableBackfaceCulling() {
        var mh$ = rlEnableBackfaceCulling$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableBackfaceCulling$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"rlDisableBackfaceCulling");
    }
    /**
     * {@snippet :
     * void rlDisableBackfaceCulling();
     * }
     */
    public static void rlDisableBackfaceCulling() {
        var mh$ = rlDisableBackfaceCulling$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"rlSetCullFace");
    }
    /**
     * {@snippet :
     * void rlSetCullFace(int mode);
     * }
     */
    public static void rlSetCullFace(int mode) {
        var mh$ = rlSetCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableScissorTest$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"rlEnableScissorTest");
    }
    /**
     * {@snippet :
     * void rlEnableScissorTest();
     * }
     */
    public static void rlEnableScissorTest() {
        var mh$ = rlEnableScissorTest$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableScissorTest$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"rlDisableScissorTest");
    }
    /**
     * {@snippet :
     * void rlDisableScissorTest();
     * }
     */
    public static void rlDisableScissorTest() {
        var mh$ = rlDisableScissorTest$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"rlScissor");
    }
    /**
     * {@snippet :
     * void rlScissor(int x, int y, int width, int height);
     * }
     */
    public static void rlScissor(int x, int y, int width, int height) {
        var mh$ = rlScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableWireMode$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0,"rlEnableWireMode");
    }
    /**
     * {@snippet :
     * void rlEnableWireMode();
     * }
     */
    public static void rlEnableWireMode() {
        var mh$ = rlEnableWireMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnablePointMode$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"rlEnablePointMode");
    }
    /**
     * {@snippet :
     * void rlEnablePointMode();
     * }
     */
    public static void rlEnablePointMode() {
        var mh$ = rlEnablePointMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableWireMode$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"rlDisableWireMode");
    }
    /**
     * {@snippet :
     * void rlDisableWireMode();
     * }
     */
    public static void rlDisableWireMode() {
        var mh$ = rlDisableWireMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"rlSetLineWidth");
    }
    /**
     * {@snippet :
     * void rlSetLineWidth(float width);
     * }
     */
    public static void rlSetLineWidth(float width) {
        var mh$ = rlSetLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$6,"rlGetLineWidth");
    }
    /**
     * {@snippet :
     * float rlGetLineWidth();
     * }
     */
    public static float rlGetLineWidth() {
        var mh$ = rlGetLineWidth$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableSmoothLines$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"rlEnableSmoothLines");
    }
    /**
     * {@snippet :
     * void rlEnableSmoothLines();
     * }
     */
    public static void rlEnableSmoothLines() {
        var mh$ = rlEnableSmoothLines$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableSmoothLines$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"rlDisableSmoothLines");
    }
    /**
     * {@snippet :
     * void rlDisableSmoothLines();
     * }
     */
    public static void rlDisableSmoothLines() {
        var mh$ = rlDisableSmoothLines$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlEnableStereoRender$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"rlEnableStereoRender");
    }
    /**
     * {@snippet :
     * void rlEnableStereoRender();
     * }
     */
    public static void rlEnableStereoRender() {
        var mh$ = rlEnableStereoRender$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDisableStereoRender$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"rlDisableStereoRender");
    }
    /**
     * {@snippet :
     * void rlDisableStereoRender();
     * }
     */
    public static void rlDisableStereoRender() {
        var mh$ = rlDisableStereoRender$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlIsStereoRenderEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"rlIsStereoRenderEnabled");
    }
    /**
     * {@snippet :
     * _Bool rlIsStereoRenderEnabled();
     * }
     */
    public static boolean rlIsStereoRenderEnabled() {
        var mh$ = rlIsStereoRenderEnabled$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"rlClearColor");
    }
    /**
     * {@snippet :
     * void rlClearColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
     * }
     */
    public static void rlClearColor(byte r, byte g, byte b, byte a) {
        var mh$ = rlClearColor$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlClearScreenBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"rlClearScreenBuffers");
    }
    /**
     * {@snippet :
     * void rlClearScreenBuffers();
     * }
     */
    public static void rlClearScreenBuffers() {
        var mh$ = rlClearScreenBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlCheckErrors$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"rlCheckErrors");
    }
    /**
     * {@snippet :
     * void rlCheckErrors();
     * }
     */
    public static void rlCheckErrors() {
        var mh$ = rlCheckErrors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"rlSetBlendMode");
    }
    /**
     * {@snippet :
     * void rlSetBlendMode(int mode);
     * }
     */
    public static void rlSetBlendMode(int mode) {
        var mh$ = rlSetBlendMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetBlendFactors$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"rlSetBlendFactors");
    }
    /**
     * {@snippet :
     * void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation);
     * }
     */
    public static void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation) {
        var mh$ = rlSetBlendFactors$MH();
        try {
            mh$.invokeExact(glSrcFactor, glDstFactor, glEquation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetBlendFactorsSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"rlSetBlendFactorsSeparate");
    }
    /**
     * {@snippet :
     * void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int glEqRGB, int glEqAlpha);
     * }
     */
    public static void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int glEqRGB, int glEqAlpha) {
        var mh$ = rlSetBlendFactorsSeparate$MH();
        try {
            mh$.invokeExact(glSrcRGB, glDstRGB, glSrcAlpha, glDstAlpha, glEqRGB, glEqAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlglInit$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"rlglInit");
    }
    /**
     * {@snippet :
     * void rlglInit(int width, int height);
     * }
     */
    public static void rlglInit(int width, int height) {
        var mh$ = rlglInit$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlglClose$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"rlglClose");
    }
    /**
     * {@snippet :
     * void rlglClose();
     * }
     */
    public static void rlglClose() {
        var mh$ = rlglClose$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadExtensions$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"rlLoadExtensions");
    }
    /**
     * {@snippet :
     * void rlLoadExtensions(void* loader);
     * }
     */
    public static void rlLoadExtensions(MemorySegment loader) {
        var mh$ = rlLoadExtensions$MH();
        try {
            mh$.invokeExact(loader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"rlGetVersion");
    }
    /**
     * {@snippet :
     * int rlGetVersion();
     * }
     */
    public static int rlGetVersion() {
        var mh$ = rlGetVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetFramebufferWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"rlSetFramebufferWidth");
    }
    /**
     * {@snippet :
     * void rlSetFramebufferWidth(int width);
     * }
     */
    public static void rlSetFramebufferWidth(int width) {
        var mh$ = rlSetFramebufferWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetFramebufferWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"rlGetFramebufferWidth");
    }
    /**
     * {@snippet :
     * int rlGetFramebufferWidth();
     * }
     */
    public static int rlGetFramebufferWidth() {
        var mh$ = rlGetFramebufferWidth$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetFramebufferHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"rlSetFramebufferHeight");
    }
    /**
     * {@snippet :
     * void rlSetFramebufferHeight(int height);
     * }
     */
    public static void rlSetFramebufferHeight(int height) {
        var mh$ = rlSetFramebufferHeight$MH();
        try {
            mh$.invokeExact(height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetFramebufferHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"rlGetFramebufferHeight");
    }
    /**
     * {@snippet :
     * int rlGetFramebufferHeight();
     * }
     */
    public static int rlGetFramebufferHeight() {
        var mh$ = rlGetFramebufferHeight$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetTextureIdDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"rlGetTextureIdDefault");
    }
    /**
     * {@snippet :
     * unsigned int rlGetTextureIdDefault();
     * }
     */
    public static int rlGetTextureIdDefault() {
        var mh$ = rlGetTextureIdDefault$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetShaderIdDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"rlGetShaderIdDefault");
    }
    /**
     * {@snippet :
     * unsigned int rlGetShaderIdDefault();
     * }
     */
    public static int rlGetShaderIdDefault() {
        var mh$ = rlGetShaderIdDefault$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetShaderLocsDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$6,"rlGetShaderLocsDefault");
    }
    /**
     * {@snippet :
     * int* rlGetShaderLocsDefault();
     * }
     */
    public static MemorySegment rlGetShaderLocsDefault() {
        var mh$ = rlGetShaderLocsDefault$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadRenderBatch$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"rlLoadRenderBatch");
    }
    /**
     * {@snippet :
     * rlRenderBatch rlLoadRenderBatch(int numBuffers, int bufferElements);
     * }
     */
    public static MemorySegment rlLoadRenderBatch(SegmentAllocator allocator, int numBuffers, int bufferElements) {
        var mh$ = rlLoadRenderBatch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, numBuffers, bufferElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadRenderBatch$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"rlUnloadRenderBatch");
    }
    /**
     * {@snippet :
     * void rlUnloadRenderBatch(rlRenderBatch batch);
     * }
     */
    public static void rlUnloadRenderBatch(MemorySegment batch) {
        var mh$ = rlUnloadRenderBatch$MH();
        try {
            mh$.invokeExact(batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawRenderBatch$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"rlDrawRenderBatch");
    }
    /**
     * {@snippet :
     * void rlDrawRenderBatch(rlRenderBatch* batch);
     * }
     */
    public static void rlDrawRenderBatch(MemorySegment batch) {
        var mh$ = rlDrawRenderBatch$MH();
        try {
            mh$.invokeExact(batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetRenderBatchActive$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"rlSetRenderBatchActive");
    }
    /**
     * {@snippet :
     * void rlSetRenderBatchActive(rlRenderBatch* batch);
     * }
     */
    public static void rlSetRenderBatchActive(MemorySegment batch) {
        var mh$ = rlSetRenderBatchActive$MH();
        try {
            mh$.invokeExact(batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawRenderBatchActive$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"rlDrawRenderBatchActive");
    }
    /**
     * {@snippet :
     * void rlDrawRenderBatchActive();
     * }
     */
    public static void rlDrawRenderBatchActive() {
        var mh$ = rlDrawRenderBatchActive$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlCheckRenderBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"rlCheckRenderBatchLimit");
    }
    /**
     * {@snippet :
     * _Bool rlCheckRenderBatchLimit(int vCount);
     * }
     */
    public static boolean rlCheckRenderBatchLimit(int vCount) {
        var mh$ = rlCheckRenderBatchLimit$MH();
        try {
            return (boolean)mh$.invokeExact(vCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"rlSetTexture");
    }
    /**
     * {@snippet :
     * void rlSetTexture(unsigned int id);
     * }
     */
    public static void rlSetTexture(int id) {
        var mh$ = rlSetTexture$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"rlLoadVertexArray");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadVertexArray();
     * }
     */
    public static int rlLoadVertexArray() {
        var mh$ = rlLoadVertexArray$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"rlLoadVertexBuffer");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadVertexBuffer(void* buffer, int size, _Bool dynamic);
     * }
     */
    public static int rlLoadVertexBuffer(MemorySegment buffer, int size, boolean dynamic) {
        var mh$ = rlLoadVertexBuffer$MH();
        try {
            return (int)mh$.invokeExact(buffer, size, dynamic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadVertexBufferElement$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"rlLoadVertexBufferElement");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadVertexBufferElement(void* buffer, int size, _Bool dynamic);
     * }
     */
    public static int rlLoadVertexBufferElement(MemorySegment buffer, int size, boolean dynamic) {
        var mh$ = rlLoadVertexBufferElement$MH();
        try {
            return (int)mh$.invokeExact(buffer, size, dynamic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUpdateVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"rlUpdateVertexBuffer");
    }
    /**
     * {@snippet :
     * void rlUpdateVertexBuffer(unsigned int bufferId, void* data, int dataSize, int offset);
     * }
     */
    public static void rlUpdateVertexBuffer(int bufferId, MemorySegment data, int dataSize, int offset) {
        var mh$ = rlUpdateVertexBuffer$MH();
        try {
            mh$.invokeExact(bufferId, data, dataSize, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUpdateVertexBufferElements$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"rlUpdateVertexBufferElements");
    }
    /**
     * {@snippet :
     * void rlUpdateVertexBufferElements(unsigned int id, void* data, int dataSize, int offset);
     * }
     */
    public static void rlUpdateVertexBufferElements(int id, MemorySegment data, int dataSize, int offset) {
        var mh$ = rlUpdateVertexBufferElements$MH();
        try {
            mh$.invokeExact(id, data, dataSize, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"rlUnloadVertexArray");
    }
    /**
     * {@snippet :
     * void rlUnloadVertexArray(unsigned int vaoId);
     * }
     */
    public static void rlUnloadVertexArray(int vaoId) {
        var mh$ = rlUnloadVertexArray$MH();
        try {
            mh$.invokeExact(vaoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"rlUnloadVertexBuffer");
    }
    /**
     * {@snippet :
     * void rlUnloadVertexBuffer(unsigned int vboId);
     * }
     */
    public static void rlUnloadVertexBuffer(int vboId) {
        var mh$ = rlUnloadVertexBuffer$MH();
        try {
            mh$.invokeExact(vboId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetVertexAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"rlSetVertexAttribute");
    }
    /**
     * {@snippet :
     * void rlSetVertexAttribute(unsigned int index, int compSize, int type, _Bool normalized, int stride, void* pointer);
     * }
     */
    public static void rlSetVertexAttribute(int index, int compSize, int type, boolean normalized, int stride, MemorySegment pointer) {
        var mh$ = rlSetVertexAttribute$MH();
        try {
            mh$.invokeExact(index, compSize, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetVertexAttributeDivisor$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"rlSetVertexAttributeDivisor");
    }
    /**
     * {@snippet :
     * void rlSetVertexAttributeDivisor(unsigned int index, int divisor);
     * }
     */
    public static void rlSetVertexAttributeDivisor(int index, int divisor) {
        var mh$ = rlSetVertexAttributeDivisor$MH();
        try {
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetVertexAttributeDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"rlSetVertexAttributeDefault");
    }
    /**
     * {@snippet :
     * void rlSetVertexAttributeDefault(int locIndex, void* value, int attribType, int count);
     * }
     */
    public static void rlSetVertexAttributeDefault(int locIndex, MemorySegment value, int attribType, int count) {
        var mh$ = rlSetVertexAttributeDefault$MH();
        try {
            mh$.invokeExact(locIndex, value, attribType, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"rlDrawVertexArray");
    }
    /**
     * {@snippet :
     * void rlDrawVertexArray(int offset, int count);
     * }
     */
    public static void rlDrawVertexArray(int offset, int count) {
        var mh$ = rlDrawVertexArray$MH();
        try {
            mh$.invokeExact(offset, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawVertexArrayElements$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$6,"rlDrawVertexArrayElements");
    }
    /**
     * {@snippet :
     * void rlDrawVertexArrayElements(int offset, int count, void* buffer);
     * }
     */
    public static void rlDrawVertexArrayElements(int offset, int count, MemorySegment buffer) {
        var mh$ = rlDrawVertexArrayElements$MH();
        try {
            mh$.invokeExact(offset, count, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawVertexArrayInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"rlDrawVertexArrayInstanced");
    }
    /**
     * {@snippet :
     * void rlDrawVertexArrayInstanced(int offset, int count, int instances);
     * }
     */
    public static void rlDrawVertexArrayInstanced(int offset, int count, int instances) {
        var mh$ = rlDrawVertexArrayInstanced$MH();
        try {
            mh$.invokeExact(offset, count, instances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlDrawVertexArrayElementsInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"rlDrawVertexArrayElementsInstanced");
    }
    /**
     * {@snippet :
     * void rlDrawVertexArrayElementsInstanced(int offset, int count, void* buffer, int instances);
     * }
     */
    public static void rlDrawVertexArrayElementsInstanced(int offset, int count, MemorySegment buffer, int instances) {
        var mh$ = rlDrawVertexArrayElementsInstanced$MH();
        try {
            mh$.invokeExact(offset, count, buffer, instances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"rlLoadTexture");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadTexture(void* data, int width, int height, int format, int mipmapCount);
     * }
     */
    public static int rlLoadTexture(MemorySegment data, int width, int height, int format, int mipmapCount) {
        var mh$ = rlLoadTexture$MH();
        try {
            return (int)mh$.invokeExact(data, width, height, format, mipmapCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadTextureDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$6,"rlLoadTextureDepth");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadTextureDepth(int width, int height, _Bool useRenderBuffer);
     * }
     */
    public static int rlLoadTextureDepth(int width, int height, boolean useRenderBuffer) {
        var mh$ = rlLoadTextureDepth$MH();
        try {
            return (int)mh$.invokeExact(width, height, useRenderBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadTextureCubemap$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"rlLoadTextureCubemap");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadTextureCubemap(void* data, int size, int format);
     * }
     */
    public static int rlLoadTextureCubemap(MemorySegment data, int size, int format) {
        var mh$ = rlLoadTextureCubemap$MH();
        try {
            return (int)mh$.invokeExact(data, size, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUpdateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"rlUpdateTexture");
    }
    /**
     * {@snippet :
     * void rlUpdateTexture(unsigned int id, int offsetX, int offsetY, int width, int height, int format, void* data);
     * }
     */
    public static void rlUpdateTexture(int id, int offsetX, int offsetY, int width, int height, int format, MemorySegment data) {
        var mh$ = rlUpdateTexture$MH();
        try {
            mh$.invokeExact(id, offsetX, offsetY, width, height, format, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetGlTextureFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"rlGetGlTextureFormats");
    }
    /**
     * {@snippet :
     * void rlGetGlTextureFormats(int format, unsigned int* glInternalFormat, unsigned int* glFormat, unsigned int* glType);
     * }
     */
    public static void rlGetGlTextureFormats(int format, MemorySegment glInternalFormat, MemorySegment glFormat, MemorySegment glType) {
        var mh$ = rlGetGlTextureFormats$MH();
        try {
            mh$.invokeExact(format, glInternalFormat, glFormat, glType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetPixelFormatName$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"rlGetPixelFormatName");
    }
    /**
     * {@snippet :
     * char* rlGetPixelFormatName(unsigned int format);
     * }
     */
    public static MemorySegment rlGetPixelFormatName(int format) {
        var mh$ = rlGetPixelFormatName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"rlUnloadTexture");
    }
    /**
     * {@snippet :
     * void rlUnloadTexture(unsigned int id);
     * }
     */
    public static void rlUnloadTexture(int id) {
        var mh$ = rlUnloadTexture$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGenTextureMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"rlGenTextureMipmaps");
    }
    /**
     * {@snippet :
     * void rlGenTextureMipmaps(unsigned int id, int width, int height, int format, int* mipmaps);
     * }
     */
    public static void rlGenTextureMipmaps(int id, int width, int height, int format, MemorySegment mipmaps) {
        var mh$ = rlGenTextureMipmaps$MH();
        try {
            mh$.invokeExact(id, width, height, format, mipmaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlReadTexturePixels$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$6,"rlReadTexturePixels");
    }
    /**
     * {@snippet :
     * void* rlReadTexturePixels(unsigned int id, int width, int height, int format);
     * }
     */
    public static MemorySegment rlReadTexturePixels(int id, int width, int height, int format) {
        var mh$ = rlReadTexturePixels$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id, width, height, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlReadScreenPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"rlReadScreenPixels");
    }
    /**
     * {@snippet :
     * unsigned char* rlReadScreenPixels(int width, int height);
     * }
     */
    public static MemorySegment rlReadScreenPixels(int width, int height) {
        var mh$ = rlReadScreenPixels$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"rlLoadFramebuffer");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadFramebuffer(int width, int height);
     * }
     */
    public static int rlLoadFramebuffer(int width, int height) {
        var mh$ = rlLoadFramebuffer$MH();
        try {
            return (int)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlFramebufferAttach$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"rlFramebufferAttach");
    }
    /**
     * {@snippet :
     * void rlFramebufferAttach(unsigned int fboId, unsigned int texId, int attachType, int texType, int mipLevel);
     * }
     */
    public static void rlFramebufferAttach(int fboId, int texId, int attachType, int texType, int mipLevel) {
        var mh$ = rlFramebufferAttach$MH();
        try {
            mh$.invokeExact(fboId, texId, attachType, texType, mipLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlFramebufferComplete$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"rlFramebufferComplete");
    }
    /**
     * {@snippet :
     * _Bool rlFramebufferComplete(unsigned int id);
     * }
     */
    public static boolean rlFramebufferComplete(int id) {
        var mh$ = rlFramebufferComplete$MH();
        try {
            return (boolean)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"rlUnloadFramebuffer");
    }
    /**
     * {@snippet :
     * void rlUnloadFramebuffer(unsigned int id);
     * }
     */
    public static void rlUnloadFramebuffer(int id) {
        var mh$ = rlUnloadFramebuffer$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadShaderCode$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"rlLoadShaderCode");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadShaderCode(char* vsCode, char* fsCode);
     * }
     */
    public static int rlLoadShaderCode(MemorySegment vsCode, MemorySegment fsCode) {
        var mh$ = rlLoadShaderCode$MH();
        try {
            return (int)mh$.invokeExact(vsCode, fsCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlCompileShader$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"rlCompileShader");
    }
    /**
     * {@snippet :
     * unsigned int rlCompileShader(char* shaderCode, int type);
     * }
     */
    public static int rlCompileShader(MemorySegment shaderCode, int type) {
        var mh$ = rlCompileShader$MH();
        try {
            return (int)mh$.invokeExact(shaderCode, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadShaderProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"rlLoadShaderProgram");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadShaderProgram(unsigned int vShaderId, unsigned int fShaderId);
     * }
     */
    public static int rlLoadShaderProgram(int vShaderId, int fShaderId) {
        var mh$ = rlLoadShaderProgram$MH();
        try {
            return (int)mh$.invokeExact(vShaderId, fShaderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadShaderProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"rlUnloadShaderProgram");
    }
    /**
     * {@snippet :
     * void rlUnloadShaderProgram(unsigned int id);
     * }
     */
    public static void rlUnloadShaderProgram(int id) {
        var mh$ = rlUnloadShaderProgram$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetLocationUniform$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"rlGetLocationUniform");
    }
    /**
     * {@snippet :
     * int rlGetLocationUniform(unsigned int shaderId, char* uniformName);
     * }
     */
    public static int rlGetLocationUniform(int shaderId, MemorySegment uniformName) {
        var mh$ = rlGetLocationUniform$MH();
        try {
            return (int)mh$.invokeExact(shaderId, uniformName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetLocationAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"rlGetLocationAttrib");
    }
    /**
     * {@snippet :
     * int rlGetLocationAttrib(unsigned int shaderId, char* attribName);
     * }
     */
    public static int rlGetLocationAttrib(int shaderId, MemorySegment attribName) {
        var mh$ = rlGetLocationAttrib$MH();
        try {
            return (int)mh$.invokeExact(shaderId, attribName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetUniform$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"rlSetUniform");
    }
    /**
     * {@snippet :
     * void rlSetUniform(int locIndex, void* value, int uniformType, int count);
     * }
     */
    public static void rlSetUniform(int locIndex, MemorySegment value, int uniformType, int count) {
        var mh$ = rlSetUniform$MH();
        try {
            mh$.invokeExact(locIndex, value, uniformType, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetUniformMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"rlSetUniformMatrix");
    }
    /**
     * {@snippet :
     * void rlSetUniformMatrix(int locIndex, Matrix mat);
     * }
     */
    public static void rlSetUniformMatrix(int locIndex, MemorySegment mat) {
        var mh$ = rlSetUniformMatrix$MH();
        try {
            mh$.invokeExact(locIndex, mat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetUniformSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"rlSetUniformSampler");
    }
    /**
     * {@snippet :
     * void rlSetUniformSampler(int locIndex, unsigned int textureId);
     * }
     */
    public static void rlSetUniformSampler(int locIndex, int textureId) {
        var mh$ = rlSetUniformSampler$MH();
        try {
            mh$.invokeExact(locIndex, textureId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetShader$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"rlSetShader");
    }
    /**
     * {@snippet :
     * void rlSetShader(unsigned int id, int* locs);
     * }
     */
    public static void rlSetShader(int id, MemorySegment locs) {
        var mh$ = rlSetShader$MH();
        try {
            mh$.invokeExact(id, locs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadComputeShaderProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$6,"rlLoadComputeShaderProgram");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadComputeShaderProgram(unsigned int shaderId);
     * }
     */
    public static int rlLoadComputeShaderProgram(int shaderId) {
        var mh$ = rlLoadComputeShaderProgram$MH();
        try {
            return (int)mh$.invokeExact(shaderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlComputeShaderDispatch$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"rlComputeShaderDispatch");
    }
    /**
     * {@snippet :
     * void rlComputeShaderDispatch(unsigned int groupX, unsigned int groupY, unsigned int groupZ);
     * }
     */
    public static void rlComputeShaderDispatch(int groupX, int groupY, int groupZ) {
        var mh$ = rlComputeShaderDispatch$MH();
        try {
            mh$.invokeExact(groupX, groupY, groupZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"rlLoadShaderBuffer");
    }
    /**
     * {@snippet :
     * unsigned int rlLoadShaderBuffer(unsigned int size, void* data, int usageHint);
     * }
     */
    public static int rlLoadShaderBuffer(int size, MemorySegment data, int usageHint) {
        var mh$ = rlLoadShaderBuffer$MH();
        try {
            return (int)mh$.invokeExact(size, data, usageHint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUnloadShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"rlUnloadShaderBuffer");
    }
    /**
     * {@snippet :
     * void rlUnloadShaderBuffer(unsigned int ssboId);
     * }
     */
    public static void rlUnloadShaderBuffer(int ssboId) {
        var mh$ = rlUnloadShaderBuffer$MH();
        try {
            mh$.invokeExact(ssboId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlUpdateShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"rlUpdateShaderBuffer");
    }
    /**
     * {@snippet :
     * void rlUpdateShaderBuffer(unsigned int id, void* data, unsigned int dataSize, unsigned int offset);
     * }
     */
    public static void rlUpdateShaderBuffer(int id, MemorySegment data, int dataSize, int offset) {
        var mh$ = rlUpdateShaderBuffer$MH();
        try {
            mh$.invokeExact(id, data, dataSize, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlBindShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"rlBindShaderBuffer");
    }
    /**
     * {@snippet :
     * void rlBindShaderBuffer(unsigned int id, unsigned int index);
     * }
     */
    public static void rlBindShaderBuffer(int id, int index) {
        var mh$ = rlBindShaderBuffer$MH();
        try {
            mh$.invokeExact(id, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlReadShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"rlReadShaderBuffer");
    }
    /**
     * {@snippet :
     * void rlReadShaderBuffer(unsigned int id, void* dest, unsigned int count, unsigned int offset);
     * }
     */
    public static void rlReadShaderBuffer(int id, MemorySegment dest, int count, int offset) {
        var mh$ = rlReadShaderBuffer$MH();
        try {
            mh$.invokeExact(id, dest, count, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlCopyShaderBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"rlCopyShaderBuffer");
    }
    /**
     * {@snippet :
     * void rlCopyShaderBuffer(unsigned int destId, unsigned int srcId, unsigned int destOffset, unsigned int srcOffset, unsigned int count);
     * }
     */
    public static void rlCopyShaderBuffer(int destId, int srcId, int destOffset, int srcOffset, int count) {
        var mh$ = rlCopyShaderBuffer$MH();
        try {
            mh$.invokeExact(destId, srcId, destOffset, srcOffset, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetShaderBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"rlGetShaderBufferSize");
    }
    /**
     * {@snippet :
     * unsigned int rlGetShaderBufferSize(unsigned int id);
     * }
     */
    public static int rlGetShaderBufferSize(int id) {
        var mh$ = rlGetShaderBufferSize$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlBindImageTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"rlBindImageTexture");
    }
    /**
     * {@snippet :
     * void rlBindImageTexture(unsigned int id, unsigned int index, int format, _Bool readonly);
     * }
     */
    public static void rlBindImageTexture(int id, int index, int format, boolean readonly) {
        var mh$ = rlBindImageTexture$MH();
        try {
            mh$.invokeExact(id, index, format, readonly);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetMatrixModelview$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$6,"rlGetMatrixModelview");
    }
    /**
     * {@snippet :
     * Matrix rlGetMatrixModelview();
     * }
     */
    public static MemorySegment rlGetMatrixModelview(SegmentAllocator allocator) {
        var mh$ = rlGetMatrixModelview$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetMatrixProjection$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"rlGetMatrixProjection");
    }
    /**
     * {@snippet :
     * Matrix rlGetMatrixProjection();
     * }
     */
    public static MemorySegment rlGetMatrixProjection(SegmentAllocator allocator) {
        var mh$ = rlGetMatrixProjection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetMatrixTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"rlGetMatrixTransform");
    }
    /**
     * {@snippet :
     * Matrix rlGetMatrixTransform();
     * }
     */
    public static MemorySegment rlGetMatrixTransform(SegmentAllocator allocator) {
        var mh$ = rlGetMatrixTransform$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetMatrixProjectionStereo$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"rlGetMatrixProjectionStereo");
    }
    /**
     * {@snippet :
     * Matrix rlGetMatrixProjectionStereo(int eye);
     * }
     */
    public static MemorySegment rlGetMatrixProjectionStereo(SegmentAllocator allocator, int eye) {
        var mh$ = rlGetMatrixProjectionStereo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, eye);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlGetMatrixViewOffsetStereo$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"rlGetMatrixViewOffsetStereo");
    }
    /**
     * {@snippet :
     * Matrix rlGetMatrixViewOffsetStereo(int eye);
     * }
     */
    public static MemorySegment rlGetMatrixViewOffsetStereo(SegmentAllocator allocator, int eye) {
        var mh$ = rlGetMatrixViewOffsetStereo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, eye);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetMatrixProjection$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$6,"rlSetMatrixProjection");
    }
    /**
     * {@snippet :
     * void rlSetMatrixProjection(Matrix proj);
     * }
     */
    public static void rlSetMatrixProjection(MemorySegment proj) {
        var mh$ = rlSetMatrixProjection$MH();
        try {
            mh$.invokeExact(proj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetMatrixModelview$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"rlSetMatrixModelview");
    }
    /**
     * {@snippet :
     * void rlSetMatrixModelview(Matrix view);
     * }
     */
    public static void rlSetMatrixModelview(MemorySegment view) {
        var mh$ = rlSetMatrixModelview$MH();
        try {
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetMatrixProjectionStereo$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"rlSetMatrixProjectionStereo");
    }
    /**
     * {@snippet :
     * void rlSetMatrixProjectionStereo(Matrix right, Matrix left);
     * }
     */
    public static void rlSetMatrixProjectionStereo(MemorySegment right, MemorySegment left) {
        var mh$ = rlSetMatrixProjectionStereo$MH();
        try {
            mh$.invokeExact(right, left);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlSetMatrixViewOffsetStereo$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"rlSetMatrixViewOffsetStereo");
    }
    /**
     * {@snippet :
     * void rlSetMatrixViewOffsetStereo(Matrix right, Matrix left);
     * }
     */
    public static void rlSetMatrixViewOffsetStereo(MemorySegment right, MemorySegment left) {
        var mh$ = rlSetMatrixViewOffsetStereo$MH();
        try {
            mh$.invokeExact(right, left);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadDrawCube$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"rlLoadDrawCube");
    }
    /**
     * {@snippet :
     * void rlLoadDrawCube();
     * }
     */
    public static void rlLoadDrawCube() {
        var mh$ = rlLoadDrawCube$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rlLoadDrawQuad$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"rlLoadDrawQuad");
    }
    /**
     * {@snippet :
     * void rlLoadDrawQuad();
     * }
     */
    public static void rlLoadDrawQuad() {
        var mh$ = rlLoadDrawQuad$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define RLGL_VERSION "4.5"
     * }
     */
    public static MemorySegment RLGL_VERSION() {
        return constants$37.const$0;
    }
    /**
     * {@snippet :
     * #define RL_CULL_DISTANCE_NEAR 0.01
     * }
     */
    public static double RL_CULL_DISTANCE_NEAR() {
        return 0.01d;
    }
    /**
     * {@snippet :
     * #define RL_CULL_DISTANCE_FAR 1000.0
     * }
     */
    public static double RL_CULL_DISTANCE_FAR() {
        return 1000.0d;
    }
    /**
     * {@snippet :
     * #define RL_SHADER_LOC_MAP_DIFFUSE 15
     * }
     */
    public static int RL_SHADER_LOC_MAP_DIFFUSE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define RL_SHADER_LOC_MAP_SPECULAR 16
     * }
     */
    public static int RL_SHADER_LOC_MAP_SPECULAR() {
        return (int)16L;
    }
}


