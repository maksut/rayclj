// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*TraceLogCallback)(int logLevel,char* text,struct __va_list_tag* args);
 * }
 */
public interface TraceLogCallback {

    void apply(int logLevel, java.lang.foreign.MemorySegment text, java.lang.foreign.MemorySegment args);
    static MemorySegment allocate(TraceLogCallback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$27.const$0, fi, constants$26.const$5, scope);
    }
    static TraceLogCallback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _logLevel, java.lang.foreign.MemorySegment _text, java.lang.foreign.MemorySegment _args) -> {
            try {
                constants$27.const$1.invokeExact(symbol, _logLevel, _text, _args);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


