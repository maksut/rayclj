// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * _Bool (*SaveFileTextCallback)(char* fileName,char* text);
 * }
 */
public interface SaveFileTextCallback {

    boolean apply(java.lang.foreign.MemorySegment fileName, java.lang.foreign.MemorySegment text);
    static MemorySegment allocate(SaveFileTextCallback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$29.const$0, fi, constants$28.const$5, scope);
    }
    static SaveFileTextCallback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _fileName, java.lang.foreign.MemorySegment _text) -> {
            try {
                return (boolean)constants$29.const$1.invokeExact(symbol, _fileName, _text);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


