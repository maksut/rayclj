// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class raylib_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAYLIB_VERSION_MAJOR 5
     * }
     */
    public static int RAYLIB_VERSION_MAJOR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define RAYLIB_VERSION_MINOR 0
     * }
     */
    public static int RAYLIB_VERSION_MINOR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RAYLIB_VERSION_PATCH 0
     * }
     */
    public static int RAYLIB_VERSION_PATCH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .FLAG_VSYNC_HINT = 64;
     * }
     */
    public static int FLAG_VSYNC_HINT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .FLAG_FULLSCREEN_MODE = 2;
     * }
     */
    public static int FLAG_FULLSCREEN_MODE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_RESIZABLE = 4;
     * }
     */
    public static int FLAG_WINDOW_RESIZABLE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_UNDECORATED = 8;
     * }
     */
    public static int FLAG_WINDOW_UNDECORATED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_HIDDEN = 128;
     * }
     */
    public static int FLAG_WINDOW_HIDDEN() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_MINIMIZED = 512;
     * }
     */
    public static int FLAG_WINDOW_MINIMIZED() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_MAXIMIZED = 1024;
     * }
     */
    public static int FLAG_WINDOW_MAXIMIZED() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_UNFOCUSED = 2048;
     * }
     */
    public static int FLAG_WINDOW_UNFOCUSED() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_TOPMOST = 4096;
     * }
     */
    public static int FLAG_WINDOW_TOPMOST() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_ALWAYS_RUN = 256;
     * }
     */
    public static int FLAG_WINDOW_ALWAYS_RUN() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_TRANSPARENT = 16;
     * }
     */
    public static int FLAG_WINDOW_TRANSPARENT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_HIGHDPI = 8192;
     * }
     */
    public static int FLAG_WINDOW_HIGHDPI() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384;
     * }
     */
    public static int FLAG_WINDOW_MOUSE_PASSTHROUGH() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .FLAG_BORDERLESS_WINDOWED_MODE = 32768;
     * }
     */
    public static int FLAG_BORDERLESS_WINDOWED_MODE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .FLAG_MSAA_4X_HINT = 32;
     * }
     */
    public static int FLAG_MSAA_4X_HINT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .FLAG_INTERLACED_HINT = 65536;
     * }
     */
    public static int FLAG_INTERLACED_HINT() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .LOG_ALL = 0;
     * }
     */
    public static int LOG_ALL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .LOG_TRACE = 1;
     * }
     */
    public static int LOG_TRACE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .LOG_DEBUG = 2;
     * }
     */
    public static int LOG_DEBUG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .LOG_INFO = 3;
     * }
     */
    public static int LOG_INFO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .LOG_WARNING = 4;
     * }
     */
    public static int LOG_WARNING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .LOG_ERROR = 5;
     * }
     */
    public static int LOG_ERROR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .LOG_FATAL = 6;
     * }
     */
    public static int LOG_FATAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .LOG_NONE = 7;
     * }
     */
    public static int LOG_NONE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .KEY_NULL = 0;
     * }
     */
    public static int KEY_NULL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .KEY_APOSTROPHE = 39;
     * }
     */
    public static int KEY_APOSTROPHE() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum .KEY_COMMA = 44;
     * }
     */
    public static int KEY_COMMA() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum .KEY_MINUS = 45;
     * }
     */
    public static int KEY_MINUS() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum .KEY_PERIOD = 46;
     * }
     */
    public static int KEY_PERIOD() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum .KEY_SLASH = 47;
     * }
     */
    public static int KEY_SLASH() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum .KEY_ZERO = 48;
     * }
     */
    public static int KEY_ZERO() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum .KEY_ONE = 49;
     * }
     */
    public static int KEY_ONE() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum .KEY_TWO = 50;
     * }
     */
    public static int KEY_TWO() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum .KEY_THREE = 51;
     * }
     */
    public static int KEY_THREE() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum .KEY_FOUR = 52;
     * }
     */
    public static int KEY_FOUR() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum .KEY_FIVE = 53;
     * }
     */
    public static int KEY_FIVE() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum .KEY_SIX = 54;
     * }
     */
    public static int KEY_SIX() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum .KEY_SEVEN = 55;
     * }
     */
    public static int KEY_SEVEN() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum .KEY_EIGHT = 56;
     * }
     */
    public static int KEY_EIGHT() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum .KEY_NINE = 57;
     * }
     */
    public static int KEY_NINE() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum .KEY_SEMICOLON = 59;
     * }
     */
    public static int KEY_SEMICOLON() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum .KEY_EQUAL = 61;
     * }
     */
    public static int KEY_EQUAL() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum .KEY_A = 65;
     * }
     */
    public static int KEY_A() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum .KEY_B = 66;
     * }
     */
    public static int KEY_B() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum .KEY_C = 67;
     * }
     */
    public static int KEY_C() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum .KEY_D = 68;
     * }
     */
    public static int KEY_D() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum .KEY_E = 69;
     * }
     */
    public static int KEY_E() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum .KEY_F = 70;
     * }
     */
    public static int KEY_F() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum .KEY_G = 71;
     * }
     */
    public static int KEY_G() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum .KEY_H = 72;
     * }
     */
    public static int KEY_H() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum .KEY_I = 73;
     * }
     */
    public static int KEY_I() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum .KEY_J = 74;
     * }
     */
    public static int KEY_J() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum .KEY_K = 75;
     * }
     */
    public static int KEY_K() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum .KEY_L = 76;
     * }
     */
    public static int KEY_L() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum .KEY_M = 77;
     * }
     */
    public static int KEY_M() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum .KEY_N = 78;
     * }
     */
    public static int KEY_N() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum .KEY_O = 79;
     * }
     */
    public static int KEY_O() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum .KEY_P = 80;
     * }
     */
    public static int KEY_P() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum .KEY_Q = 81;
     * }
     */
    public static int KEY_Q() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum .KEY_R = 82;
     * }
     */
    public static int KEY_R() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum .KEY_S = 83;
     * }
     */
    public static int KEY_S() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum .KEY_T = 84;
     * }
     */
    public static int KEY_T() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum .KEY_U = 85;
     * }
     */
    public static int KEY_U() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum .KEY_V = 86;
     * }
     */
    public static int KEY_V() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum .KEY_W = 87;
     * }
     */
    public static int KEY_W() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum .KEY_X = 88;
     * }
     */
    public static int KEY_X() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum .KEY_Y = 89;
     * }
     */
    public static int KEY_Y() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum .KEY_Z = 90;
     * }
     */
    public static int KEY_Z() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT_BRACKET = 91;
     * }
     */
    public static int KEY_LEFT_BRACKET() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum .KEY_BACKSLASH = 92;
     * }
     */
    public static int KEY_BACKSLASH() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT_BRACKET = 93;
     * }
     */
    public static int KEY_RIGHT_BRACKET() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum .KEY_GRAVE = 96;
     * }
     */
    public static int KEY_GRAVE() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum .KEY_SPACE = 32;
     * }
     */
    public static int KEY_SPACE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .KEY_ESCAPE = 256;
     * }
     */
    public static int KEY_ESCAPE() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .KEY_ENTER = 257;
     * }
     */
    public static int KEY_ENTER() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * enum .KEY_TAB = 258;
     * }
     */
    public static int KEY_TAB() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * enum .KEY_BACKSPACE = 259;
     * }
     */
    public static int KEY_BACKSPACE() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * enum .KEY_INSERT = 260;
     * }
     */
    public static int KEY_INSERT() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * enum .KEY_DELETE = 261;
     * }
     */
    public static int KEY_DELETE() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT = 262;
     * }
     */
    public static int KEY_RIGHT() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT = 263;
     * }
     */
    public static int KEY_LEFT() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * enum .KEY_DOWN = 264;
     * }
     */
    public static int KEY_DOWN() {
        return (int)264L;
    }
    /**
     * {@snippet :
     * enum .KEY_UP = 265;
     * }
     */
    public static int KEY_UP() {
        return (int)265L;
    }
    /**
     * {@snippet :
     * enum .KEY_PAGE_UP = 266;
     * }
     */
    public static int KEY_PAGE_UP() {
        return (int)266L;
    }
    /**
     * {@snippet :
     * enum .KEY_PAGE_DOWN = 267;
     * }
     */
    public static int KEY_PAGE_DOWN() {
        return (int)267L;
    }
    /**
     * {@snippet :
     * enum .KEY_HOME = 268;
     * }
     */
    public static int KEY_HOME() {
        return (int)268L;
    }
    /**
     * {@snippet :
     * enum .KEY_END = 269;
     * }
     */
    public static int KEY_END() {
        return (int)269L;
    }
    /**
     * {@snippet :
     * enum .KEY_CAPS_LOCK = 280;
     * }
     */
    public static int KEY_CAPS_LOCK() {
        return (int)280L;
    }
    /**
     * {@snippet :
     * enum .KEY_SCROLL_LOCK = 281;
     * }
     */
    public static int KEY_SCROLL_LOCK() {
        return (int)281L;
    }
    /**
     * {@snippet :
     * enum .KEY_NUM_LOCK = 282;
     * }
     */
    public static int KEY_NUM_LOCK() {
        return (int)282L;
    }
    /**
     * {@snippet :
     * enum .KEY_PRINT_SCREEN = 283;
     * }
     */
    public static int KEY_PRINT_SCREEN() {
        return (int)283L;
    }
    /**
     * {@snippet :
     * enum .KEY_PAUSE = 284;
     * }
     */
    public static int KEY_PAUSE() {
        return (int)284L;
    }
    /**
     * {@snippet :
     * enum .KEY_F1 = 290;
     * }
     */
    public static int KEY_F1() {
        return (int)290L;
    }
    /**
     * {@snippet :
     * enum .KEY_F2 = 291;
     * }
     */
    public static int KEY_F2() {
        return (int)291L;
    }
    /**
     * {@snippet :
     * enum .KEY_F3 = 292;
     * }
     */
    public static int KEY_F3() {
        return (int)292L;
    }
    /**
     * {@snippet :
     * enum .KEY_F4 = 293;
     * }
     */
    public static int KEY_F4() {
        return (int)293L;
    }
    /**
     * {@snippet :
     * enum .KEY_F5 = 294;
     * }
     */
    public static int KEY_F5() {
        return (int)294L;
    }
    /**
     * {@snippet :
     * enum .KEY_F6 = 295;
     * }
     */
    public static int KEY_F6() {
        return (int)295L;
    }
    /**
     * {@snippet :
     * enum .KEY_F7 = 296;
     * }
     */
    public static int KEY_F7() {
        return (int)296L;
    }
    /**
     * {@snippet :
     * enum .KEY_F8 = 297;
     * }
     */
    public static int KEY_F8() {
        return (int)297L;
    }
    /**
     * {@snippet :
     * enum .KEY_F9 = 298;
     * }
     */
    public static int KEY_F9() {
        return (int)298L;
    }
    /**
     * {@snippet :
     * enum .KEY_F10 = 299;
     * }
     */
    public static int KEY_F10() {
        return (int)299L;
    }
    /**
     * {@snippet :
     * enum .KEY_F11 = 300;
     * }
     */
    public static int KEY_F11() {
        return (int)300L;
    }
    /**
     * {@snippet :
     * enum .KEY_F12 = 301;
     * }
     */
    public static int KEY_F12() {
        return (int)301L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT_SHIFT = 340;
     * }
     */
    public static int KEY_LEFT_SHIFT() {
        return (int)340L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT_CONTROL = 341;
     * }
     */
    public static int KEY_LEFT_CONTROL() {
        return (int)341L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT_ALT = 342;
     * }
     */
    public static int KEY_LEFT_ALT() {
        return (int)342L;
    }
    /**
     * {@snippet :
     * enum .KEY_LEFT_SUPER = 343;
     * }
     */
    public static int KEY_LEFT_SUPER() {
        return (int)343L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT_SHIFT = 344;
     * }
     */
    public static int KEY_RIGHT_SHIFT() {
        return (int)344L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT_CONTROL = 345;
     * }
     */
    public static int KEY_RIGHT_CONTROL() {
        return (int)345L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT_ALT = 346;
     * }
     */
    public static int KEY_RIGHT_ALT() {
        return (int)346L;
    }
    /**
     * {@snippet :
     * enum .KEY_RIGHT_SUPER = 347;
     * }
     */
    public static int KEY_RIGHT_SUPER() {
        return (int)347L;
    }
    /**
     * {@snippet :
     * enum .KEY_KB_MENU = 348;
     * }
     */
    public static int KEY_KB_MENU() {
        return (int)348L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_0 = 320;
     * }
     */
    public static int KEY_KP_0() {
        return (int)320L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_1 = 321;
     * }
     */
    public static int KEY_KP_1() {
        return (int)321L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_2 = 322;
     * }
     */
    public static int KEY_KP_2() {
        return (int)322L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_3 = 323;
     * }
     */
    public static int KEY_KP_3() {
        return (int)323L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_4 = 324;
     * }
     */
    public static int KEY_KP_4() {
        return (int)324L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_5 = 325;
     * }
     */
    public static int KEY_KP_5() {
        return (int)325L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_6 = 326;
     * }
     */
    public static int KEY_KP_6() {
        return (int)326L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_7 = 327;
     * }
     */
    public static int KEY_KP_7() {
        return (int)327L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_8 = 328;
     * }
     */
    public static int KEY_KP_8() {
        return (int)328L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_9 = 329;
     * }
     */
    public static int KEY_KP_9() {
        return (int)329L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_DECIMAL = 330;
     * }
     */
    public static int KEY_KP_DECIMAL() {
        return (int)330L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_DIVIDE = 331;
     * }
     */
    public static int KEY_KP_DIVIDE() {
        return (int)331L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_MULTIPLY = 332;
     * }
     */
    public static int KEY_KP_MULTIPLY() {
        return (int)332L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_SUBTRACT = 333;
     * }
     */
    public static int KEY_KP_SUBTRACT() {
        return (int)333L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_ADD = 334;
     * }
     */
    public static int KEY_KP_ADD() {
        return (int)334L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_ENTER = 335;
     * }
     */
    public static int KEY_KP_ENTER() {
        return (int)335L;
    }
    /**
     * {@snippet :
     * enum .KEY_KP_EQUAL = 336;
     * }
     */
    public static int KEY_KP_EQUAL() {
        return (int)336L;
    }
    /**
     * {@snippet :
     * enum .KEY_BACK = 4;
     * }
     */
    public static int KEY_BACK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .KEY_MENU = 82;
     * }
     */
    public static int KEY_MENU() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum .KEY_VOLUME_UP = 24;
     * }
     */
    public static int KEY_VOLUME_UP() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .KEY_VOLUME_DOWN = 25;
     * }
     */
    public static int KEY_VOLUME_DOWN() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_LEFT = 0;
     * }
     */
    public static int MOUSE_BUTTON_LEFT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_RIGHT = 1;
     * }
     */
    public static int MOUSE_BUTTON_RIGHT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_MIDDLE = 2;
     * }
     */
    public static int MOUSE_BUTTON_MIDDLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_SIDE = 3;
     * }
     */
    public static int MOUSE_BUTTON_SIDE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_EXTRA = 4;
     * }
     */
    public static int MOUSE_BUTTON_EXTRA() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_FORWARD = 5;
     * }
     */
    public static int MOUSE_BUTTON_FORWARD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_BUTTON_BACK = 6;
     * }
     */
    public static int MOUSE_BUTTON_BACK() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_DEFAULT = 0;
     * }
     */
    public static int MOUSE_CURSOR_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_ARROW = 1;
     * }
     */
    public static int MOUSE_CURSOR_ARROW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_IBEAM = 2;
     * }
     */
    public static int MOUSE_CURSOR_IBEAM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_CROSSHAIR = 3;
     * }
     */
    public static int MOUSE_CURSOR_CROSSHAIR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_POINTING_HAND = 4;
     * }
     */
    public static int MOUSE_CURSOR_POINTING_HAND() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_RESIZE_EW = 5;
     * }
     */
    public static int MOUSE_CURSOR_RESIZE_EW() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_RESIZE_NS = 6;
     * }
     */
    public static int MOUSE_CURSOR_RESIZE_NS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_RESIZE_NWSE = 7;
     * }
     */
    public static int MOUSE_CURSOR_RESIZE_NWSE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_RESIZE_NESW = 8;
     * }
     */
    public static int MOUSE_CURSOR_RESIZE_NESW() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_RESIZE_ALL = 9;
     * }
     */
    public static int MOUSE_CURSOR_RESIZE_ALL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .MOUSE_CURSOR_NOT_ALLOWED = 10;
     * }
     */
    public static int MOUSE_CURSOR_NOT_ALLOWED() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_UNKNOWN = 0;
     * }
     */
    public static int GAMEPAD_BUTTON_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_FACE_UP = 1;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_FACE_UP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_FACE_RIGHT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_FACE_DOWN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_FACE_LEFT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_FACE_UP = 5;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_FACE_UP() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_FACE_RIGHT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_FACE_DOWN() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_FACE_LEFT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_TRIGGER_1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_TRIGGER_2() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_TRIGGER_1() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_TRIGGER_2() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_MIDDLE_LEFT = 13;
     * }
     */
    public static int GAMEPAD_BUTTON_MIDDLE_LEFT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_MIDDLE = 14;
     * }
     */
    public static int GAMEPAD_BUTTON_MIDDLE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_MIDDLE_RIGHT = 15;
     * }
     */
    public static int GAMEPAD_BUTTON_MIDDLE_RIGHT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_LEFT_THUMB = 16;
     * }
     */
    public static int GAMEPAD_BUTTON_LEFT_THUMB() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_BUTTON_RIGHT_THUMB = 17;
     * }
     */
    public static int GAMEPAD_BUTTON_RIGHT_THUMB() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_LEFT_X = 0;
     * }
     */
    public static int GAMEPAD_AXIS_LEFT_X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_LEFT_Y = 1;
     * }
     */
    public static int GAMEPAD_AXIS_LEFT_Y() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_RIGHT_X = 2;
     * }
     */
    public static int GAMEPAD_AXIS_RIGHT_X() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_RIGHT_Y = 3;
     * }
     */
    public static int GAMEPAD_AXIS_RIGHT_Y() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_LEFT_TRIGGER = 4;
     * }
     */
    public static int GAMEPAD_AXIS_LEFT_TRIGGER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
     * }
     */
    public static int GAMEPAD_AXIS_RIGHT_TRIGGER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_ALBEDO = 0;
     * }
     */
    public static int MATERIAL_MAP_ALBEDO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_METALNESS = 1;
     * }
     */
    public static int MATERIAL_MAP_METALNESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_NORMAL = 2;
     * }
     */
    public static int MATERIAL_MAP_NORMAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_ROUGHNESS = 3;
     * }
     */
    public static int MATERIAL_MAP_ROUGHNESS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_OCCLUSION = 4;
     * }
     */
    public static int MATERIAL_MAP_OCCLUSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_EMISSION = 5;
     * }
     */
    public static int MATERIAL_MAP_EMISSION() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_HEIGHT = 6;
     * }
     */
    public static int MATERIAL_MAP_HEIGHT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_CUBEMAP = 7;
     * }
     */
    public static int MATERIAL_MAP_CUBEMAP() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_IRRADIANCE = 8;
     * }
     */
    public static int MATERIAL_MAP_IRRADIANCE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_PREFILTER = 9;
     * }
     */
    public static int MATERIAL_MAP_PREFILTER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .MATERIAL_MAP_BRDF = 10;
     * }
     */
    public static int MATERIAL_MAP_BRDF() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_POSITION = 0;
     * }
     */
    public static int SHADER_LOC_VERTEX_POSITION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_TEXCOORD01 = 1;
     * }
     */
    public static int SHADER_LOC_VERTEX_TEXCOORD01() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_TEXCOORD02 = 2;
     * }
     */
    public static int SHADER_LOC_VERTEX_TEXCOORD02() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_NORMAL = 3;
     * }
     */
    public static int SHADER_LOC_VERTEX_NORMAL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_TANGENT = 4;
     * }
     */
    public static int SHADER_LOC_VERTEX_TANGENT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VERTEX_COLOR = 5;
     * }
     */
    public static int SHADER_LOC_VERTEX_COLOR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MATRIX_MVP = 6;
     * }
     */
    public static int SHADER_LOC_MATRIX_MVP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MATRIX_VIEW = 7;
     * }
     */
    public static int SHADER_LOC_MATRIX_VIEW() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MATRIX_PROJECTION = 8;
     * }
     */
    public static int SHADER_LOC_MATRIX_PROJECTION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MATRIX_MODEL = 9;
     * }
     */
    public static int SHADER_LOC_MATRIX_MODEL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MATRIX_NORMAL = 10;
     * }
     */
    public static int SHADER_LOC_MATRIX_NORMAL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_VECTOR_VIEW = 11;
     * }
     */
    public static int SHADER_LOC_VECTOR_VIEW() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_COLOR_DIFFUSE = 12;
     * }
     */
    public static int SHADER_LOC_COLOR_DIFFUSE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_COLOR_SPECULAR = 13;
     * }
     */
    public static int SHADER_LOC_COLOR_SPECULAR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_COLOR_AMBIENT = 14;
     * }
     */
    public static int SHADER_LOC_COLOR_AMBIENT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_ALBEDO = 15;
     * }
     */
    public static int SHADER_LOC_MAP_ALBEDO() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_METALNESS = 16;
     * }
     */
    public static int SHADER_LOC_MAP_METALNESS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_NORMAL = 17;
     * }
     */
    public static int SHADER_LOC_MAP_NORMAL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_ROUGHNESS = 18;
     * }
     */
    public static int SHADER_LOC_MAP_ROUGHNESS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_OCCLUSION = 19;
     * }
     */
    public static int SHADER_LOC_MAP_OCCLUSION() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_EMISSION = 20;
     * }
     */
    public static int SHADER_LOC_MAP_EMISSION() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_HEIGHT = 21;
     * }
     */
    public static int SHADER_LOC_MAP_HEIGHT() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_CUBEMAP = 22;
     * }
     */
    public static int SHADER_LOC_MAP_CUBEMAP() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_IRRADIANCE = 23;
     * }
     */
    public static int SHADER_LOC_MAP_IRRADIANCE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_PREFILTER = 24;
     * }
     */
    public static int SHADER_LOC_MAP_PREFILTER() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .SHADER_LOC_MAP_BRDF = 25;
     * }
     */
    public static int SHADER_LOC_MAP_BRDF() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_FLOAT = 0;
     * }
     */
    public static int SHADER_UNIFORM_FLOAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_VEC2 = 1;
     * }
     */
    public static int SHADER_UNIFORM_VEC2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_VEC3 = 2;
     * }
     */
    public static int SHADER_UNIFORM_VEC3() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_VEC4 = 3;
     * }
     */
    public static int SHADER_UNIFORM_VEC4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_INT = 4;
     * }
     */
    public static int SHADER_UNIFORM_INT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_IVEC2 = 5;
     * }
     */
    public static int SHADER_UNIFORM_IVEC2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_IVEC3 = 6;
     * }
     */
    public static int SHADER_UNIFORM_IVEC3() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_IVEC4 = 7;
     * }
     */
    public static int SHADER_UNIFORM_IVEC4() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .SHADER_UNIFORM_SAMPLER2D = 8;
     * }
     */
    public static int SHADER_UNIFORM_SAMPLER2D() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .SHADER_ATTRIB_FLOAT = 0;
     * }
     */
    public static int SHADER_ATTRIB_FLOAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .SHADER_ATTRIB_VEC2 = 1;
     * }
     */
    public static int SHADER_ATTRIB_VEC2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .SHADER_ATTRIB_VEC3 = 2;
     * }
     */
    public static int SHADER_ATTRIB_VEC3() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .SHADER_ATTRIB_VEC4 = 3;
     * }
     */
    public static int SHADER_ATTRIB_VEC4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_GRAYSCALE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R5G6B5() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R8G8B8() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R5G5B5A1() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R4G4B4A4() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R8G8B8A8() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R32 = 8;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R32() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R32G32B32() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R32G32B32A32() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R16 = 11;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R16() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R16G16B16() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13;
     * }
     */
    public static int PIXELFORMAT_UNCOMPRESSED_R16G16B16A16() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_DXT1_RGB = 14;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_DXT1_RGB() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_DXT1_RGBA() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_DXT3_RGBA() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_DXT5_RGBA() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_ETC1_RGB = 18;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_ETC1_RGB() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_ETC2_RGB = 19;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_ETC2_RGB() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_PVRT_RGB = 21;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_PVRT_RGB() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_PVRT_RGBA() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24;
     * }
     */
    public static int PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_POINT = 0;
     * }
     */
    public static int TEXTURE_FILTER_POINT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_BILINEAR = 1;
     * }
     */
    public static int TEXTURE_FILTER_BILINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_TRILINEAR = 2;
     * }
     */
    public static int TEXTURE_FILTER_TRILINEAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_ANISOTROPIC_4X = 3;
     * }
     */
    public static int TEXTURE_FILTER_ANISOTROPIC_4X() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_ANISOTROPIC_8X = 4;
     * }
     */
    public static int TEXTURE_FILTER_ANISOTROPIC_8X() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_FILTER_ANISOTROPIC_16X = 5;
     * }
     */
    public static int TEXTURE_FILTER_ANISOTROPIC_16X() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_WRAP_REPEAT = 0;
     * }
     */
    public static int TEXTURE_WRAP_REPEAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_WRAP_CLAMP = 1;
     * }
     */
    public static int TEXTURE_WRAP_CLAMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_WRAP_MIRROR_REPEAT = 2;
     * }
     */
    public static int TEXTURE_WRAP_MIRROR_REPEAT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .TEXTURE_WRAP_MIRROR_CLAMP = 3;
     * }
     */
    public static int TEXTURE_WRAP_MIRROR_CLAMP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_AUTO_DETECT = 0;
     * }
     */
    public static int CUBEMAP_LAYOUT_AUTO_DETECT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_LINE_VERTICAL = 1;
     * }
     */
    public static int CUBEMAP_LAYOUT_LINE_VERTICAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2;
     * }
     */
    public static int CUBEMAP_LAYOUT_LINE_HORIZONTAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3;
     * }
     */
    public static int CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4;
     * }
     */
    public static int CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .CUBEMAP_LAYOUT_PANORAMA = 5;
     * }
     */
    public static int CUBEMAP_LAYOUT_PANORAMA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .FONT_DEFAULT = 0;
     * }
     */
    public static int FONT_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .FONT_BITMAP = 1;
     * }
     */
    public static int FONT_BITMAP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .FONT_SDF = 2;
     * }
     */
    public static int FONT_SDF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .BLEND_ALPHA = 0;
     * }
     */
    public static int BLEND_ALPHA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .BLEND_ADDITIVE = 1;
     * }
     */
    public static int BLEND_ADDITIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .BLEND_MULTIPLIED = 2;
     * }
     */
    public static int BLEND_MULTIPLIED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .BLEND_ADD_COLORS = 3;
     * }
     */
    public static int BLEND_ADD_COLORS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .BLEND_SUBTRACT_COLORS = 4;
     * }
     */
    public static int BLEND_SUBTRACT_COLORS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .BLEND_ALPHA_PREMULTIPLY = 5;
     * }
     */
    public static int BLEND_ALPHA_PREMULTIPLY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .BLEND_CUSTOM = 6;
     * }
     */
    public static int BLEND_CUSTOM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .BLEND_CUSTOM_SEPARATE = 7;
     * }
     */
    public static int BLEND_CUSTOM_SEPARATE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_NONE = 0;
     * }
     */
    public static int GESTURE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_TAP = 1;
     * }
     */
    public static int GESTURE_TAP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_DOUBLETAP = 2;
     * }
     */
    public static int GESTURE_DOUBLETAP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_HOLD = 4;
     * }
     */
    public static int GESTURE_HOLD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_DRAG = 8;
     * }
     */
    public static int GESTURE_DRAG() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_SWIPE_RIGHT = 16;
     * }
     */
    public static int GESTURE_SWIPE_RIGHT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_SWIPE_LEFT = 32;
     * }
     */
    public static int GESTURE_SWIPE_LEFT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_SWIPE_UP = 64;
     * }
     */
    public static int GESTURE_SWIPE_UP() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_SWIPE_DOWN = 128;
     * }
     */
    public static int GESTURE_SWIPE_DOWN() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_PINCH_IN = 256;
     * }
     */
    public static int GESTURE_PINCH_IN() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .GESTURE_PINCH_OUT = 512;
     * }
     */
    public static int GESTURE_PINCH_OUT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_CUSTOM = 0;
     * }
     */
    public static int CAMERA_CUSTOM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_FREE = 1;
     * }
     */
    public static int CAMERA_FREE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_ORBITAL = 2;
     * }
     */
    public static int CAMERA_ORBITAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_FIRST_PERSON = 3;
     * }
     */
    public static int CAMERA_FIRST_PERSON() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_THIRD_PERSON = 4;
     * }
     */
    public static int CAMERA_THIRD_PERSON() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_PERSPECTIVE = 0;
     * }
     */
    public static int CAMERA_PERSPECTIVE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .CAMERA_ORTHOGRAPHIC = 1;
     * }
     */
    public static int CAMERA_ORTHOGRAPHIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .NPATCH_NINE_PATCH = 0;
     * }
     */
    public static int NPATCH_NINE_PATCH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .NPATCH_THREE_PATCH_VERTICAL = 1;
     * }
     */
    public static int NPATCH_THREE_PATCH_VERTICAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .NPATCH_THREE_PATCH_HORIZONTAL = 2;
     * }
     */
    public static int NPATCH_THREE_PATCH_HORIZONTAL() {
        return (int)2L;
    }
    public static MethodHandle InitWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"InitWindow");
    }
    /**
     * {@snippet :
     * void InitWindow(int width, int height, char* title);
     * }
     */
    public static void InitWindow(int width, int height, MemorySegment title) {
        var mh$ = InitWindow$MH();
        try {
            mh$.invokeExact(width, height, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"CloseWindow");
    }
    /**
     * {@snippet :
     * void CloseWindow();
     * }
     */
    public static void CloseWindow() {
        var mh$ = CloseWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowShouldClose$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"WindowShouldClose");
    }
    /**
     * {@snippet :
     * _Bool WindowShouldClose();
     * }
     */
    public static boolean WindowShouldClose() {
        var mh$ = WindowShouldClose$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowReady$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"IsWindowReady");
    }
    /**
     * {@snippet :
     * _Bool IsWindowReady();
     * }
     */
    public static boolean IsWindowReady() {
        var mh$ = IsWindowReady$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowFullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"IsWindowFullscreen");
    }
    /**
     * {@snippet :
     * _Bool IsWindowFullscreen();
     * }
     */
    public static boolean IsWindowFullscreen() {
        var mh$ = IsWindowFullscreen$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowHidden$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"IsWindowHidden");
    }
    /**
     * {@snippet :
     * _Bool IsWindowHidden();
     * }
     */
    public static boolean IsWindowHidden() {
        var mh$ = IsWindowHidden$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowMinimized$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"IsWindowMinimized");
    }
    /**
     * {@snippet :
     * _Bool IsWindowMinimized();
     * }
     */
    public static boolean IsWindowMinimized() {
        var mh$ = IsWindowMinimized$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowMaximized$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"IsWindowMaximized");
    }
    /**
     * {@snippet :
     * _Bool IsWindowMaximized();
     * }
     */
    public static boolean IsWindowMaximized() {
        var mh$ = IsWindowMaximized$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowFocused$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"IsWindowFocused");
    }
    /**
     * {@snippet :
     * _Bool IsWindowFocused();
     * }
     */
    public static boolean IsWindowFocused() {
        var mh$ = IsWindowFocused$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowResized$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"IsWindowResized");
    }
    /**
     * {@snippet :
     * _Bool IsWindowResized();
     * }
     */
    public static boolean IsWindowResized() {
        var mh$ = IsWindowResized$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowState$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"IsWindowState");
    }
    /**
     * {@snippet :
     * _Bool IsWindowState(unsigned int flag);
     * }
     */
    public static boolean IsWindowState(int flag) {
        var mh$ = IsWindowState$MH();
        try {
            return (boolean)mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowState$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$6,"SetWindowState");
    }
    /**
     * {@snippet :
     * void SetWindowState(unsigned int flags);
     * }
     */
    public static void SetWindowState(int flags) {
        var mh$ = SetWindowState$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearWindowState$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"ClearWindowState");
    }
    /**
     * {@snippet :
     * void ClearWindowState(unsigned int flags);
     * }
     */
    public static void ClearWindowState(int flags) {
        var mh$ = ClearWindowState$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToggleFullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"ToggleFullscreen");
    }
    /**
     * {@snippet :
     * void ToggleFullscreen();
     * }
     */
    public static void ToggleFullscreen() {
        var mh$ = ToggleFullscreen$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToggleBorderlessWindowed$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"ToggleBorderlessWindowed");
    }
    /**
     * {@snippet :
     * void ToggleBorderlessWindowed();
     * }
     */
    public static void ToggleBorderlessWindowed() {
        var mh$ = ToggleBorderlessWindowed$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MaximizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"MaximizeWindow");
    }
    /**
     * {@snippet :
     * void MaximizeWindow();
     * }
     */
    public static void MaximizeWindow() {
        var mh$ = MaximizeWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MinimizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"MinimizeWindow");
    }
    /**
     * {@snippet :
     * void MinimizeWindow();
     * }
     */
    public static void MinimizeWindow() {
        var mh$ = MinimizeWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"RestoreWindow");
    }
    /**
     * {@snippet :
     * void RestoreWindow();
     * }
     */
    public static void RestoreWindow() {
        var mh$ = RestoreWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"SetWindowIcon");
    }
    /**
     * {@snippet :
     * void SetWindowIcon(Image image);
     * }
     */
    public static void SetWindowIcon(MemorySegment image) {
        var mh$ = SetWindowIcon$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowIcons$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"SetWindowIcons");
    }
    /**
     * {@snippet :
     * void SetWindowIcons(Image* images, int count);
     * }
     */
    public static void SetWindowIcons(MemorySegment images, int count) {
        var mh$ = SetWindowIcons$MH();
        try {
            mh$.invokeExact(images, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"SetWindowTitle");
    }
    /**
     * {@snippet :
     * void SetWindowTitle(char* title);
     * }
     */
    public static void SetWindowTitle(MemorySegment title) {
        var mh$ = SetWindowTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"SetWindowPosition");
    }
    /**
     * {@snippet :
     * void SetWindowPosition(int x, int y);
     * }
     */
    public static void SetWindowPosition(int x, int y) {
        var mh$ = SetWindowPosition$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"SetWindowMonitor");
    }
    /**
     * {@snippet :
     * void SetWindowMonitor(int monitor);
     * }
     */
    public static void SetWindowMonitor(int monitor) {
        var mh$ = SetWindowMonitor$MH();
        try {
            mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowMinSize$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"SetWindowMinSize");
    }
    /**
     * {@snippet :
     * void SetWindowMinSize(int width, int height);
     * }
     */
    public static void SetWindowMinSize(int width, int height) {
        var mh$ = SetWindowMinSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowMaxSize$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"SetWindowMaxSize");
    }
    /**
     * {@snippet :
     * void SetWindowMaxSize(int width, int height);
     * }
     */
    public static void SetWindowMaxSize(int width, int height) {
        var mh$ = SetWindowMaxSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"SetWindowSize");
    }
    /**
     * {@snippet :
     * void SetWindowSize(int width, int height);
     * }
     */
    public static void SetWindowSize(int width, int height) {
        var mh$ = SetWindowSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowOpacity$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"SetWindowOpacity");
    }
    /**
     * {@snippet :
     * void SetWindowOpacity(float opacity);
     * }
     */
    public static void SetWindowOpacity(float opacity) {
        var mh$ = SetWindowOpacity$MH();
        try {
            mh$.invokeExact(opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowFocused$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"SetWindowFocused");
    }
    /**
     * {@snippet :
     * void SetWindowFocused();
     * }
     */
    public static void SetWindowFocused() {
        var mh$ = SetWindowFocused$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"GetWindowHandle");
    }
    /**
     * {@snippet :
     * void* GetWindowHandle();
     * }
     */
    public static MemorySegment GetWindowHandle() {
        var mh$ = GetWindowHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScreenWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$6,"GetScreenWidth");
    }
    /**
     * {@snippet :
     * int GetScreenWidth();
     * }
     */
    public static int GetScreenWidth() {
        var mh$ = GetScreenWidth$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScreenHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"GetScreenHeight");
    }
    /**
     * {@snippet :
     * int GetScreenHeight();
     * }
     */
    public static int GetScreenHeight() {
        var mh$ = GetScreenHeight$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRenderWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"GetRenderWidth");
    }
    /**
     * {@snippet :
     * int GetRenderWidth();
     * }
     */
    public static int GetRenderWidth() {
        var mh$ = GetRenderWidth$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRenderHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"GetRenderHeight");
    }
    /**
     * {@snippet :
     * int GetRenderHeight();
     * }
     */
    public static int GetRenderHeight() {
        var mh$ = GetRenderHeight$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorCount$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"GetMonitorCount");
    }
    /**
     * {@snippet :
     * int GetMonitorCount();
     * }
     */
    public static int GetMonitorCount() {
        var mh$ = GetMonitorCount$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"GetCurrentMonitor");
    }
    /**
     * {@snippet :
     * int GetCurrentMonitor();
     * }
     */
    public static int GetCurrentMonitor() {
        var mh$ = GetCurrentMonitor$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$6,"GetMonitorPosition");
    }
    /**
     * {@snippet :
     * Vector2 GetMonitorPosition(int monitor);
     * }
     */
    public static MemorySegment GetMonitorPosition(SegmentAllocator allocator, int monitor) {
        var mh$ = GetMonitorPosition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"GetMonitorWidth");
    }
    /**
     * {@snippet :
     * int GetMonitorWidth(int monitor);
     * }
     */
    public static int GetMonitorWidth(int monitor) {
        var mh$ = GetMonitorWidth$MH();
        try {
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"GetMonitorHeight");
    }
    /**
     * {@snippet :
     * int GetMonitorHeight(int monitor);
     * }
     */
    public static int GetMonitorHeight(int monitor) {
        var mh$ = GetMonitorHeight$MH();
        try {
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorPhysicalWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"GetMonitorPhysicalWidth");
    }
    /**
     * {@snippet :
     * int GetMonitorPhysicalWidth(int monitor);
     * }
     */
    public static int GetMonitorPhysicalWidth(int monitor) {
        var mh$ = GetMonitorPhysicalWidth$MH();
        try {
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorPhysicalHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"GetMonitorPhysicalHeight");
    }
    /**
     * {@snippet :
     * int GetMonitorPhysicalHeight(int monitor);
     * }
     */
    public static int GetMonitorPhysicalHeight(int monitor) {
        var mh$ = GetMonitorPhysicalHeight$MH();
        try {
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorRefreshRate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"GetMonitorRefreshRate");
    }
    /**
     * {@snippet :
     * int GetMonitorRefreshRate(int monitor);
     * }
     */
    public static int GetMonitorRefreshRate(int monitor) {
        var mh$ = GetMonitorRefreshRate$MH();
        try {
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"GetWindowPosition");
    }
    /**
     * {@snippet :
     * Vector2 GetWindowPosition();
     * }
     */
    public static MemorySegment GetWindowPosition(SegmentAllocator allocator) {
        var mh$ = GetWindowPosition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowScaleDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"GetWindowScaleDPI");
    }
    /**
     * {@snippet :
     * Vector2 GetWindowScaleDPI();
     * }
     */
    public static MemorySegment GetWindowScaleDPI(SegmentAllocator allocator) {
        var mh$ = GetWindowScaleDPI$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorName$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"GetMonitorName");
    }
    /**
     * {@snippet :
     * char* GetMonitorName(int monitor);
     * }
     */
    public static MemorySegment GetMonitorName(int monitor) {
        var mh$ = GetMonitorName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardText$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"SetClipboardText");
    }
    /**
     * {@snippet :
     * void SetClipboardText(char* text);
     * }
     */
    public static void SetClipboardText(MemorySegment text) {
        var mh$ = SetClipboardText$MH();
        try {
            mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardText$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"GetClipboardText");
    }
    /**
     * {@snippet :
     * char* GetClipboardText();
     * }
     */
    public static MemorySegment GetClipboardText() {
        var mh$ = GetClipboardText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableEventWaiting$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"EnableEventWaiting");
    }
    /**
     * {@snippet :
     * void EnableEventWaiting();
     * }
     */
    public static void EnableEventWaiting() {
        var mh$ = EnableEventWaiting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableEventWaiting$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"DisableEventWaiting");
    }
    /**
     * {@snippet :
     * void DisableEventWaiting();
     * }
     */
    public static void DisableEventWaiting() {
        var mh$ = DisableEventWaiting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"ShowCursor");
    }
    /**
     * {@snippet :
     * void ShowCursor();
     * }
     */
    public static void ShowCursor() {
        var mh$ = ShowCursor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HideCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"HideCursor");
    }
    /**
     * {@snippet :
     * void HideCursor();
     * }
     */
    public static void HideCursor() {
        var mh$ = HideCursor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCursorHidden$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"IsCursorHidden");
    }
    /**
     * {@snippet :
     * _Bool IsCursorHidden();
     * }
     */
    public static boolean IsCursorHidden() {
        var mh$ = IsCursorHidden$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"EnableCursor");
    }
    /**
     * {@snippet :
     * void EnableCursor();
     * }
     */
    public static void EnableCursor() {
        var mh$ = EnableCursor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"DisableCursor");
    }
    /**
     * {@snippet :
     * void DisableCursor();
     * }
     */
    public static void DisableCursor() {
        var mh$ = DisableCursor$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCursorOnScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"IsCursorOnScreen");
    }
    /**
     * {@snippet :
     * _Bool IsCursorOnScreen();
     * }
     */
    public static boolean IsCursorOnScreen() {
        var mh$ = IsCursorOnScreen$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"ClearBackground");
    }
    /**
     * {@snippet :
     * void ClearBackground(Color color);
     * }
     */
    public static void ClearBackground(MemorySegment color) {
        var mh$ = ClearBackground$MH();
        try {
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"BeginDrawing");
    }
    /**
     * {@snippet :
     * void BeginDrawing();
     * }
     */
    public static void BeginDrawing() {
        var mh$ = BeginDrawing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"EndDrawing");
    }
    /**
     * {@snippet :
     * void EndDrawing();
     * }
     */
    public static void EndDrawing() {
        var mh$ = EndDrawing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginMode2D$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"BeginMode2D");
    }
    /**
     * {@snippet :
     * void BeginMode2D(Camera2D camera);
     * }
     */
    public static void BeginMode2D(MemorySegment camera) {
        var mh$ = BeginMode2D$MH();
        try {
            mh$.invokeExact(camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndMode2D$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"EndMode2D");
    }
    /**
     * {@snippet :
     * void EndMode2D();
     * }
     */
    public static void EndMode2D() {
        var mh$ = EndMode2D$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginMode3D$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"BeginMode3D");
    }
    /**
     * {@snippet :
     * void BeginMode3D(Camera3D camera);
     * }
     */
    public static void BeginMode3D(MemorySegment camera) {
        var mh$ = BeginMode3D$MH();
        try {
            mh$.invokeExact(camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndMode3D$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"EndMode3D");
    }
    /**
     * {@snippet :
     * void EndMode3D();
     * }
     */
    public static void EndMode3D() {
        var mh$ = EndMode3D$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginTextureMode$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"BeginTextureMode");
    }
    /**
     * {@snippet :
     * void BeginTextureMode(RenderTexture2D target);
     * }
     */
    public static void BeginTextureMode(MemorySegment target) {
        var mh$ = BeginTextureMode$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndTextureMode$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"EndTextureMode");
    }
    /**
     * {@snippet :
     * void EndTextureMode();
     * }
     */
    public static void EndTextureMode() {
        var mh$ = EndTextureMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginShaderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"BeginShaderMode");
    }
    /**
     * {@snippet :
     * void BeginShaderMode(Shader shader);
     * }
     */
    public static void BeginShaderMode(MemorySegment shader) {
        var mh$ = BeginShaderMode$MH();
        try {
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndShaderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"EndShaderMode");
    }
    /**
     * {@snippet :
     * void EndShaderMode();
     * }
     */
    public static void EndShaderMode() {
        var mh$ = EndShaderMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"BeginBlendMode");
    }
    /**
     * {@snippet :
     * void BeginBlendMode(int mode);
     * }
     */
    public static void BeginBlendMode(int mode) {
        var mh$ = BeginBlendMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"EndBlendMode");
    }
    /**
     * {@snippet :
     * void EndBlendMode();
     * }
     */
    public static void EndBlendMode() {
        var mh$ = EndBlendMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginScissorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"BeginScissorMode");
    }
    /**
     * {@snippet :
     * void BeginScissorMode(int x, int y, int width, int height);
     * }
     */
    public static void BeginScissorMode(int x, int y, int width, int height) {
        var mh$ = BeginScissorMode$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndScissorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"EndScissorMode");
    }
    /**
     * {@snippet :
     * void EndScissorMode();
     * }
     */
    public static void EndScissorMode() {
        var mh$ = EndScissorMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginVrStereoMode$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"BeginVrStereoMode");
    }
    /**
     * {@snippet :
     * void BeginVrStereoMode(VrStereoConfig config);
     * }
     */
    public static void BeginVrStereoMode(MemorySegment config) {
        var mh$ = BeginVrStereoMode$MH();
        try {
            mh$.invokeExact(config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndVrStereoMode$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"EndVrStereoMode");
    }
    /**
     * {@snippet :
     * void EndVrStereoMode();
     * }
     */
    public static void EndVrStereoMode() {
        var mh$ = EndVrStereoMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadVrStereoConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"LoadVrStereoConfig");
    }
    /**
     * {@snippet :
     * VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);
     * }
     */
    public static MemorySegment LoadVrStereoConfig(SegmentAllocator allocator, MemorySegment device) {
        var mh$ = LoadVrStereoConfig$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadVrStereoConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"UnloadVrStereoConfig");
    }
    /**
     * {@snippet :
     * void UnloadVrStereoConfig(VrStereoConfig config);
     * }
     */
    public static void UnloadVrStereoConfig(MemorySegment config) {
        var mh$ = UnloadVrStereoConfig$MH();
        try {
            mh$.invokeExact(config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadShader$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"LoadShader");
    }
    /**
     * {@snippet :
     * Shader LoadShader(char* vsFileName, char* fsFileName);
     * }
     */
    public static MemorySegment LoadShader(SegmentAllocator allocator, MemorySegment vsFileName, MemorySegment fsFileName) {
        var mh$ = LoadShader$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, vsFileName, fsFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadShaderFromMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"LoadShaderFromMemory");
    }
    /**
     * {@snippet :
     * Shader LoadShaderFromMemory(char* vsCode, char* fsCode);
     * }
     */
    public static MemorySegment LoadShaderFromMemory(SegmentAllocator allocator, MemorySegment vsCode, MemorySegment fsCode) {
        var mh$ = LoadShaderFromMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, vsCode, fsCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsShaderReady$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"IsShaderReady");
    }
    /**
     * {@snippet :
     * _Bool IsShaderReady(Shader shader);
     * }
     */
    public static boolean IsShaderReady(MemorySegment shader) {
        var mh$ = IsShaderReady$MH();
        try {
            return (boolean)mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShaderLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$6,"GetShaderLocation");
    }
    /**
     * {@snippet :
     * int GetShaderLocation(Shader shader, char* uniformName);
     * }
     */
    public static int GetShaderLocation(MemorySegment shader, MemorySegment uniformName) {
        var mh$ = GetShaderLocation$MH();
        try {
            return (int)mh$.invokeExact(shader, uniformName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShaderLocationAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"GetShaderLocationAttrib");
    }
    /**
     * {@snippet :
     * int GetShaderLocationAttrib(Shader shader, char* attribName);
     * }
     */
    public static int GetShaderLocationAttrib(MemorySegment shader, MemorySegment attribName) {
        var mh$ = GetShaderLocationAttrib$MH();
        try {
            return (int)mh$.invokeExact(shader, attribName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetShaderValue$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"SetShaderValue");
    }
    /**
     * {@snippet :
     * void SetShaderValue(Shader shader, int locIndex, void* value, int uniformType);
     * }
     */
    public static void SetShaderValue(MemorySegment shader, int locIndex, MemorySegment value, int uniformType) {
        var mh$ = SetShaderValue$MH();
        try {
            mh$.invokeExact(shader, locIndex, value, uniformType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetShaderValueV$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"SetShaderValueV");
    }
    /**
     * {@snippet :
     * void SetShaderValueV(Shader shader, int locIndex, void* value, int uniformType, int count);
     * }
     */
    public static void SetShaderValueV(MemorySegment shader, int locIndex, MemorySegment value, int uniformType, int count) {
        var mh$ = SetShaderValueV$MH();
        try {
            mh$.invokeExact(shader, locIndex, value, uniformType, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetShaderValueMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$6,"SetShaderValueMatrix");
    }
    /**
     * {@snippet :
     * void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);
     * }
     */
    public static void SetShaderValueMatrix(MemorySegment shader, int locIndex, MemorySegment mat) {
        var mh$ = SetShaderValueMatrix$MH();
        try {
            mh$.invokeExact(shader, locIndex, mat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetShaderValueTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"SetShaderValueTexture");
    }
    /**
     * {@snippet :
     * void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture);
     * }
     */
    public static void SetShaderValueTexture(MemorySegment shader, int locIndex, MemorySegment texture) {
        var mh$ = SetShaderValueTexture$MH();
        try {
            mh$.invokeExact(shader, locIndex, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadShader$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"UnloadShader");
    }
    /**
     * {@snippet :
     * void UnloadShader(Shader shader);
     * }
     */
    public static void UnloadShader(MemorySegment shader) {
        var mh$ = UnloadShader$MH();
        try {
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseRay$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"GetMouseRay");
    }
    /**
     * {@snippet :
     * Ray GetMouseRay(Vector2 mousePosition, Camera camera);
     * }
     */
    public static MemorySegment GetMouseRay(SegmentAllocator allocator, MemorySegment mousePosition, MemorySegment camera) {
        var mh$ = GetMouseRay$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, mousePosition, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCameraMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$6,"GetCameraMatrix");
    }
    /**
     * {@snippet :
     * Matrix GetCameraMatrix(Camera camera);
     * }
     */
    public static MemorySegment GetCameraMatrix(SegmentAllocator allocator, MemorySegment camera) {
        var mh$ = GetCameraMatrix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCameraMatrix2D$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"GetCameraMatrix2D");
    }
    /**
     * {@snippet :
     * Matrix GetCameraMatrix2D(Camera2D camera);
     * }
     */
    public static MemorySegment GetCameraMatrix2D(SegmentAllocator allocator, MemorySegment camera) {
        var mh$ = GetCameraMatrix2D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldToScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"GetWorldToScreen");
    }
    /**
     * {@snippet :
     * Vector2 GetWorldToScreen(Vector3 position, Camera camera);
     * }
     */
    public static MemorySegment GetWorldToScreen(SegmentAllocator allocator, MemorySegment position, MemorySegment camera) {
        var mh$ = GetWorldToScreen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, position, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScreenToWorld2D$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"GetScreenToWorld2D");
    }
    /**
     * {@snippet :
     * Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);
     * }
     */
    public static MemorySegment GetScreenToWorld2D(SegmentAllocator allocator, MemorySegment position, MemorySegment camera) {
        var mh$ = GetScreenToWorld2D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, position, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldToScreenEx$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"GetWorldToScreenEx");
    }
    /**
     * {@snippet :
     * Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height);
     * }
     */
    public static MemorySegment GetWorldToScreenEx(SegmentAllocator allocator, MemorySegment position, MemorySegment camera, int width, int height) {
        var mh$ = GetWorldToScreenEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, position, camera, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldToScreen2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"GetWorldToScreen2D");
    }
    /**
     * {@snippet :
     * Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);
     * }
     */
    public static MemorySegment GetWorldToScreen2D(SegmentAllocator allocator, MemorySegment position, MemorySegment camera) {
        var mh$ = GetWorldToScreen2D$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, position, camera);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTargetFPS$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"SetTargetFPS");
    }
    /**
     * {@snippet :
     * void SetTargetFPS(int fps);
     * }
     */
    public static void SetTargetFPS(int fps) {
        var mh$ = SetTargetFPS$MH();
        try {
            mh$.invokeExact(fps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFrameTime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"GetFrameTime");
    }
    /**
     * {@snippet :
     * float GetFrameTime();
     * }
     */
    public static float GetFrameTime() {
        var mh$ = GetFrameTime$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTime$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"GetTime");
    }
    /**
     * {@snippet :
     * double GetTime();
     * }
     */
    public static double GetTime() {
        var mh$ = GetTime$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFPS$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"GetFPS");
    }
    /**
     * {@snippet :
     * int GetFPS();
     * }
     */
    public static int GetFPS() {
        var mh$ = GetFPS$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"SwapScreenBuffer");
    }
    /**
     * {@snippet :
     * void SwapScreenBuffer();
     * }
     */
    public static void SwapScreenBuffer() {
        var mh$ = SwapScreenBuffer$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PollInputEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"PollInputEvents");
    }
    /**
     * {@snippet :
     * void PollInputEvents();
     * }
     */
    public static void PollInputEvents() {
        var mh$ = PollInputEvents$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitTime$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$6,"WaitTime");
    }
    /**
     * {@snippet :
     * void WaitTime(double seconds);
     * }
     */
    public static void WaitTime(double seconds) {
        var mh$ = WaitTime$MH();
        try {
            mh$.invokeExact(seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRandomSeed$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"SetRandomSeed");
    }
    /**
     * {@snippet :
     * void SetRandomSeed(unsigned int seed);
     * }
     */
    public static void SetRandomSeed(int seed) {
        var mh$ = SetRandomSeed$MH();
        try {
            mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRandomValue$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"GetRandomValue");
    }
    /**
     * {@snippet :
     * int GetRandomValue(int min, int max);
     * }
     */
    public static int GetRandomValue(int min, int max) {
        var mh$ = GetRandomValue$MH();
        try {
            return (int)mh$.invokeExact(min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadRandomSequence$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"LoadRandomSequence");
    }
    /**
     * {@snippet :
     * int* LoadRandomSequence(unsigned int count, int min, int max);
     * }
     */
    public static MemorySegment LoadRandomSequence(int count, int min, int max) {
        var mh$ = LoadRandomSequence$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(count, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadRandomSequence$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"UnloadRandomSequence");
    }
    /**
     * {@snippet :
     * void UnloadRandomSequence(int* sequence);
     * }
     */
    public static void UnloadRandomSequence(MemorySegment sequence) {
        var mh$ = UnloadRandomSequence$MH();
        try {
            mh$.invokeExact(sequence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TakeScreenshot$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"TakeScreenshot");
    }
    /**
     * {@snippet :
     * void TakeScreenshot(char* fileName);
     * }
     */
    public static void TakeScreenshot(MemorySegment fileName) {
        var mh$ = TakeScreenshot$MH();
        try {
            mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConfigFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"SetConfigFlags");
    }
    /**
     * {@snippet :
     * void SetConfigFlags(unsigned int flags);
     * }
     */
    public static void SetConfigFlags(int flags) {
        var mh$ = SetConfigFlags$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenURL$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"OpenURL");
    }
    /**
     * {@snippet :
     * void OpenURL(char* url);
     * }
     */
    public static void OpenURL(MemorySegment url) {
        var mh$ = OpenURL$MH();
        try {
            mh$.invokeExact(url);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TraceLog$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"TraceLog");
    }
    /**
     * {@snippet :
     * void TraceLog(int logLevel, char* text,...);
     * }
     */
    public static void TraceLog(int logLevel, MemorySegment text, Object... x2) {
        var mh$ = TraceLog$MH();
        try {
            mh$.invokeExact(logLevel, text, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTraceLogLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"SetTraceLogLevel");
    }
    /**
     * {@snippet :
     * void SetTraceLogLevel(int logLevel);
     * }
     */
    public static void SetTraceLogLevel(int logLevel) {
        var mh$ = SetTraceLogLevel$MH();
        try {
            mh$.invokeExact(logLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MemAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"MemAlloc");
    }
    /**
     * {@snippet :
     * void* MemAlloc(unsigned int size);
     * }
     */
    public static MemorySegment MemAlloc(int size) {
        var mh$ = MemAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MemRealloc$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"MemRealloc");
    }
    /**
     * {@snippet :
     * void* MemRealloc(void* ptr, unsigned int size);
     * }
     */
    public static MemorySegment MemRealloc(MemorySegment ptr, int size) {
        var mh$ = MemRealloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MemFree$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"MemFree");
    }
    /**
     * {@snippet :
     * void MemFree(void* ptr);
     * }
     */
    public static void MemFree(MemorySegment ptr) {
        var mh$ = MemFree$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTraceLogCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"SetTraceLogCallback");
    }
    /**
     * {@snippet :
     * void SetTraceLogCallback(TraceLogCallback callback);
     * }
     */
    public static void SetTraceLogCallback(MemorySegment callback) {
        var mh$ = SetTraceLogCallback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLoadFileDataCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"SetLoadFileDataCallback");
    }
    /**
     * {@snippet :
     * void SetLoadFileDataCallback(LoadFileDataCallback callback);
     * }
     */
    public static void SetLoadFileDataCallback(MemorySegment callback) {
        var mh$ = SetLoadFileDataCallback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSaveFileDataCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"SetSaveFileDataCallback");
    }
    /**
     * {@snippet :
     * void SetSaveFileDataCallback(SaveFileDataCallback callback);
     * }
     */
    public static void SetSaveFileDataCallback(MemorySegment callback) {
        var mh$ = SetSaveFileDataCallback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLoadFileTextCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"SetLoadFileTextCallback");
    }
    /**
     * {@snippet :
     * void SetLoadFileTextCallback(LoadFileTextCallback callback);
     * }
     */
    public static void SetLoadFileTextCallback(MemorySegment callback) {
        var mh$ = SetLoadFileTextCallback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSaveFileTextCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"SetSaveFileTextCallback");
    }
    /**
     * {@snippet :
     * void SetSaveFileTextCallback(SaveFileTextCallback callback);
     * }
     */
    public static void SetSaveFileTextCallback(MemorySegment callback) {
        var mh$ = SetSaveFileTextCallback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"LoadFileData");
    }
    /**
     * {@snippet :
     * unsigned char* LoadFileData(char* fileName, int* dataSize);
     * }
     */
    public static MemorySegment LoadFileData(MemorySegment fileName, MemorySegment dataSize) {
        var mh$ = LoadFileData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileName, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"UnloadFileData");
    }
    /**
     * {@snippet :
     * void UnloadFileData(unsigned char* data);
     * }
     */
    public static void UnloadFileData(MemorySegment data) {
        var mh$ = UnloadFileData$MH();
        try {
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"SaveFileData");
    }
    /**
     * {@snippet :
     * _Bool SaveFileData(char* fileName, void* data, int dataSize);
     * }
     */
    public static boolean SaveFileData(MemorySegment fileName, MemorySegment data, int dataSize) {
        var mh$ = SaveFileData$MH();
        try {
            return (boolean)mh$.invokeExact(fileName, data, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportDataAsCode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"ExportDataAsCode");
    }
    /**
     * {@snippet :
     * _Bool ExportDataAsCode(unsigned char* data, int dataSize, char* fileName);
     * }
     */
    public static boolean ExportDataAsCode(MemorySegment data, int dataSize, MemorySegment fileName) {
        var mh$ = ExportDataAsCode$MH();
        try {
            return (boolean)mh$.invokeExact(data, dataSize, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFileText$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"LoadFileText");
    }
    /**
     * {@snippet :
     * char* LoadFileText(char* fileName);
     * }
     */
    public static MemorySegment LoadFileText(MemorySegment fileName) {
        var mh$ = LoadFileText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadFileText$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"UnloadFileText");
    }
    /**
     * {@snippet :
     * void UnloadFileText(char* text);
     * }
     */
    public static void UnloadFileText(MemorySegment text) {
        var mh$ = UnloadFileText$MH();
        try {
            mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveFileText$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"SaveFileText");
    }
    /**
     * {@snippet :
     * _Bool SaveFileText(char* fileName, char* text);
     * }
     */
    public static boolean SaveFileText(MemorySegment fileName, MemorySegment text) {
        var mh$ = SaveFileText$MH();
        try {
            return (boolean)mh$.invokeExact(fileName, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileExists$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$6,"FileExists");
    }
    /**
     * {@snippet :
     * _Bool FileExists(char* fileName);
     * }
     */
    public static boolean FileExists(MemorySegment fileName) {
        var mh$ = FileExists$MH();
        try {
            return (boolean)mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DirectoryExists$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"DirectoryExists");
    }
    /**
     * {@snippet :
     * _Bool DirectoryExists(char* dirPath);
     * }
     */
    public static boolean DirectoryExists(MemorySegment dirPath) {
        var mh$ = DirectoryExists$MH();
        try {
            return (boolean)mh$.invokeExact(dirPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsFileExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"IsFileExtension");
    }
    /**
     * {@snippet :
     * _Bool IsFileExtension(char* fileName, char* ext);
     * }
     */
    public static boolean IsFileExtension(MemorySegment fileName, MemorySegment ext) {
        var mh$ = IsFileExtension$MH();
        try {
            return (boolean)mh$.invokeExact(fileName, ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileLength$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"GetFileLength");
    }
    /**
     * {@snippet :
     * int GetFileLength(char* fileName);
     * }
     */
    public static int GetFileLength(MemorySegment fileName) {
        var mh$ = GetFileLength$MH();
        try {
            return (int)mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"GetFileExtension");
    }
    /**
     * {@snippet :
     * char* GetFileExtension(char* fileName);
     * }
     */
    public static MemorySegment GetFileExtension(MemorySegment fileName) {
        var mh$ = GetFileExtension$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileName$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"GetFileName");
    }
    /**
     * {@snippet :
     * char* GetFileName(char* filePath);
     * }
     */
    public static MemorySegment GetFileName(MemorySegment filePath) {
        var mh$ = GetFileName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileNameWithoutExt$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"GetFileNameWithoutExt");
    }
    /**
     * {@snippet :
     * char* GetFileNameWithoutExt(char* filePath);
     * }
     */
    public static MemorySegment GetFileNameWithoutExt(MemorySegment filePath) {
        var mh$ = GetFileNameWithoutExt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDirectoryPath$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"GetDirectoryPath");
    }
    /**
     * {@snippet :
     * char* GetDirectoryPath(char* filePath);
     * }
     */
    public static MemorySegment GetDirectoryPath(MemorySegment filePath) {
        var mh$ = GetDirectoryPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filePath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrevDirectoryPath$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"GetPrevDirectoryPath");
    }
    /**
     * {@snippet :
     * char* GetPrevDirectoryPath(char* dirPath);
     * }
     */
    public static MemorySegment GetPrevDirectoryPath(MemorySegment dirPath) {
        var mh$ = GetPrevDirectoryPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dirPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorkingDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"GetWorkingDirectory");
    }
    /**
     * {@snippet :
     * char* GetWorkingDirectory();
     * }
     */
    public static MemorySegment GetWorkingDirectory() {
        var mh$ = GetWorkingDirectory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetApplicationDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"GetApplicationDirectory");
    }
    /**
     * {@snippet :
     * char* GetApplicationDirectory();
     * }
     */
    public static MemorySegment GetApplicationDirectory() {
        var mh$ = GetApplicationDirectory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"ChangeDirectory");
    }
    /**
     * {@snippet :
     * _Bool ChangeDirectory(char* dir);
     * }
     */
    public static boolean ChangeDirectory(MemorySegment dir) {
        var mh$ = ChangeDirectory$MH();
        try {
            return (boolean)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsPathFile$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"IsPathFile");
    }
    /**
     * {@snippet :
     * _Bool IsPathFile(char* path);
     * }
     */
    public static boolean IsPathFile(MemorySegment path) {
        var mh$ = IsPathFile$MH();
        try {
            return (boolean)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadDirectoryFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"LoadDirectoryFiles");
    }
    /**
     * {@snippet :
     * FilePathList LoadDirectoryFiles(char* dirPath);
     * }
     */
    public static MemorySegment LoadDirectoryFiles(SegmentAllocator allocator, MemorySegment dirPath) {
        var mh$ = LoadDirectoryFiles$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, dirPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadDirectoryFilesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"LoadDirectoryFilesEx");
    }
    /**
     * {@snippet :
     * FilePathList LoadDirectoryFilesEx(char* basePath, char* filter, _Bool scanSubdirs);
     * }
     */
    public static MemorySegment LoadDirectoryFilesEx(SegmentAllocator allocator, MemorySegment basePath, MemorySegment filter, boolean scanSubdirs) {
        var mh$ = LoadDirectoryFilesEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, basePath, filter, scanSubdirs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadDirectoryFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$6,"UnloadDirectoryFiles");
    }
    /**
     * {@snippet :
     * void UnloadDirectoryFiles(FilePathList files);
     * }
     */
    public static void UnloadDirectoryFiles(MemorySegment files) {
        var mh$ = UnloadDirectoryFiles$MH();
        try {
            mh$.invokeExact(files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsFileDropped$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"IsFileDropped");
    }
    /**
     * {@snippet :
     * _Bool IsFileDropped();
     * }
     */
    public static boolean IsFileDropped() {
        var mh$ = IsFileDropped$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadDroppedFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"LoadDroppedFiles");
    }
    /**
     * {@snippet :
     * FilePathList LoadDroppedFiles();
     * }
     */
    public static MemorySegment LoadDroppedFiles(SegmentAllocator allocator) {
        var mh$ = LoadDroppedFiles$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadDroppedFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"UnloadDroppedFiles");
    }
    /**
     * {@snippet :
     * void UnloadDroppedFiles(FilePathList files);
     * }
     */
    public static void UnloadDroppedFiles(MemorySegment files) {
        var mh$ = UnloadDroppedFiles$MH();
        try {
            mh$.invokeExact(files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileModTime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"GetFileModTime");
    }
    /**
     * {@snippet :
     * long GetFileModTime(char* fileName);
     * }
     */
    public static long GetFileModTime(MemorySegment fileName) {
        var mh$ = GetFileModTime$MH();
        try {
            return (long)mh$.invokeExact(fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompressData$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"CompressData");
    }
    /**
     * {@snippet :
     * unsigned char* CompressData(unsigned char* data, int dataSize, int* compDataSize);
     * }
     */
    public static MemorySegment CompressData(MemorySegment data, int dataSize, MemorySegment compDataSize) {
        var mh$ = CompressData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, dataSize, compDataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecompressData$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"DecompressData");
    }
    /**
     * {@snippet :
     * unsigned char* DecompressData(unsigned char* compData, int compDataSize, int* dataSize);
     * }
     */
    public static MemorySegment DecompressData(MemorySegment compData, int compDataSize, MemorySegment dataSize) {
        var mh$ = DecompressData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compData, compDataSize, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodeDataBase64$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"EncodeDataBase64");
    }
    /**
     * {@snippet :
     * char* EncodeDataBase64(unsigned char* data, int dataSize, int* outputSize);
     * }
     */
    public static MemorySegment EncodeDataBase64(MemorySegment data, int dataSize, MemorySegment outputSize) {
        var mh$ = EncodeDataBase64$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, dataSize, outputSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodeDataBase64$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"DecodeDataBase64");
    }
    /**
     * {@snippet :
     * unsigned char* DecodeDataBase64(unsigned char* data, int* outputSize);
     * }
     */
    public static MemorySegment DecodeDataBase64(MemorySegment data, MemorySegment outputSize) {
        var mh$ = DecodeDataBase64$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, outputSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAutomationEventList$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$6,"LoadAutomationEventList");
    }
    /**
     * {@snippet :
     * AutomationEventList LoadAutomationEventList(char* fileName);
     * }
     */
    public static MemorySegment LoadAutomationEventList(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadAutomationEventList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadAutomationEventList$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"UnloadAutomationEventList");
    }
    /**
     * {@snippet :
     * void UnloadAutomationEventList(AutomationEventList* list);
     * }
     */
    public static void UnloadAutomationEventList(MemorySegment list) {
        var mh$ = UnloadAutomationEventList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportAutomationEventList$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"ExportAutomationEventList");
    }
    /**
     * {@snippet :
     * _Bool ExportAutomationEventList(AutomationEventList list, char* fileName);
     * }
     */
    public static boolean ExportAutomationEventList(MemorySegment list, MemorySegment fileName) {
        var mh$ = ExportAutomationEventList$MH();
        try {
            return (boolean)mh$.invokeExact(list, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAutomationEventList$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"SetAutomationEventList");
    }
    /**
     * {@snippet :
     * void SetAutomationEventList(AutomationEventList* list);
     * }
     */
    public static void SetAutomationEventList(MemorySegment list) {
        var mh$ = SetAutomationEventList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAutomationEventBaseFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"SetAutomationEventBaseFrame");
    }
    /**
     * {@snippet :
     * void SetAutomationEventBaseFrame(int frame);
     * }
     */
    public static void SetAutomationEventBaseFrame(int frame) {
        var mh$ = SetAutomationEventBaseFrame$MH();
        try {
            mh$.invokeExact(frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartAutomationEventRecording$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"StartAutomationEventRecording");
    }
    /**
     * {@snippet :
     * void StartAutomationEventRecording();
     * }
     */
    public static void StartAutomationEventRecording() {
        var mh$ = StartAutomationEventRecording$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StopAutomationEventRecording$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"StopAutomationEventRecording");
    }
    /**
     * {@snippet :
     * void StopAutomationEventRecording();
     * }
     */
    public static void StopAutomationEventRecording() {
        var mh$ = StopAutomationEventRecording$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayAutomationEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"PlayAutomationEvent");
    }
    /**
     * {@snippet :
     * void PlayAutomationEvent(AutomationEvent event);
     * }
     */
    public static void PlayAutomationEvent(MemorySegment event) {
        var mh$ = PlayAutomationEvent$MH();
        try {
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsKeyPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"IsKeyPressed");
    }
    /**
     * {@snippet :
     * _Bool IsKeyPressed(int key);
     * }
     */
    public static boolean IsKeyPressed(int key) {
        var mh$ = IsKeyPressed$MH();
        try {
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsKeyPressedRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"IsKeyPressedRepeat");
    }
    /**
     * {@snippet :
     * _Bool IsKeyPressedRepeat(int key);
     * }
     */
    public static boolean IsKeyPressedRepeat(int key) {
        var mh$ = IsKeyPressedRepeat$MH();
        try {
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsKeyDown$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"IsKeyDown");
    }
    /**
     * {@snippet :
     * _Bool IsKeyDown(int key);
     * }
     */
    public static boolean IsKeyDown(int key) {
        var mh$ = IsKeyDown$MH();
        try {
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsKeyReleased$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"IsKeyReleased");
    }
    /**
     * {@snippet :
     * _Bool IsKeyReleased(int key);
     * }
     */
    public static boolean IsKeyReleased(int key) {
        var mh$ = IsKeyReleased$MH();
        try {
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsKeyUp$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"IsKeyUp");
    }
    /**
     * {@snippet :
     * _Bool IsKeyUp(int key);
     * }
     */
    public static boolean IsKeyUp(int key) {
        var mh$ = IsKeyUp$MH();
        try {
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"GetKeyPressed");
    }
    /**
     * {@snippet :
     * int GetKeyPressed();
     * }
     */
    public static int GetKeyPressed() {
        var mh$ = GetKeyPressed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"GetCharPressed");
    }
    /**
     * {@snippet :
     * int GetCharPressed();
     * }
     */
    public static int GetCharPressed() {
        var mh$ = GetCharPressed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetExitKey$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"SetExitKey");
    }
    /**
     * {@snippet :
     * void SetExitKey(int key);
     * }
     */
    public static void SetExitKey(int key) {
        var mh$ = SetExitKey$MH();
        try {
            mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGamepadAvailable$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"IsGamepadAvailable");
    }
    /**
     * {@snippet :
     * _Bool IsGamepadAvailable(int gamepad);
     * }
     */
    public static boolean IsGamepadAvailable(int gamepad) {
        var mh$ = IsGamepadAvailable$MH();
        try {
            return (boolean)mh$.invokeExact(gamepad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGamepadName$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"GetGamepadName");
    }
    /**
     * {@snippet :
     * char* GetGamepadName(int gamepad);
     * }
     */
    public static MemorySegment GetGamepadName(int gamepad) {
        var mh$ = GetGamepadName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamepad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGamepadButtonPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"IsGamepadButtonPressed");
    }
    /**
     * {@snippet :
     * _Bool IsGamepadButtonPressed(int gamepad, int button);
     * }
     */
    public static boolean IsGamepadButtonPressed(int gamepad, int button) {
        var mh$ = IsGamepadButtonPressed$MH();
        try {
            return (boolean)mh$.invokeExact(gamepad, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGamepadButtonDown$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"IsGamepadButtonDown");
    }
    /**
     * {@snippet :
     * _Bool IsGamepadButtonDown(int gamepad, int button);
     * }
     */
    public static boolean IsGamepadButtonDown(int gamepad, int button) {
        var mh$ = IsGamepadButtonDown$MH();
        try {
            return (boolean)mh$.invokeExact(gamepad, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGamepadButtonReleased$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"IsGamepadButtonReleased");
    }
    /**
     * {@snippet :
     * _Bool IsGamepadButtonReleased(int gamepad, int button);
     * }
     */
    public static boolean IsGamepadButtonReleased(int gamepad, int button) {
        var mh$ = IsGamepadButtonReleased$MH();
        try {
            return (boolean)mh$.invokeExact(gamepad, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGamepadButtonUp$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"IsGamepadButtonUp");
    }
    /**
     * {@snippet :
     * _Bool IsGamepadButtonUp(int gamepad, int button);
     * }
     */
    public static boolean IsGamepadButtonUp(int gamepad, int button) {
        var mh$ = IsGamepadButtonUp$MH();
        try {
            return (boolean)mh$.invokeExact(gamepad, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGamepadButtonPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"GetGamepadButtonPressed");
    }
    /**
     * {@snippet :
     * int GetGamepadButtonPressed();
     * }
     */
    public static int GetGamepadButtonPressed() {
        var mh$ = GetGamepadButtonPressed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGamepadAxisCount$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"GetGamepadAxisCount");
    }
    /**
     * {@snippet :
     * int GetGamepadAxisCount(int gamepad);
     * }
     */
    public static int GetGamepadAxisCount(int gamepad) {
        var mh$ = GetGamepadAxisCount$MH();
        try {
            return (int)mh$.invokeExact(gamepad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGamepadAxisMovement$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"GetGamepadAxisMovement");
    }
    /**
     * {@snippet :
     * float GetGamepadAxisMovement(int gamepad, int axis);
     * }
     */
    public static float GetGamepadAxisMovement(int gamepad, int axis) {
        var mh$ = GetGamepadAxisMovement$MH();
        try {
            return (float)mh$.invokeExact(gamepad, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGamepadMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"SetGamepadMappings");
    }
    /**
     * {@snippet :
     * int SetGamepadMappings(char* mappings);
     * }
     */
    public static int SetGamepadMappings(MemorySegment mappings) {
        var mh$ = SetGamepadMappings$MH();
        try {
            return (int)mh$.invokeExact(mappings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseButtonPressed$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"IsMouseButtonPressed");
    }
    /**
     * {@snippet :
     * _Bool IsMouseButtonPressed(int button);
     * }
     */
    public static boolean IsMouseButtonPressed(int button) {
        var mh$ = IsMouseButtonPressed$MH();
        try {
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseButtonDown$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"IsMouseButtonDown");
    }
    /**
     * {@snippet :
     * _Bool IsMouseButtonDown(int button);
     * }
     */
    public static boolean IsMouseButtonDown(int button) {
        var mh$ = IsMouseButtonDown$MH();
        try {
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseButtonReleased$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"IsMouseButtonReleased");
    }
    /**
     * {@snippet :
     * _Bool IsMouseButtonReleased(int button);
     * }
     */
    public static boolean IsMouseButtonReleased(int button) {
        var mh$ = IsMouseButtonReleased$MH();
        try {
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseButtonUp$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"IsMouseButtonUp");
    }
    /**
     * {@snippet :
     * _Bool IsMouseButtonUp(int button);
     * }
     */
    public static boolean IsMouseButtonUp(int button) {
        var mh$ = IsMouseButtonUp$MH();
        try {
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseX$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"GetMouseX");
    }
    /**
     * {@snippet :
     * int GetMouseX();
     * }
     */
    public static int GetMouseX() {
        var mh$ = GetMouseX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseY$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"GetMouseY");
    }
    /**
     * {@snippet :
     * int GetMouseY();
     * }
     */
    public static int GetMouseY() {
        var mh$ = GetMouseY$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMousePosition$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"GetMousePosition");
    }
    /**
     * {@snippet :
     * Vector2 GetMousePosition();
     * }
     */
    public static MemorySegment GetMousePosition(SegmentAllocator allocator) {
        var mh$ = GetMousePosition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseDelta$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"GetMouseDelta");
    }
    /**
     * {@snippet :
     * Vector2 GetMouseDelta();
     * }
     */
    public static MemorySegment GetMouseDelta(SegmentAllocator allocator) {
        var mh$ = GetMouseDelta$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMousePosition$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"SetMousePosition");
    }
    /**
     * {@snippet :
     * void SetMousePosition(int x, int y);
     * }
     */
    public static void SetMousePosition(int x, int y) {
        var mh$ = SetMousePosition$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMouseOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"SetMouseOffset");
    }
    /**
     * {@snippet :
     * void SetMouseOffset(int offsetX, int offsetY);
     * }
     */
    public static void SetMouseOffset(int offsetX, int offsetY) {
        var mh$ = SetMouseOffset$MH();
        try {
            mh$.invokeExact(offsetX, offsetY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMouseScale$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"SetMouseScale");
    }
    /**
     * {@snippet :
     * void SetMouseScale(float scaleX, float scaleY);
     * }
     */
    public static void SetMouseScale(float scaleX, float scaleY) {
        var mh$ = SetMouseScale$MH();
        try {
            mh$.invokeExact(scaleX, scaleY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseWheelMove$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"GetMouseWheelMove");
    }
    /**
     * {@snippet :
     * float GetMouseWheelMove();
     * }
     */
    public static float GetMouseWheelMove() {
        var mh$ = GetMouseWheelMove$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMouseWheelMoveV$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"GetMouseWheelMoveV");
    }
    /**
     * {@snippet :
     * Vector2 GetMouseWheelMoveV();
     * }
     */
    public static MemorySegment GetMouseWheelMoveV(SegmentAllocator allocator) {
        var mh$ = GetMouseWheelMoveV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMouseCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"SetMouseCursor");
    }
    /**
     * {@snippet :
     * void SetMouseCursor(int cursor);
     * }
     */
    public static void SetMouseCursor(int cursor) {
        var mh$ = SetMouseCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTouchX$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"GetTouchX");
    }
    /**
     * {@snippet :
     * int GetTouchX();
     * }
     */
    public static int GetTouchX() {
        var mh$ = GetTouchX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTouchY$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"GetTouchY");
    }
    /**
     * {@snippet :
     * int GetTouchY();
     * }
     */
    public static int GetTouchY() {
        var mh$ = GetTouchY$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTouchPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"GetTouchPosition");
    }
    /**
     * {@snippet :
     * Vector2 GetTouchPosition(int index);
     * }
     */
    public static MemorySegment GetTouchPosition(SegmentAllocator allocator, int index) {
        var mh$ = GetTouchPosition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTouchPointId$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"GetTouchPointId");
    }
    /**
     * {@snippet :
     * int GetTouchPointId(int index);
     * }
     */
    public static int GetTouchPointId(int index) {
        var mh$ = GetTouchPointId$MH();
        try {
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTouchPointCount$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"GetTouchPointCount");
    }
    /**
     * {@snippet :
     * int GetTouchPointCount();
     * }
     */
    public static int GetTouchPointCount() {
        var mh$ = GetTouchPointCount$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGesturesEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"SetGesturesEnabled");
    }
    /**
     * {@snippet :
     * void SetGesturesEnabled(unsigned int flags);
     * }
     */
    public static void SetGesturesEnabled(int flags) {
        var mh$ = SetGesturesEnabled$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGestureDetected$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"IsGestureDetected");
    }
    /**
     * {@snippet :
     * _Bool IsGestureDetected(unsigned int gesture);
     * }
     */
    public static boolean IsGestureDetected(int gesture) {
        var mh$ = IsGestureDetected$MH();
        try {
            return (boolean)mh$.invokeExact(gesture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureDetected$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"GetGestureDetected");
    }
    /**
     * {@snippet :
     * int GetGestureDetected();
     * }
     */
    public static int GetGestureDetected() {
        var mh$ = GetGestureDetected$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureHoldDuration$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"GetGestureHoldDuration");
    }
    /**
     * {@snippet :
     * float GetGestureHoldDuration();
     * }
     */
    public static float GetGestureHoldDuration() {
        var mh$ = GetGestureHoldDuration$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureDragVector$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"GetGestureDragVector");
    }
    /**
     * {@snippet :
     * Vector2 GetGestureDragVector();
     * }
     */
    public static MemorySegment GetGestureDragVector(SegmentAllocator allocator) {
        var mh$ = GetGestureDragVector$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureDragAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"GetGestureDragAngle");
    }
    /**
     * {@snippet :
     * float GetGestureDragAngle();
     * }
     */
    public static float GetGestureDragAngle() {
        var mh$ = GetGestureDragAngle$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGesturePinchVector$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"GetGesturePinchVector");
    }
    /**
     * {@snippet :
     * Vector2 GetGesturePinchVector();
     * }
     */
    public static MemorySegment GetGesturePinchVector(SegmentAllocator allocator) {
        var mh$ = GetGesturePinchVector$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGesturePinchAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"GetGesturePinchAngle");
    }
    /**
     * {@snippet :
     * float GetGesturePinchAngle();
     * }
     */
    public static float GetGesturePinchAngle() {
        var mh$ = GetGesturePinchAngle$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateCamera$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"UpdateCamera");
    }
    /**
     * {@snippet :
     * void UpdateCamera(Camera* camera, int mode);
     * }
     */
    public static void UpdateCamera(MemorySegment camera, int mode) {
        var mh$ = UpdateCamera$MH();
        try {
            mh$.invokeExact(camera, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateCameraPro$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"UpdateCameraPro");
    }
    /**
     * {@snippet :
     * void UpdateCameraPro(Camera* camera, Vector3 movement, Vector3 rotation, float zoom);
     * }
     */
    public static void UpdateCameraPro(MemorySegment camera, MemorySegment movement, MemorySegment rotation, float zoom) {
        var mh$ = UpdateCameraPro$MH();
        try {
            mh$.invokeExact(camera, movement, rotation, zoom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetShapesTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"SetShapesTexture");
    }
    /**
     * {@snippet :
     * void SetShapesTexture(Texture2D texture, Rectangle source);
     * }
     */
    public static void SetShapesTexture(MemorySegment texture, MemorySegment source) {
        var mh$ = SetShapesTexture$MH();
        try {
            mh$.invokeExact(texture, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"DrawPixel");
    }
    /**
     * {@snippet :
     * void DrawPixel(int posX, int posY, Color color);
     * }
     */
    public static void DrawPixel(int posX, int posY, MemorySegment color) {
        var mh$ = DrawPixel$MH();
        try {
            mh$.invokeExact(posX, posY, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"DrawPixelV");
    }
    /**
     * {@snippet :
     * void DrawPixelV(Vector2 position, Color color);
     * }
     */
    public static void DrawPixelV(MemorySegment position, MemorySegment color) {
        var mh$ = DrawPixelV$MH();
        try {
            mh$.invokeExact(position, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"DrawLine");
    }
    /**
     * {@snippet :
     * void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);
     * }
     */
    public static void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, MemorySegment color) {
        var mh$ = DrawLine$MH();
        try {
            mh$.invokeExact(startPosX, startPosY, endPosX, endPosY, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLineV$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"DrawLineV");
    }
    /**
     * {@snippet :
     * void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);
     * }
     */
    public static void DrawLineV(MemorySegment startPos, MemorySegment endPos, MemorySegment color) {
        var mh$ = DrawLineV$MH();
        try {
            mh$.invokeExact(startPos, endPos, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLineEx$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"DrawLineEx");
    }
    /**
     * {@snippet :
     * void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);
     * }
     */
    public static void DrawLineEx(MemorySegment startPos, MemorySegment endPos, float thick, MemorySegment color) {
        var mh$ = DrawLineEx$MH();
        try {
            mh$.invokeExact(startPos, endPos, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLineStrip$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"DrawLineStrip");
    }
    /**
     * {@snippet :
     * void DrawLineStrip(Vector2* points, int pointCount, Color color);
     * }
     */
    public static void DrawLineStrip(MemorySegment points, int pointCount, MemorySegment color) {
        var mh$ = DrawLineStrip$MH();
        try {
            mh$.invokeExact(points, pointCount, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLineBezier$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"DrawLineBezier");
    }
    /**
     * {@snippet :
     * void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);
     * }
     */
    public static void DrawLineBezier(MemorySegment startPos, MemorySegment endPos, float thick, MemorySegment color) {
        var mh$ = DrawLineBezier$MH();
        try {
            mh$.invokeExact(startPos, endPos, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircle$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"DrawCircle");
    }
    /**
     * {@snippet :
     * void DrawCircle(int centerX, int centerY, float radius, Color color);
     * }
     */
    public static void DrawCircle(int centerX, int centerY, float radius, MemorySegment color) {
        var mh$ = DrawCircle$MH();
        try {
            mh$.invokeExact(centerX, centerY, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleSector$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$6,"DrawCircleSector");
    }
    /**
     * {@snippet :
     * void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
     * }
     */
    public static void DrawCircleSector(MemorySegment center, float radius, float startAngle, float endAngle, int segments, MemorySegment color) {
        var mh$ = DrawCircleSector$MH();
        try {
            mh$.invokeExact(center, radius, startAngle, endAngle, segments, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleSectorLines$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"DrawCircleSectorLines");
    }
    /**
     * {@snippet :
     * void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
     * }
     */
    public static void DrawCircleSectorLines(MemorySegment center, float radius, float startAngle, float endAngle, int segments, MemorySegment color) {
        var mh$ = DrawCircleSectorLines$MH();
        try {
            mh$.invokeExact(center, radius, startAngle, endAngle, segments, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleGradient$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"DrawCircleGradient");
    }
    /**
     * {@snippet :
     * void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);
     * }
     */
    public static void DrawCircleGradient(int centerX, int centerY, float radius, MemorySegment color1, MemorySegment color2) {
        var mh$ = DrawCircleGradient$MH();
        try {
            mh$.invokeExact(centerX, centerY, radius, color1, color2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleV$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"DrawCircleV");
    }
    /**
     * {@snippet :
     * void DrawCircleV(Vector2 center, float radius, Color color);
     * }
     */
    public static void DrawCircleV(MemorySegment center, float radius, MemorySegment color) {
        var mh$ = DrawCircleV$MH();
        try {
            mh$.invokeExact(center, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleLines$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"DrawCircleLines");
    }
    /**
     * {@snippet :
     * void DrawCircleLines(int centerX, int centerY, float radius, Color color);
     * }
     */
    public static void DrawCircleLines(int centerX, int centerY, float radius, MemorySegment color) {
        var mh$ = DrawCircleLines$MH();
        try {
            mh$.invokeExact(centerX, centerY, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircleLinesV$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"DrawCircleLinesV");
    }
    /**
     * {@snippet :
     * void DrawCircleLinesV(Vector2 center, float radius, Color color);
     * }
     */
    public static void DrawCircleLinesV(MemorySegment center, float radius, MemorySegment color) {
        var mh$ = DrawCircleLinesV$MH();
        try {
            mh$.invokeExact(center, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEllipse$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"DrawEllipse");
    }
    /**
     * {@snippet :
     * void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);
     * }
     */
    public static void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, MemorySegment color) {
        var mh$ = DrawEllipse$MH();
        try {
            mh$.invokeExact(centerX, centerY, radiusH, radiusV, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEllipseLines$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"DrawEllipseLines");
    }
    /**
     * {@snippet :
     * void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);
     * }
     */
    public static void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, MemorySegment color) {
        var mh$ = DrawEllipseLines$MH();
        try {
            mh$.invokeExact(centerX, centerY, radiusH, radiusV, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRing$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"DrawRing");
    }
    /**
     * {@snippet :
     * void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
     * }
     */
    public static void DrawRing(MemorySegment center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, MemorySegment color) {
        var mh$ = DrawRing$MH();
        try {
            mh$.invokeExact(center, innerRadius, outerRadius, startAngle, endAngle, segments, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRingLines$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"DrawRingLines");
    }
    /**
     * {@snippet :
     * void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
     * }
     */
    public static void DrawRingLines(MemorySegment center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, MemorySegment color) {
        var mh$ = DrawRingLines$MH();
        try {
            mh$.invokeExact(center, innerRadius, outerRadius, startAngle, endAngle, segments, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"DrawRectangle");
    }
    /**
     * {@snippet :
     * void DrawRectangle(int posX, int posY, int width, int height, Color color);
     * }
     */
    public static void DrawRectangle(int posX, int posY, int width, int height, MemorySegment color) {
        var mh$ = DrawRectangle$MH();
        try {
            mh$.invokeExact(posX, posY, width, height, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleV$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"DrawRectangleV");
    }
    /**
     * {@snippet :
     * void DrawRectangleV(Vector2 position, Vector2 size, Color color);
     * }
     */
    public static void DrawRectangleV(MemorySegment position, MemorySegment size, MemorySegment color) {
        var mh$ = DrawRectangleV$MH();
        try {
            mh$.invokeExact(position, size, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleRec$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"DrawRectangleRec");
    }
    /**
     * {@snippet :
     * void DrawRectangleRec(Rectangle rec, Color color);
     * }
     */
    public static void DrawRectangleRec(MemorySegment rec, MemorySegment color) {
        var mh$ = DrawRectangleRec$MH();
        try {
            mh$.invokeExact(rec, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectanglePro$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$6,"DrawRectanglePro");
    }
    /**
     * {@snippet :
     * void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);
     * }
     */
    public static void DrawRectanglePro(MemorySegment rec, MemorySegment origin, float rotation, MemorySegment color) {
        var mh$ = DrawRectanglePro$MH();
        try {
            mh$.invokeExact(rec, origin, rotation, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleGradientV$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"DrawRectangleGradientV");
    }
    /**
     * {@snippet :
     * void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);
     * }
     */
    public static void DrawRectangleGradientV(int posX, int posY, int width, int height, MemorySegment color1, MemorySegment color2) {
        var mh$ = DrawRectangleGradientV$MH();
        try {
            mh$.invokeExact(posX, posY, width, height, color1, color2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleGradientH$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"DrawRectangleGradientH");
    }
    /**
     * {@snippet :
     * void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);
     * }
     */
    public static void DrawRectangleGradientH(int posX, int posY, int width, int height, MemorySegment color1, MemorySegment color2) {
        var mh$ = DrawRectangleGradientH$MH();
        try {
            mh$.invokeExact(posX, posY, width, height, color1, color2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleGradientEx$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"DrawRectangleGradientEx");
    }
    /**
     * {@snippet :
     * void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);
     * }
     */
    public static void DrawRectangleGradientEx(MemorySegment rec, MemorySegment col1, MemorySegment col2, MemorySegment col3, MemorySegment col4) {
        var mh$ = DrawRectangleGradientEx$MH();
        try {
            mh$.invokeExact(rec, col1, col2, col3, col4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleLines$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"DrawRectangleLines");
    }
    /**
     * {@snippet :
     * void DrawRectangleLines(int posX, int posY, int width, int height, Color color);
     * }
     */
    public static void DrawRectangleLines(int posX, int posY, int width, int height, MemorySegment color) {
        var mh$ = DrawRectangleLines$MH();
        try {
            mh$.invokeExact(posX, posY, width, height, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleLinesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"DrawRectangleLinesEx");
    }
    /**
     * {@snippet :
     * void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);
     * }
     */
    public static void DrawRectangleLinesEx(MemorySegment rec, float lineThick, MemorySegment color) {
        var mh$ = DrawRectangleLinesEx$MH();
        try {
            mh$.invokeExact(rec, lineThick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleRounded$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"DrawRectangleRounded");
    }
    /**
     * {@snippet :
     * void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);
     * }
     */
    public static void DrawRectangleRounded(MemorySegment rec, float roundness, int segments, MemorySegment color) {
        var mh$ = DrawRectangleRounded$MH();
        try {
            mh$.invokeExact(rec, roundness, segments, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRectangleRoundedLines$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"DrawRectangleRoundedLines");
    }
    /**
     * {@snippet :
     * void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, float lineThick, Color color);
     * }
     */
    public static void DrawRectangleRoundedLines(MemorySegment rec, float roundness, int segments, float lineThick, MemorySegment color) {
        var mh$ = DrawRectangleRoundedLines$MH();
        try {
            mh$.invokeExact(rec, roundness, segments, lineThick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangle$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"DrawTriangle");
    }
    /**
     * {@snippet :
     * void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
     * }
     */
    public static void DrawTriangle(MemorySegment v1, MemorySegment v2, MemorySegment v3, MemorySegment color) {
        var mh$ = DrawTriangle$MH();
        try {
            mh$.invokeExact(v1, v2, v3, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangleLines$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"DrawTriangleLines");
    }
    /**
     * {@snippet :
     * void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
     * }
     */
    public static void DrawTriangleLines(MemorySegment v1, MemorySegment v2, MemorySegment v3, MemorySegment color) {
        var mh$ = DrawTriangleLines$MH();
        try {
            mh$.invokeExact(v1, v2, v3, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangleFan$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"DrawTriangleFan");
    }
    /**
     * {@snippet :
     * void DrawTriangleFan(Vector2* points, int pointCount, Color color);
     * }
     */
    public static void DrawTriangleFan(MemorySegment points, int pointCount, MemorySegment color) {
        var mh$ = DrawTriangleFan$MH();
        try {
            mh$.invokeExact(points, pointCount, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangleStrip$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"DrawTriangleStrip");
    }
    /**
     * {@snippet :
     * void DrawTriangleStrip(Vector2* points, int pointCount, Color color);
     * }
     */
    public static void DrawTriangleStrip(MemorySegment points, int pointCount, MemorySegment color) {
        var mh$ = DrawTriangleStrip$MH();
        try {
            mh$.invokeExact(points, pointCount, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPoly$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$6,"DrawPoly");
    }
    /**
     * {@snippet :
     * void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);
     * }
     */
    public static void DrawPoly(MemorySegment center, int sides, float radius, float rotation, MemorySegment color) {
        var mh$ = DrawPoly$MH();
        try {
            mh$.invokeExact(center, sides, radius, rotation, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPolyLines$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"DrawPolyLines");
    }
    /**
     * {@snippet :
     * void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);
     * }
     */
    public static void DrawPolyLines(MemorySegment center, int sides, float radius, float rotation, MemorySegment color) {
        var mh$ = DrawPolyLines$MH();
        try {
            mh$.invokeExact(center, sides, radius, rotation, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPolyLinesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"DrawPolyLinesEx");
    }
    /**
     * {@snippet :
     * void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color);
     * }
     */
    public static void DrawPolyLinesEx(MemorySegment center, int sides, float radius, float rotation, float lineThick, MemorySegment color) {
        var mh$ = DrawPolyLinesEx$MH();
        try {
            mh$.invokeExact(center, sides, radius, rotation, lineThick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$4,"DrawSplineLinear");
    }
    /**
     * {@snippet :
     * void DrawSplineLinear(Vector2* points, int pointCount, float thick, Color color);
     * }
     */
    public static void DrawSplineLinear(MemorySegment points, int pointCount, float thick, MemorySegment color) {
        var mh$ = DrawSplineLinear$MH();
        try {
            mh$.invokeExact(points, pointCount, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineBasis$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"DrawSplineBasis");
    }
    /**
     * {@snippet :
     * void DrawSplineBasis(Vector2* points, int pointCount, float thick, Color color);
     * }
     */
    public static void DrawSplineBasis(MemorySegment points, int pointCount, float thick, MemorySegment color) {
        var mh$ = DrawSplineBasis$MH();
        try {
            mh$.invokeExact(points, pointCount, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineCatmullRom$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$0,"DrawSplineCatmullRom");
    }
    /**
     * {@snippet :
     * void DrawSplineCatmullRom(Vector2* points, int pointCount, float thick, Color color);
     * }
     */
    public static void DrawSplineCatmullRom(MemorySegment points, int pointCount, float thick, MemorySegment color) {
        var mh$ = DrawSplineCatmullRom$MH();
        try {
            mh$.invokeExact(points, pointCount, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineBezierQuadratic$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$1,"DrawSplineBezierQuadratic");
    }
    /**
     * {@snippet :
     * void DrawSplineBezierQuadratic(Vector2* points, int pointCount, float thick, Color color);
     * }
     */
    public static void DrawSplineBezierQuadratic(MemorySegment points, int pointCount, float thick, MemorySegment color) {
        var mh$ = DrawSplineBezierQuadratic$MH();
        try {
            mh$.invokeExact(points, pointCount, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineBezierCubic$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$2,"DrawSplineBezierCubic");
    }
    /**
     * {@snippet :
     * void DrawSplineBezierCubic(Vector2* points, int pointCount, float thick, Color color);
     * }
     */
    public static void DrawSplineBezierCubic(MemorySegment points, int pointCount, float thick, MemorySegment color) {
        var mh$ = DrawSplineBezierCubic$MH();
        try {
            mh$.invokeExact(points, pointCount, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineSegmentLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$3,"DrawSplineSegmentLinear");
    }
    /**
     * {@snippet :
     * void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color);
     * }
     */
    public static void DrawSplineSegmentLinear(MemorySegment p1, MemorySegment p2, float thick, MemorySegment color) {
        var mh$ = DrawSplineSegmentLinear$MH();
        try {
            mh$.invokeExact(p1, p2, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineSegmentBasis$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"DrawSplineSegmentBasis");
    }
    /**
     * {@snippet :
     * void DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color);
     * }
     */
    public static void DrawSplineSegmentBasis(MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, float thick, MemorySegment color) {
        var mh$ = DrawSplineSegmentBasis$MH();
        try {
            mh$.invokeExact(p1, p2, p3, p4, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineSegmentCatmullRom$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$0,"DrawSplineSegmentCatmullRom");
    }
    /**
     * {@snippet :
     * void DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color);
     * }
     */
    public static void DrawSplineSegmentCatmullRom(MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, float thick, MemorySegment color) {
        var mh$ = DrawSplineSegmentCatmullRom$MH();
        try {
            mh$.invokeExact(p1, p2, p3, p4, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineSegmentBezierQuadratic$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"DrawSplineSegmentBezierQuadratic");
    }
    /**
     * {@snippet :
     * void DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color);
     * }
     */
    public static void DrawSplineSegmentBezierQuadratic(MemorySegment p1, MemorySegment c2, MemorySegment p3, float thick, MemorySegment color) {
        var mh$ = DrawSplineSegmentBezierQuadratic$MH();
        try {
            mh$.invokeExact(p1, c2, p3, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSplineSegmentBezierCubic$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"DrawSplineSegmentBezierCubic");
    }
    /**
     * {@snippet :
     * void DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color);
     * }
     */
    public static void DrawSplineSegmentBezierCubic(MemorySegment p1, MemorySegment c2, MemorySegment c3, MemorySegment p4, float thick, MemorySegment color) {
        var mh$ = DrawSplineSegmentBezierCubic$MH();
        try {
            mh$.invokeExact(p1, c2, c3, p4, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSplinePointLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"GetSplinePointLinear");
    }
    /**
     * {@snippet :
     * Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t);
     * }
     */
    public static MemorySegment GetSplinePointLinear(SegmentAllocator allocator, MemorySegment startPos, MemorySegment endPos, float t) {
        var mh$ = GetSplinePointLinear$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, startPos, endPos, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSplinePointBasis$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$1,"GetSplinePointBasis");
    }
    /**
     * {@snippet :
     * Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);
     * }
     */
    public static MemorySegment GetSplinePointBasis(SegmentAllocator allocator, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, float t) {
        var mh$ = GetSplinePointBasis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, p1, p2, p3, p4, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSplinePointCatmullRom$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$2,"GetSplinePointCatmullRom");
    }
    /**
     * {@snippet :
     * Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);
     * }
     */
    public static MemorySegment GetSplinePointCatmullRom(SegmentAllocator allocator, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, float t) {
        var mh$ = GetSplinePointCatmullRom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, p1, p2, p3, p4, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSplinePointBezierQuad$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$4,"GetSplinePointBezierQuad");
    }
    /**
     * {@snippet :
     * Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t);
     * }
     */
    public static MemorySegment GetSplinePointBezierQuad(SegmentAllocator allocator, MemorySegment p1, MemorySegment c2, MemorySegment p3, float t) {
        var mh$ = GetSplinePointBezierQuad$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, p1, c2, p3, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSplinePointBezierCubic$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$5,"GetSplinePointBezierCubic");
    }
    /**
     * {@snippet :
     * Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t);
     * }
     */
    public static MemorySegment GetSplinePointBezierCubic(SegmentAllocator allocator, MemorySegment p1, MemorySegment c2, MemorySegment c3, MemorySegment p4, float t) {
        var mh$ = GetSplinePointBezierCubic$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, p1, c2, c3, p4, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionRecs$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$1,"CheckCollisionRecs");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);
     * }
     */
    public static boolean CheckCollisionRecs(MemorySegment rec1, MemorySegment rec2) {
        var mh$ = CheckCollisionRecs$MH();
        try {
            return (boolean)mh$.invokeExact(rec1, rec2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionCircles$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$3,"CheckCollisionCircles");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);
     * }
     */
    public static boolean CheckCollisionCircles(MemorySegment center1, float radius1, MemorySegment center2, float radius2) {
        var mh$ = CheckCollisionCircles$MH();
        try {
            return (boolean)mh$.invokeExact(center1, radius1, center2, radius2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionCircleRec$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$5,"CheckCollisionCircleRec");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);
     * }
     */
    public static boolean CheckCollisionCircleRec(MemorySegment center, float radius, MemorySegment rec) {
        var mh$ = CheckCollisionCircleRec$MH();
        try {
            return (boolean)mh$.invokeExact(center, radius, rec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionPointRec$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$1,"CheckCollisionPointRec");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionPointRec(Vector2 point, Rectangle rec);
     * }
     */
    public static boolean CheckCollisionPointRec(MemorySegment point, MemorySegment rec) {
        var mh$ = CheckCollisionPointRec$MH();
        try {
            return (boolean)mh$.invokeExact(point, rec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionPointCircle$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$3,"CheckCollisionPointCircle");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);
     * }
     */
    public static boolean CheckCollisionPointCircle(MemorySegment point, MemorySegment center, float radius) {
        var mh$ = CheckCollisionPointCircle$MH();
        try {
            return (boolean)mh$.invokeExact(point, center, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionPointTriangle$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$5,"CheckCollisionPointTriangle");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);
     * }
     */
    public static boolean CheckCollisionPointTriangle(MemorySegment point, MemorySegment p1, MemorySegment p2, MemorySegment p3) {
        var mh$ = CheckCollisionPointTriangle$MH();
        try {
            return (boolean)mh$.invokeExact(point, p1, p2, p3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionPointPoly$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"CheckCollisionPointPoly");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionPointPoly(Vector2 point, Vector2* points, int pointCount);
     * }
     */
    public static boolean CheckCollisionPointPoly(MemorySegment point, MemorySegment points, int pointCount) {
        var mh$ = CheckCollisionPointPoly$MH();
        try {
            return (boolean)mh$.invokeExact(point, points, pointCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionLines$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"CheckCollisionLines");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2* collisionPoint);
     * }
     */
    public static boolean CheckCollisionLines(MemorySegment startPos1, MemorySegment endPos1, MemorySegment startPos2, MemorySegment endPos2, MemorySegment collisionPoint) {
        var mh$ = CheckCollisionLines$MH();
        try {
            return (boolean)mh$.invokeExact(startPos1, endPos1, startPos2, endPos2, collisionPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionPointLine$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"CheckCollisionPointLine");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);
     * }
     */
    public static boolean CheckCollisionPointLine(MemorySegment point, MemorySegment p1, MemorySegment p2, int threshold) {
        var mh$ = CheckCollisionPointLine$MH();
        try {
            return (boolean)mh$.invokeExact(point, p1, p2, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCollisionRec$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"GetCollisionRec");
    }
    /**
     * {@snippet :
     * Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);
     * }
     */
    public static MemorySegment GetCollisionRec(SegmentAllocator allocator, MemorySegment rec1, MemorySegment rec2) {
        var mh$ = GetCollisionRec$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, rec1, rec2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImage$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"LoadImage");
    }
    /**
     * {@snippet :
     * Image LoadImage(char* fileName);
     * }
     */
    public static MemorySegment LoadImage(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$5,"LoadImageRaw");
    }
    /**
     * {@snippet :
     * Image LoadImageRaw(char* fileName, int width, int height, int format, int headerSize);
     * }
     */
    public static MemorySegment LoadImageRaw(SegmentAllocator allocator, MemorySegment fileName, int width, int height, int format, int headerSize) {
        var mh$ = LoadImageRaw$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName, width, height, format, headerSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageSvg$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$1,"LoadImageSvg");
    }
    /**
     * {@snippet :
     * Image LoadImageSvg(char* fileNameOrString, int width, int height);
     * }
     */
    public static MemorySegment LoadImageSvg(SegmentAllocator allocator, MemorySegment fileNameOrString, int width, int height) {
        var mh$ = LoadImageSvg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileNameOrString, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"LoadImageAnim");
    }
    /**
     * {@snippet :
     * Image LoadImageAnim(char* fileName, int* frames);
     * }
     */
    public static MemorySegment LoadImageAnim(SegmentAllocator allocator, MemorySegment fileName, MemorySegment frames) {
        var mh$ = LoadImageAnim$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName, frames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageFromMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$5,"LoadImageFromMemory");
    }
    /**
     * {@snippet :
     * Image LoadImageFromMemory(char* fileType, unsigned char* fileData, int dataSize);
     * }
     */
    public static MemorySegment LoadImageFromMemory(SegmentAllocator allocator, MemorySegment fileType, MemorySegment fileData, int dataSize) {
        var mh$ = LoadImageFromMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileType, fileData, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageFromTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"LoadImageFromTexture");
    }
    /**
     * {@snippet :
     * Image LoadImageFromTexture(Texture2D texture);
     * }
     */
    public static MemorySegment LoadImageFromTexture(SegmentAllocator allocator, MemorySegment texture) {
        var mh$ = LoadImageFromTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageFromScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$3,"LoadImageFromScreen");
    }
    /**
     * {@snippet :
     * Image LoadImageFromScreen();
     * }
     */
    public static MemorySegment LoadImageFromScreen(SegmentAllocator allocator) {
        var mh$ = LoadImageFromScreen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsImageReady$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$5,"IsImageReady");
    }
    /**
     * {@snippet :
     * _Bool IsImageReady(Image image);
     * }
     */
    public static boolean IsImageReady(MemorySegment image) {
        var mh$ = IsImageReady$MH();
        try {
            return (boolean)mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadImage$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$0,"UnloadImage");
    }
    /**
     * {@snippet :
     * void UnloadImage(Image image);
     * }
     */
    public static void UnloadImage(MemorySegment image) {
        var mh$ = UnloadImage$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportImage$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$2,"ExportImage");
    }
    /**
     * {@snippet :
     * _Bool ExportImage(Image image, char* fileName);
     * }
     */
    public static boolean ExportImage(MemorySegment image, MemorySegment fileName) {
        var mh$ = ExportImage$MH();
        try {
            return (boolean)mh$.invokeExact(image, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportImageToMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$4,"ExportImageToMemory");
    }
    /**
     * {@snippet :
     * unsigned char* ExportImageToMemory(Image image, char* fileType, int* fileSize);
     * }
     */
    public static MemorySegment ExportImageToMemory(MemorySegment image, MemorySegment fileType, MemorySegment fileSize) {
        var mh$ = ExportImageToMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(image, fileType, fileSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportImageAsCode$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"ExportImageAsCode");
    }
    /**
     * {@snippet :
     * _Bool ExportImageAsCode(Image image, char* fileName);
     * }
     */
    public static boolean ExportImageAsCode(MemorySegment image, MemorySegment fileName) {
        var mh$ = ExportImageAsCode$MH();
        try {
            return (boolean)mh$.invokeExact(image, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageColor$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$1,"GenImageColor");
    }
    /**
     * {@snippet :
     * Image GenImageColor(int width, int height, Color color);
     * }
     */
    public static MemorySegment GenImageColor(SegmentAllocator allocator, int width, int height, MemorySegment color) {
        var mh$ = GenImageColor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageGradientLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$3,"GenImageGradientLinear");
    }
    /**
     * {@snippet :
     * Image GenImageGradientLinear(int width, int height, int direction, Color start, Color end);
     * }
     */
    public static MemorySegment GenImageGradientLinear(SegmentAllocator allocator, int width, int height, int direction, MemorySegment start, MemorySegment end) {
        var mh$ = GenImageGradientLinear$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, direction, start, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageGradientRadial$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"GenImageGradientRadial");
    }
    /**
     * {@snippet :
     * Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);
     * }
     */
    public static MemorySegment GenImageGradientRadial(SegmentAllocator allocator, int width, int height, float density, MemorySegment inner, MemorySegment outer) {
        var mh$ = GenImageGradientRadial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, density, inner, outer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageGradientSquare$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"GenImageGradientSquare");
    }
    /**
     * {@snippet :
     * Image GenImageGradientSquare(int width, int height, float density, Color inner, Color outer);
     * }
     */
    public static MemorySegment GenImageGradientSquare(SegmentAllocator allocator, int width, int height, float density, MemorySegment inner, MemorySegment outer) {
        var mh$ = GenImageGradientSquare$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, density, inner, outer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"GenImageChecked");
    }
    /**
     * {@snippet :
     * Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);
     * }
     */
    public static MemorySegment GenImageChecked(SegmentAllocator allocator, int width, int height, int checksX, int checksY, MemorySegment col1, MemorySegment col2) {
        var mh$ = GenImageChecked$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, checksX, checksY, col1, col2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageWhiteNoise$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"GenImageWhiteNoise");
    }
    /**
     * {@snippet :
     * Image GenImageWhiteNoise(int width, int height, float factor);
     * }
     */
    public static MemorySegment GenImageWhiteNoise(SegmentAllocator allocator, int width, int height, float factor) {
        var mh$ = GenImageWhiteNoise$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImagePerlinNoise$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$6,"GenImagePerlinNoise");
    }
    /**
     * {@snippet :
     * Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);
     * }
     */
    public static MemorySegment GenImagePerlinNoise(SegmentAllocator allocator, int width, int height, int offsetX, int offsetY, float scale) {
        var mh$ = GenImagePerlinNoise$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, offsetX, offsetY, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageCellular$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"GenImageCellular");
    }
    /**
     * {@snippet :
     * Image GenImageCellular(int width, int height, int tileSize);
     * }
     */
    public static MemorySegment GenImageCellular(SegmentAllocator allocator, int width, int height, int tileSize) {
        var mh$ = GenImageCellular$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, tileSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageText$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$3,"GenImageText");
    }
    /**
     * {@snippet :
     * Image GenImageText(int width, int height, char* text);
     * }
     */
    public static MemorySegment GenImageText(SegmentAllocator allocator, int width, int height, MemorySegment text) {
        var mh$ = GenImageText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"ImageCopy");
    }
    /**
     * {@snippet :
     * Image ImageCopy(Image image);
     * }
     */
    public static MemorySegment ImageCopy(SegmentAllocator allocator, MemorySegment image) {
        var mh$ = ImageCopy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageFromImage$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$1,"ImageFromImage");
    }
    /**
     * {@snippet :
     * Image ImageFromImage(Image image, Rectangle rec);
     * }
     */
    public static MemorySegment ImageFromImage(SegmentAllocator allocator, MemorySegment image, MemorySegment rec) {
        var mh$ = ImageFromImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image, rec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageText$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$3,"ImageText");
    }
    /**
     * {@snippet :
     * Image ImageText(char* text, int fontSize, Color color);
     * }
     */
    public static MemorySegment ImageText(SegmentAllocator allocator, MemorySegment text, int fontSize, MemorySegment color) {
        var mh$ = ImageText$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, text, fontSize, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageTextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$5,"ImageTextEx");
    }
    /**
     * {@snippet :
     * Image ImageTextEx(Font font, char* text, float fontSize, float spacing, Color tint);
     * }
     */
    public static MemorySegment ImageTextEx(SegmentAllocator allocator, MemorySegment font, MemorySegment text, float fontSize, float spacing, MemorySegment tint) {
        var mh$ = ImageTextEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, font, text, fontSize, spacing, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$0,"ImageFormat");
    }
    /**
     * {@snippet :
     * void ImageFormat(Image* image, int newFormat);
     * }
     */
    public static void ImageFormat(MemorySegment image, int newFormat) {
        var mh$ = ImageFormat$MH();
        try {
            mh$.invokeExact(image, newFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageToPOT$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$2,"ImageToPOT");
    }
    /**
     * {@snippet :
     * void ImageToPOT(Image* image, Color fill);
     * }
     */
    public static void ImageToPOT(MemorySegment image, MemorySegment fill) {
        var mh$ = ImageToPOT$MH();
        try {
            mh$.invokeExact(image, fill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageCrop$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$4,"ImageCrop");
    }
    /**
     * {@snippet :
     * void ImageCrop(Image* image, Rectangle crop);
     * }
     */
    public static void ImageCrop(MemorySegment image, MemorySegment crop) {
        var mh$ = ImageCrop$MH();
        try {
            mh$.invokeExact(image, crop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageAlphaCrop$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$6,"ImageAlphaCrop");
    }
    /**
     * {@snippet :
     * void ImageAlphaCrop(Image* image, float threshold);
     * }
     */
    public static void ImageAlphaCrop(MemorySegment image, float threshold) {
        var mh$ = ImageAlphaCrop$MH();
        try {
            mh$.invokeExact(image, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageAlphaClear$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$1,"ImageAlphaClear");
    }
    /**
     * {@snippet :
     * void ImageAlphaClear(Image* image, Color color, float threshold);
     * }
     */
    public static void ImageAlphaClear(MemorySegment image, MemorySegment color, float threshold) {
        var mh$ = ImageAlphaClear$MH();
        try {
            mh$.invokeExact(image, color, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageAlphaMask$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$3,"ImageAlphaMask");
    }
    /**
     * {@snippet :
     * void ImageAlphaMask(Image* image, Image alphaMask);
     * }
     */
    public static void ImageAlphaMask(MemorySegment image, MemorySegment alphaMask) {
        var mh$ = ImageAlphaMask$MH();
        try {
            mh$.invokeExact(image, alphaMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageAlphaPremultiply$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"ImageAlphaPremultiply");
    }
    /**
     * {@snippet :
     * void ImageAlphaPremultiply(Image* image);
     * }
     */
    public static void ImageAlphaPremultiply(MemorySegment image) {
        var mh$ = ImageAlphaPremultiply$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageBlurGaussian$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$5,"ImageBlurGaussian");
    }
    /**
     * {@snippet :
     * void ImageBlurGaussian(Image* image, int blurSize);
     * }
     */
    public static void ImageBlurGaussian(MemorySegment image, int blurSize) {
        var mh$ = ImageBlurGaussian$MH();
        try {
            mh$.invokeExact(image, blurSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageResize$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$1,"ImageResize");
    }
    /**
     * {@snippet :
     * void ImageResize(Image* image, int newWidth, int newHeight);
     * }
     */
    public static void ImageResize(MemorySegment image, int newWidth, int newHeight) {
        var mh$ = ImageResize$MH();
        try {
            mh$.invokeExact(image, newWidth, newHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageResizeNN$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$2,"ImageResizeNN");
    }
    /**
     * {@snippet :
     * void ImageResizeNN(Image* image, int newWidth, int newHeight);
     * }
     */
    public static void ImageResizeNN(MemorySegment image, int newWidth, int newHeight) {
        var mh$ = ImageResizeNN$MH();
        try {
            mh$.invokeExact(image, newWidth, newHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageResizeCanvas$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$4,"ImageResizeCanvas");
    }
    /**
     * {@snippet :
     * void ImageResizeCanvas(Image* image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);
     * }
     */
    public static void ImageResizeCanvas(MemorySegment image, int newWidth, int newHeight, int offsetX, int offsetY, MemorySegment fill) {
        var mh$ = ImageResizeCanvas$MH();
        try {
            mh$.invokeExact(image, newWidth, newHeight, offsetX, offsetY, fill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$5,"ImageMipmaps");
    }
    /**
     * {@snippet :
     * void ImageMipmaps(Image* image);
     * }
     */
    public static void ImageMipmaps(MemorySegment image) {
        var mh$ = ImageMipmaps$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDither$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"ImageDither");
    }
    /**
     * {@snippet :
     * void ImageDither(Image* image, int rBpp, int gBpp, int bBpp, int aBpp);
     * }
     */
    public static void ImageDither(MemorySegment image, int rBpp, int gBpp, int bBpp, int aBpp) {
        var mh$ = ImageDither$MH();
        try {
            mh$.invokeExact(image, rBpp, gBpp, bBpp, aBpp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageFlipVertical$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$2,"ImageFlipVertical");
    }
    /**
     * {@snippet :
     * void ImageFlipVertical(Image* image);
     * }
     */
    public static void ImageFlipVertical(MemorySegment image) {
        var mh$ = ImageFlipVertical$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageFlipHorizontal$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"ImageFlipHorizontal");
    }
    /**
     * {@snippet :
     * void ImageFlipHorizontal(Image* image);
     * }
     */
    public static void ImageFlipHorizontal(MemorySegment image) {
        var mh$ = ImageFlipHorizontal$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"ImageRotate");
    }
    /**
     * {@snippet :
     * void ImageRotate(Image* image, int degrees);
     * }
     */
    public static void ImageRotate(MemorySegment image, int degrees) {
        var mh$ = ImageRotate$MH();
        try {
            mh$.invokeExact(image, degrees);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageRotateCW$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$5,"ImageRotateCW");
    }
    /**
     * {@snippet :
     * void ImageRotateCW(Image* image);
     * }
     */
    public static void ImageRotateCW(MemorySegment image) {
        var mh$ = ImageRotateCW$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageRotateCCW$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$0,"ImageRotateCCW");
    }
    /**
     * {@snippet :
     * void ImageRotateCCW(Image* image);
     * }
     */
    public static void ImageRotateCCW(MemorySegment image) {
        var mh$ = ImageRotateCCW$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorTint$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$1,"ImageColorTint");
    }
    /**
     * {@snippet :
     * void ImageColorTint(Image* image, Color color);
     * }
     */
    public static void ImageColorTint(MemorySegment image, MemorySegment color) {
        var mh$ = ImageColorTint$MH();
        try {
            mh$.invokeExact(image, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorInvert$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$2,"ImageColorInvert");
    }
    /**
     * {@snippet :
     * void ImageColorInvert(Image* image);
     * }
     */
    public static void ImageColorInvert(MemorySegment image) {
        var mh$ = ImageColorInvert$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorGrayscale$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$3,"ImageColorGrayscale");
    }
    /**
     * {@snippet :
     * void ImageColorGrayscale(Image* image);
     * }
     */
    public static void ImageColorGrayscale(MemorySegment image) {
        var mh$ = ImageColorGrayscale$MH();
        try {
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorContrast$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$4,"ImageColorContrast");
    }
    /**
     * {@snippet :
     * void ImageColorContrast(Image* image, float contrast);
     * }
     */
    public static void ImageColorContrast(MemorySegment image, float contrast) {
        var mh$ = ImageColorContrast$MH();
        try {
            mh$.invokeExact(image, contrast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$5,"ImageColorBrightness");
    }
    /**
     * {@snippet :
     * void ImageColorBrightness(Image* image, int brightness);
     * }
     */
    public static void ImageColorBrightness(MemorySegment image, int brightness) {
        var mh$ = ImageColorBrightness$MH();
        try {
            mh$.invokeExact(image, brightness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageColorReplace$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$1,"ImageColorReplace");
    }
    /**
     * {@snippet :
     * void ImageColorReplace(Image* image, Color color, Color replace);
     * }
     */
    public static void ImageColorReplace(MemorySegment image, MemorySegment color, MemorySegment replace) {
        var mh$ = ImageColorReplace$MH();
        try {
            mh$.invokeExact(image, color, replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageColors$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$3,"LoadImageColors");
    }
    /**
     * {@snippet :
     * Color* LoadImageColors(Image image);
     * }
     */
    public static MemorySegment LoadImageColors(MemorySegment image) {
        var mh$ = LoadImageColors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImagePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$5,"LoadImagePalette");
    }
    /**
     * {@snippet :
     * Color* LoadImagePalette(Image image, int maxPaletteSize, int* colorCount);
     * }
     */
    public static MemorySegment LoadImagePalette(MemorySegment image, int maxPaletteSize, MemorySegment colorCount) {
        var mh$ = LoadImagePalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(image, maxPaletteSize, colorCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadImageColors$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$0,"UnloadImageColors");
    }
    /**
     * {@snippet :
     * void UnloadImageColors(Color* colors);
     * }
     */
    public static void UnloadImageColors(MemorySegment colors) {
        var mh$ = UnloadImageColors$MH();
        try {
            mh$.invokeExact(colors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadImagePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"UnloadImagePalette");
    }
    /**
     * {@snippet :
     * void UnloadImagePalette(Color* colors);
     * }
     */
    public static void UnloadImagePalette(MemorySegment colors) {
        var mh$ = UnloadImagePalette$MH();
        try {
            mh$.invokeExact(colors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetImageAlphaBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"GetImageAlphaBorder");
    }
    /**
     * {@snippet :
     * Rectangle GetImageAlphaBorder(Image image, float threshold);
     * }
     */
    public static MemorySegment GetImageAlphaBorder(SegmentAllocator allocator, MemorySegment image, float threshold) {
        var mh$ = GetImageAlphaBorder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetImageColor$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"GetImageColor");
    }
    /**
     * {@snippet :
     * Color GetImageColor(Image image, int x, int y);
     * }
     */
    public static MemorySegment GetImageColor(SegmentAllocator allocator, MemorySegment image, int x, int y) {
        var mh$ = GetImageColor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageClearBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$0,"ImageClearBackground");
    }
    /**
     * {@snippet :
     * void ImageClearBackground(Image* dst, Color color);
     * }
     */
    public static void ImageClearBackground(MemorySegment dst, MemorySegment color) {
        var mh$ = ImageClearBackground$MH();
        try {
            mh$.invokeExact(dst, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$2,"ImageDrawPixel");
    }
    /**
     * {@snippet :
     * void ImageDrawPixel(Image* dst, int posX, int posY, Color color);
     * }
     */
    public static void ImageDrawPixel(MemorySegment dst, int posX, int posY, MemorySegment color) {
        var mh$ = ImageDrawPixel$MH();
        try {
            mh$.invokeExact(dst, posX, posY, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"ImageDrawPixelV");
    }
    /**
     * {@snippet :
     * void ImageDrawPixelV(Image* dst, Vector2 position, Color color);
     * }
     */
    public static void ImageDrawPixelV(MemorySegment dst, MemorySegment position, MemorySegment color) {
        var mh$ = ImageDrawPixelV$MH();
        try {
            mh$.invokeExact(dst, position, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"ImageDrawLine");
    }
    /**
     * {@snippet :
     * void ImageDrawLine(Image* dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color);
     * }
     */
    public static void ImageDrawLine(MemorySegment dst, int startPosX, int startPosY, int endPosX, int endPosY, MemorySegment color) {
        var mh$ = ImageDrawLine$MH();
        try {
            mh$.invokeExact(dst, startPosX, startPosY, endPosX, endPosY, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawLineV$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"ImageDrawLineV");
    }
    /**
     * {@snippet :
     * void ImageDrawLineV(Image* dst, Vector2 start, Vector2 end, Color color);
     * }
     */
    public static void ImageDrawLineV(MemorySegment dst, MemorySegment start, MemorySegment end, MemorySegment color) {
        var mh$ = ImageDrawLineV$MH();
        try {
            mh$.invokeExact(dst, start, end, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawCircle$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"ImageDrawCircle");
    }
    /**
     * {@snippet :
     * void ImageDrawCircle(Image* dst, int centerX, int centerY, int radius, Color color);
     * }
     */
    public static void ImageDrawCircle(MemorySegment dst, int centerX, int centerY, int radius, MemorySegment color) {
        var mh$ = ImageDrawCircle$MH();
        try {
            mh$.invokeExact(dst, centerX, centerY, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawCircleV$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"ImageDrawCircleV");
    }
    /**
     * {@snippet :
     * void ImageDrawCircleV(Image* dst, Vector2 center, int radius, Color color);
     * }
     */
    public static void ImageDrawCircleV(MemorySegment dst, MemorySegment center, int radius, MemorySegment color) {
        var mh$ = ImageDrawCircleV$MH();
        try {
            mh$.invokeExact(dst, center, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawCircleLines$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"ImageDrawCircleLines");
    }
    /**
     * {@snippet :
     * void ImageDrawCircleLines(Image* dst, int centerX, int centerY, int radius, Color color);
     * }
     */
    public static void ImageDrawCircleLines(MemorySegment dst, int centerX, int centerY, int radius, MemorySegment color) {
        var mh$ = ImageDrawCircleLines$MH();
        try {
            mh$.invokeExact(dst, centerX, centerY, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawCircleLinesV$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"ImageDrawCircleLinesV");
    }
    /**
     * {@snippet :
     * void ImageDrawCircleLinesV(Image* dst, Vector2 center, int radius, Color color);
     * }
     */
    public static void ImageDrawCircleLinesV(MemorySegment dst, MemorySegment center, int radius, MemorySegment color) {
        var mh$ = ImageDrawCircleLinesV$MH();
        try {
            mh$.invokeExact(dst, center, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"ImageDrawRectangle");
    }
    /**
     * {@snippet :
     * void ImageDrawRectangle(Image* dst, int posX, int posY, int width, int height, Color color);
     * }
     */
    public static void ImageDrawRectangle(MemorySegment dst, int posX, int posY, int width, int height, MemorySegment color) {
        var mh$ = ImageDrawRectangle$MH();
        try {
            mh$.invokeExact(dst, posX, posY, width, height, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawRectangleV$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"ImageDrawRectangleV");
    }
    /**
     * {@snippet :
     * void ImageDrawRectangleV(Image* dst, Vector2 position, Vector2 size, Color color);
     * }
     */
    public static void ImageDrawRectangleV(MemorySegment dst, MemorySegment position, MemorySegment size, MemorySegment color) {
        var mh$ = ImageDrawRectangleV$MH();
        try {
            mh$.invokeExact(dst, position, size, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawRectangleRec$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"ImageDrawRectangleRec");
    }
    /**
     * {@snippet :
     * void ImageDrawRectangleRec(Image* dst, Rectangle rec, Color color);
     * }
     */
    public static void ImageDrawRectangleRec(MemorySegment dst, MemorySegment rec, MemorySegment color) {
        var mh$ = ImageDrawRectangleRec$MH();
        try {
            mh$.invokeExact(dst, rec, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawRectangleLines$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"ImageDrawRectangleLines");
    }
    /**
     * {@snippet :
     * void ImageDrawRectangleLines(Image* dst, Rectangle rec, int thick, Color color);
     * }
     */
    public static void ImageDrawRectangleLines(MemorySegment dst, MemorySegment rec, int thick, MemorySegment color) {
        var mh$ = ImageDrawRectangleLines$MH();
        try {
            mh$.invokeExact(dst, rec, thick, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"ImageDraw");
    }
    /**
     * {@snippet :
     * void ImageDraw(Image* dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);
     * }
     */
    public static void ImageDraw(MemorySegment dst, MemorySegment src, MemorySegment srcRec, MemorySegment dstRec, MemorySegment tint) {
        var mh$ = ImageDraw$MH();
        try {
            mh$.invokeExact(dst, src, srcRec, dstRec, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"ImageDrawText");
    }
    /**
     * {@snippet :
     * void ImageDrawText(Image* dst, char* text, int posX, int posY, int fontSize, Color color);
     * }
     */
    public static void ImageDrawText(MemorySegment dst, MemorySegment text, int posX, int posY, int fontSize, MemorySegment color) {
        var mh$ = ImageDrawText$MH();
        try {
            mh$.invokeExact(dst, text, posX, posY, fontSize, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImageDrawTextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"ImageDrawTextEx");
    }
    /**
     * {@snippet :
     * void ImageDrawTextEx(Image* dst, Font font, char* text, Vector2 position, float fontSize, float spacing, Color tint);
     * }
     */
    public static void ImageDrawTextEx(MemorySegment dst, MemorySegment font, MemorySegment text, MemorySegment position, float fontSize, float spacing, MemorySegment tint) {
        var mh$ = ImageDrawTextEx$MH();
        try {
            mh$.invokeExact(dst, font, text, position, fontSize, spacing, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"LoadTexture");
    }
    /**
     * {@snippet :
     * Texture2D LoadTexture(char* fileName);
     * }
     */
    public static MemorySegment LoadTexture(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadTextureFromImage$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"LoadTextureFromImage");
    }
    /**
     * {@snippet :
     * Texture2D LoadTextureFromImage(Image image);
     * }
     */
    public static MemorySegment LoadTextureFromImage(SegmentAllocator allocator, MemorySegment image) {
        var mh$ = LoadTextureFromImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadTextureCubemap$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"LoadTextureCubemap");
    }
    /**
     * {@snippet :
     * TextureCubemap LoadTextureCubemap(Image image, int layout);
     * }
     */
    public static MemorySegment LoadTextureCubemap(SegmentAllocator allocator, MemorySegment image, int layout) {
        var mh$ = LoadTextureCubemap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadRenderTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"LoadRenderTexture");
    }
    /**
     * {@snippet :
     * RenderTexture2D LoadRenderTexture(int width, int height);
     * }
     */
    public static MemorySegment LoadRenderTexture(SegmentAllocator allocator, int width, int height) {
        var mh$ = LoadRenderTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTextureReady$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"IsTextureReady");
    }
    /**
     * {@snippet :
     * _Bool IsTextureReady(Texture2D texture);
     * }
     */
    public static boolean IsTextureReady(MemorySegment texture) {
        var mh$ = IsTextureReady$MH();
        try {
            return (boolean)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"UnloadTexture");
    }
    /**
     * {@snippet :
     * void UnloadTexture(Texture2D texture);
     * }
     */
    public static void UnloadTexture(MemorySegment texture) {
        var mh$ = UnloadTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsRenderTextureReady$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"IsRenderTextureReady");
    }
    /**
     * {@snippet :
     * _Bool IsRenderTextureReady(RenderTexture2D target);
     * }
     */
    public static boolean IsRenderTextureReady(MemorySegment target) {
        var mh$ = IsRenderTextureReady$MH();
        try {
            return (boolean)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadRenderTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"UnloadRenderTexture");
    }
    /**
     * {@snippet :
     * void UnloadRenderTexture(RenderTexture2D target);
     * }
     */
    public static void UnloadRenderTexture(MemorySegment target) {
        var mh$ = UnloadRenderTexture$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$6,"UpdateTexture");
    }
    /**
     * {@snippet :
     * void UpdateTexture(Texture2D texture, void* pixels);
     * }
     */
    public static void UpdateTexture(MemorySegment texture, MemorySegment pixels) {
        var mh$ = UpdateTexture$MH();
        try {
            mh$.invokeExact(texture, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateTextureRec$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"UpdateTextureRec");
    }
    /**
     * {@snippet :
     * void UpdateTextureRec(Texture2D texture, Rectangle rec, void* pixels);
     * }
     */
    public static void UpdateTextureRec(MemorySegment texture, MemorySegment rec, MemorySegment pixels) {
        var mh$ = UpdateTextureRec$MH();
        try {
            mh$.invokeExact(texture, rec, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenTextureMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"GenTextureMipmaps");
    }
    /**
     * {@snippet :
     * void GenTextureMipmaps(Texture2D* texture);
     * }
     */
    public static void GenTextureMipmaps(MemorySegment texture) {
        var mh$ = GenTextureMipmaps$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextureFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"SetTextureFilter");
    }
    /**
     * {@snippet :
     * void SetTextureFilter(Texture2D texture, int filter);
     * }
     */
    public static void SetTextureFilter(MemorySegment texture, int filter) {
        var mh$ = SetTextureFilter$MH();
        try {
            mh$.invokeExact(texture, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextureWrap$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"SetTextureWrap");
    }
    /**
     * {@snippet :
     * void SetTextureWrap(Texture2D texture, int wrap);
     * }
     */
    public static void SetTextureWrap(MemorySegment texture, int wrap) {
        var mh$ = SetTextureWrap$MH();
        try {
            mh$.invokeExact(texture, wrap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"DrawTexture");
    }
    /**
     * {@snippet :
     * void DrawTexture(Texture2D texture, int posX, int posY, Color tint);
     * }
     */
    public static void DrawTexture(MemorySegment texture, int posX, int posY, MemorySegment tint) {
        var mh$ = DrawTexture$MH();
        try {
            mh$.invokeExact(texture, posX, posY, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextureV$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"DrawTextureV");
    }
    /**
     * {@snippet :
     * void DrawTextureV(Texture2D texture, Vector2 position, Color tint);
     * }
     */
    public static void DrawTextureV(MemorySegment texture, MemorySegment position, MemorySegment tint) {
        var mh$ = DrawTextureV$MH();
        try {
            mh$.invokeExact(texture, position, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextureEx$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$5,"DrawTextureEx");
    }
    /**
     * {@snippet :
     * void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);
     * }
     */
    public static void DrawTextureEx(MemorySegment texture, MemorySegment position, float rotation, float scale, MemorySegment tint) {
        var mh$ = DrawTextureEx$MH();
        try {
            mh$.invokeExact(texture, position, rotation, scale, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextureRec$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"DrawTextureRec");
    }
    /**
     * {@snippet :
     * void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);
     * }
     */
    public static void DrawTextureRec(MemorySegment texture, MemorySegment source, MemorySegment position, MemorySegment tint) {
        var mh$ = DrawTextureRec$MH();
        try {
            mh$.invokeExact(texture, source, position, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTexturePro$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$3,"DrawTexturePro");
    }
    /**
     * {@snippet :
     * void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint);
     * }
     */
    public static void DrawTexturePro(MemorySegment texture, MemorySegment source, MemorySegment dest, MemorySegment origin, float rotation, MemorySegment tint) {
        var mh$ = DrawTexturePro$MH();
        try {
            mh$.invokeExact(texture, source, dest, origin, rotation, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextureNPatch$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"DrawTextureNPatch");
    }
    /**
     * {@snippet :
     * void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint);
     * }
     */
    public static void DrawTextureNPatch(MemorySegment texture, MemorySegment nPatchInfo, MemorySegment dest, MemorySegment origin, float rotation, MemorySegment tint) {
        var mh$ = DrawTextureNPatch$MH();
        try {
            mh$.invokeExact(texture, nPatchInfo, dest, origin, rotation, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Fade$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"Fade");
    }
    /**
     * {@snippet :
     * Color Fade(Color color, float alpha);
     * }
     */
    public static MemorySegment Fade(SegmentAllocator allocator, MemorySegment color, float alpha) {
        var mh$ = Fade$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$3,"ColorToInt");
    }
    /**
     * {@snippet :
     * int ColorToInt(Color color);
     * }
     */
    public static int ColorToInt(MemorySegment color) {
        var mh$ = ColorToInt$MH();
        try {
            return (int)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorNormalize$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$5,"ColorNormalize");
    }
    /**
     * {@snippet :
     * Vector4 ColorNormalize(Color color);
     * }
     */
    public static MemorySegment ColorNormalize(SegmentAllocator allocator, MemorySegment color) {
        var mh$ = ColorNormalize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorFromNormalized$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"ColorFromNormalized");
    }
    /**
     * {@snippet :
     * Color ColorFromNormalized(Vector4 normalized);
     * }
     */
    public static MemorySegment ColorFromNormalized(SegmentAllocator allocator, MemorySegment normalized) {
        var mh$ = ColorFromNormalized$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, normalized);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorToHSV$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"ColorToHSV");
    }
    /**
     * {@snippet :
     * Vector3 ColorToHSV(Color color);
     * }
     */
    public static MemorySegment ColorToHSV(SegmentAllocator allocator, MemorySegment color) {
        var mh$ = ColorToHSV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorFromHSV$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"ColorFromHSV");
    }
    /**
     * {@snippet :
     * Color ColorFromHSV(float hue, float saturation, float value);
     * }
     */
    public static MemorySegment ColorFromHSV(SegmentAllocator allocator, float hue, float saturation, float value) {
        var mh$ = ColorFromHSV$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hue, saturation, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorTint$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$1,"ColorTint");
    }
    /**
     * {@snippet :
     * Color ColorTint(Color color, Color tint);
     * }
     */
    public static MemorySegment ColorTint(SegmentAllocator allocator, MemorySegment color, MemorySegment tint) {
        var mh$ = ColorTint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$2,"ColorBrightness");
    }
    /**
     * {@snippet :
     * Color ColorBrightness(Color color, float factor);
     * }
     */
    public static MemorySegment ColorBrightness(SegmentAllocator allocator, MemorySegment color, float factor) {
        var mh$ = ColorBrightness$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorContrast$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$3,"ColorContrast");
    }
    /**
     * {@snippet :
     * Color ColorContrast(Color color, float contrast);
     * }
     */
    public static MemorySegment ColorContrast(SegmentAllocator allocator, MemorySegment color, float contrast) {
        var mh$ = ColorContrast$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color, contrast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$4,"ColorAlpha");
    }
    /**
     * {@snippet :
     * Color ColorAlpha(Color color, float alpha);
     * }
     */
    public static MemorySegment ColorAlpha(SegmentAllocator allocator, MemorySegment color, float alpha) {
        var mh$ = ColorAlpha$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, color, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorAlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$6,"ColorAlphaBlend");
    }
    /**
     * {@snippet :
     * Color ColorAlphaBlend(Color dst, Color src, Color tint);
     * }
     */
    public static MemorySegment ColorAlphaBlend(SegmentAllocator allocator, MemorySegment dst, MemorySegment src, MemorySegment tint) {
        var mh$ = ColorAlphaBlend$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, dst, src, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$1,"GetColor");
    }
    /**
     * {@snippet :
     * Color GetColor(unsigned int hexValue);
     * }
     */
    public static MemorySegment GetColor(SegmentAllocator allocator, int hexValue) {
        var mh$ = GetColor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hexValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixelColor$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$3,"GetPixelColor");
    }
    /**
     * {@snippet :
     * Color GetPixelColor(void* srcPtr, int format);
     * }
     */
    public static MemorySegment GetPixelColor(SegmentAllocator allocator, MemorySegment srcPtr, int format) {
        var mh$ = GetPixelColor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, srcPtr, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelColor$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$5,"SetPixelColor");
    }
    /**
     * {@snippet :
     * void SetPixelColor(void* dstPtr, Color color, int format);
     * }
     */
    public static void SetPixelColor(MemorySegment dstPtr, MemorySegment color, int format) {
        var mh$ = SetPixelColor$MH();
        try {
            mh$.invokeExact(dstPtr, color, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixelDataSize$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$1,"GetPixelDataSize");
    }
    /**
     * {@snippet :
     * int GetPixelDataSize(int width, int height, int format);
     * }
     */
    public static int GetPixelDataSize(int width, int height, int format) {
        var mh$ = GetPixelDataSize$MH();
        try {
            return (int)mh$.invokeExact(width, height, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$3,"GetFontDefault");
    }
    /**
     * {@snippet :
     * Font GetFontDefault();
     * }
     */
    public static MemorySegment GetFontDefault(SegmentAllocator allocator) {
        var mh$ = GetFontDefault$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$5,"LoadFont");
    }
    /**
     * {@snippet :
     * Font LoadFont(char* fileName);
     * }
     */
    public static MemorySegment LoadFont(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadFont$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$1,"LoadFontEx");
    }
    /**
     * {@snippet :
     * Font LoadFontEx(char* fileName, int fontSize, int* codepoints, int codepointCount);
     * }
     */
    public static MemorySegment LoadFontEx(SegmentAllocator allocator, MemorySegment fileName, int fontSize, MemorySegment codepoints, int codepointCount) {
        var mh$ = LoadFontEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName, fontSize, codepoints, codepointCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFontFromImage$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$3,"LoadFontFromImage");
    }
    /**
     * {@snippet :
     * Font LoadFontFromImage(Image image, Color key, int firstChar);
     * }
     */
    public static MemorySegment LoadFontFromImage(SegmentAllocator allocator, MemorySegment image, MemorySegment key, int firstChar) {
        var mh$ = LoadFontFromImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, image, key, firstChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFontFromMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"LoadFontFromMemory");
    }
    /**
     * {@snippet :
     * Font LoadFontFromMemory(char* fileType, unsigned char* fileData, int dataSize, int fontSize, int* codepoints, int codepointCount);
     * }
     */
    public static MemorySegment LoadFontFromMemory(SegmentAllocator allocator, MemorySegment fileType, MemorySegment fileData, int dataSize, int fontSize, MemorySegment codepoints, int codepointCount) {
        var mh$ = LoadFontFromMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileType, fileData, dataSize, fontSize, codepoints, codepointCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsFontReady$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$1,"IsFontReady");
    }
    /**
     * {@snippet :
     * _Bool IsFontReady(Font font);
     * }
     */
    public static boolean IsFontReady(MemorySegment font) {
        var mh$ = IsFontReady$MH();
        try {
            return (boolean)mh$.invokeExact(font);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadFontData$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$3,"LoadFontData");
    }
    /**
     * {@snippet :
     * GlyphInfo* LoadFontData(unsigned char* fileData, int dataSize, int fontSize, int* codepoints, int codepointCount, int type);
     * }
     */
    public static MemorySegment LoadFontData(MemorySegment fileData, int dataSize, int fontSize, MemorySegment codepoints, int codepointCount, int type) {
        var mh$ = LoadFontData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileData, dataSize, fontSize, codepoints, codepointCount, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenImageFontAtlas$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$5,"GenImageFontAtlas");
    }
    /**
     * {@snippet :
     * Image GenImageFontAtlas(const GlyphInfo* glyphs, Rectangle** glyphRecs, int glyphCount, int fontSize, int padding, int packMethod);
     * }
     */
    public static MemorySegment GenImageFontAtlas(SegmentAllocator allocator, MemorySegment glyphs, MemorySegment glyphRecs, int glyphCount, int fontSize, int padding, int packMethod) {
        var mh$ = GenImageFontAtlas$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadFontData$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$0,"UnloadFontData");
    }
    /**
     * {@snippet :
     * void UnloadFontData(GlyphInfo* glyphs, int glyphCount);
     * }
     */
    public static void UnloadFontData(MemorySegment glyphs, int glyphCount) {
        var mh$ = UnloadFontData$MH();
        try {
            mh$.invokeExact(glyphs, glyphCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"UnloadFont");
    }
    /**
     * {@snippet :
     * void UnloadFont(Font font);
     * }
     */
    public static void UnloadFont(MemorySegment font) {
        var mh$ = UnloadFont$MH();
        try {
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportFontAsCode$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"ExportFontAsCode");
    }
    /**
     * {@snippet :
     * _Bool ExportFontAsCode(Font font, char* fileName);
     * }
     */
    public static boolean ExportFontAsCode(MemorySegment font, MemorySegment fileName) {
        var mh$ = ExportFontAsCode$MH();
        try {
            return (boolean)mh$.invokeExact(font, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFPS$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$5,"DrawFPS");
    }
    /**
     * {@snippet :
     * void DrawFPS(int posX, int posY);
     * }
     */
    public static void DrawFPS(int posX, int posY) {
        var mh$ = DrawFPS$MH();
        try {
            mh$.invokeExact(posX, posY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$0,"DrawText");
    }
    /**
     * {@snippet :
     * void DrawText(char* text, int posX, int posY, int fontSize, Color color);
     * }
     */
    public static void DrawText(MemorySegment text, int posX, int posY, int fontSize, MemorySegment color) {
        var mh$ = DrawText$MH();
        try {
            mh$.invokeExact(text, posX, posY, fontSize, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$2,"DrawTextEx");
    }
    /**
     * {@snippet :
     * void DrawTextEx(Font font, char* text, Vector2 position, float fontSize, float spacing, Color tint);
     * }
     */
    public static void DrawTextEx(MemorySegment font, MemorySegment text, MemorySegment position, float fontSize, float spacing, MemorySegment tint) {
        var mh$ = DrawTextEx$MH();
        try {
            mh$.invokeExact(font, text, position, fontSize, spacing, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextPro$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$4,"DrawTextPro");
    }
    /**
     * {@snippet :
     * void DrawTextPro(Font font, char* text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint);
     * }
     */
    public static void DrawTextPro(MemorySegment font, MemorySegment text, MemorySegment position, MemorySegment origin, float rotation, float fontSize, float spacing, MemorySegment tint) {
        var mh$ = DrawTextPro$MH();
        try {
            mh$.invokeExact(font, text, position, origin, rotation, fontSize, spacing, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextCodepoint$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$6,"DrawTextCodepoint");
    }
    /**
     * {@snippet :
     * void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint);
     * }
     */
    public static void DrawTextCodepoint(MemorySegment font, int codepoint, MemorySegment position, float fontSize, MemorySegment tint) {
        var mh$ = DrawTextCodepoint$MH();
        try {
            mh$.invokeExact(font, codepoint, position, fontSize, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextCodepoints$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$1,"DrawTextCodepoints");
    }
    /**
     * {@snippet :
     * void DrawTextCodepoints(Font font, int* codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint);
     * }
     */
    public static void DrawTextCodepoints(MemorySegment font, MemorySegment codepoints, int codepointCount, MemorySegment position, float fontSize, float spacing, MemorySegment tint) {
        var mh$ = DrawTextCodepoints$MH();
        try {
            mh$.invokeExact(font, codepoints, codepointCount, position, fontSize, spacing, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextLineSpacing$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$2,"SetTextLineSpacing");
    }
    /**
     * {@snippet :
     * void SetTextLineSpacing(int spacing);
     * }
     */
    public static void SetTextLineSpacing(int spacing) {
        var mh$ = SetTextLineSpacing$MH();
        try {
            mh$.invokeExact(spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MeasureText$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$4,"MeasureText");
    }
    /**
     * {@snippet :
     * int MeasureText(char* text, int fontSize);
     * }
     */
    public static int MeasureText(MemorySegment text, int fontSize) {
        var mh$ = MeasureText$MH();
        try {
            return (int)mh$.invokeExact(text, fontSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MeasureTextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$6,"MeasureTextEx");
    }
    /**
     * {@snippet :
     * Vector2 MeasureTextEx(Font font, char* text, float fontSize, float spacing);
     * }
     */
    public static MemorySegment MeasureTextEx(SegmentAllocator allocator, MemorySegment font, MemorySegment text, float fontSize, float spacing) {
        var mh$ = MeasureTextEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, font, text, fontSize, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$1,"GetGlyphIndex");
    }
    /**
     * {@snippet :
     * int GetGlyphIndex(Font font, int codepoint);
     * }
     */
    public static int GetGlyphIndex(MemorySegment font, int codepoint) {
        var mh$ = GetGlyphIndex$MH();
        try {
            return (int)mh$.invokeExact(font, codepoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$3,"GetGlyphInfo");
    }
    /**
     * {@snippet :
     * GlyphInfo GetGlyphInfo(Font font, int codepoint);
     * }
     */
    public static MemorySegment GetGlyphInfo(SegmentAllocator allocator, MemorySegment font, int codepoint) {
        var mh$ = GetGlyphInfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, font, codepoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphAtlasRec$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$5,"GetGlyphAtlasRec");
    }
    /**
     * {@snippet :
     * Rectangle GetGlyphAtlasRec(Font font, int codepoint);
     * }
     */
    public static MemorySegment GetGlyphAtlasRec(SegmentAllocator allocator, MemorySegment font, int codepoint) {
        var mh$ = GetGlyphAtlasRec$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, font, codepoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadUTF8$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$0,"LoadUTF8");
    }
    /**
     * {@snippet :
     * char* LoadUTF8(int* codepoints, int length);
     * }
     */
    public static MemorySegment LoadUTF8(MemorySegment codepoints, int length) {
        var mh$ = LoadUTF8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codepoints, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadUTF8$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$1,"UnloadUTF8");
    }
    /**
     * {@snippet :
     * void UnloadUTF8(char* text);
     * }
     */
    public static void UnloadUTF8(MemorySegment text) {
        var mh$ = UnloadUTF8$MH();
        try {
            mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCodepoints$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"LoadCodepoints");
    }
    /**
     * {@snippet :
     * int* LoadCodepoints(char* text, int* count);
     * }
     */
    public static MemorySegment LoadCodepoints(MemorySegment text, MemorySegment count) {
        var mh$ = LoadCodepoints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadCodepoints$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"UnloadCodepoints");
    }
    /**
     * {@snippet :
     * void UnloadCodepoints(int* codepoints);
     * }
     */
    public static void UnloadCodepoints(MemorySegment codepoints) {
        var mh$ = UnloadCodepoints$MH();
        try {
            mh$.invokeExact(codepoints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCodepointCount$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"GetCodepointCount");
    }
    /**
     * {@snippet :
     * int GetCodepointCount(char* text);
     * }
     */
    public static int GetCodepointCount(MemorySegment text) {
        var mh$ = GetCodepointCount$MH();
        try {
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCodepoint$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$6,"GetCodepoint");
    }
    /**
     * {@snippet :
     * int GetCodepoint(char* text, int* codepointSize);
     * }
     */
    public static int GetCodepoint(MemorySegment text, MemorySegment codepointSize) {
        var mh$ = GetCodepoint$MH();
        try {
            return (int)mh$.invokeExact(text, codepointSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCodepointNext$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"GetCodepointNext");
    }
    /**
     * {@snippet :
     * int GetCodepointNext(char* text, int* codepointSize);
     * }
     */
    public static int GetCodepointNext(MemorySegment text, MemorySegment codepointSize) {
        var mh$ = GetCodepointNext$MH();
        try {
            return (int)mh$.invokeExact(text, codepointSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCodepointPrevious$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"GetCodepointPrevious");
    }
    /**
     * {@snippet :
     * int GetCodepointPrevious(char* text, int* codepointSize);
     * }
     */
    public static int GetCodepointPrevious(MemorySegment text, MemorySegment codepointSize) {
        var mh$ = GetCodepointPrevious$MH();
        try {
            return (int)mh$.invokeExact(text, codepointSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CodepointToUTF8$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"CodepointToUTF8");
    }
    /**
     * {@snippet :
     * char* CodepointToUTF8(int codepoint, int* utf8Size);
     * }
     */
    public static MemorySegment CodepointToUTF8(int codepoint, MemorySegment utf8Size) {
        var mh$ = CodepointToUTF8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codepoint, utf8Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$4,"TextCopy");
    }
    /**
     * {@snippet :
     * int TextCopy(char* dst, char* src);
     * }
     */
    public static int TextCopy(MemorySegment dst, MemorySegment src) {
        var mh$ = TextCopy$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextIsEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$5,"TextIsEqual");
    }
    /**
     * {@snippet :
     * _Bool TextIsEqual(char* text1, char* text2);
     * }
     */
    public static boolean TextIsEqual(MemorySegment text1, MemorySegment text2) {
        var mh$ = TextIsEqual$MH();
        try {
            return (boolean)mh$.invokeExact(text1, text2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextLength$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$0,"TextLength");
    }
    /**
     * {@snippet :
     * unsigned int TextLength(char* text);
     * }
     */
    public static int TextLength(MemorySegment text) {
        var mh$ = TextLength$MH();
        try {
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$1,"TextFormat");
    }
    /**
     * {@snippet :
     * char* TextFormat(char* text,...);
     * }
     */
    public static MemorySegment TextFormat(MemorySegment text, Object... x1) {
        var mh$ = TextFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextSubtext$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"TextSubtext");
    }
    /**
     * {@snippet :
     * char* TextSubtext(char* text, int position, int length);
     * }
     */
    public static MemorySegment TextSubtext(MemorySegment text, int position, int length) {
        var mh$ = TextSubtext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, position, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextReplace$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$5,"TextReplace");
    }
    /**
     * {@snippet :
     * char* TextReplace(char* text, char* replace, char* by);
     * }
     */
    public static MemorySegment TextReplace(MemorySegment text, MemorySegment replace, MemorySegment by) {
        var mh$ = TextReplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, replace, by);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextInsert$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$1,"TextInsert");
    }
    /**
     * {@snippet :
     * char* TextInsert(char* text, char* insert, int position);
     * }
     */
    public static MemorySegment TextInsert(MemorySegment text, MemorySegment insert, int position) {
        var mh$ = TextInsert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, insert, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextJoin$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"TextJoin");
    }
    /**
     * {@snippet :
     * char* TextJoin(char** textList, int count, char* delimiter);
     * }
     */
    public static MemorySegment TextJoin(MemorySegment textList, int count, MemorySegment delimiter) {
        var mh$ = TextJoin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(textList, count, delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextSplit$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"TextSplit");
    }
    /**
     * {@snippet :
     * char** TextSplit(char* text, char delimiter, int* count);
     * }
     */
    public static MemorySegment TextSplit(MemorySegment text, byte delimiter, MemorySegment count) {
        var mh$ = TextSplit$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text, delimiter, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextAppend$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$6,"TextAppend");
    }
    /**
     * {@snippet :
     * void TextAppend(char* text, char* append, int* position);
     * }
     */
    public static void TextAppend(MemorySegment text, MemorySegment append, MemorySegment position) {
        var mh$ = TextAppend$MH();
        try {
            mh$.invokeExact(text, append, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextFindIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$0,"TextFindIndex");
    }
    /**
     * {@snippet :
     * int TextFindIndex(char* text, char* find);
     * }
     */
    public static int TextFindIndex(MemorySegment text, MemorySegment find) {
        var mh$ = TextFindIndex$MH();
        try {
            return (int)mh$.invokeExact(text, find);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextToUpper$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$1,"TextToUpper");
    }
    /**
     * {@snippet :
     * char* TextToUpper(char* text);
     * }
     */
    public static MemorySegment TextToUpper(MemorySegment text) {
        var mh$ = TextToUpper$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextToLower$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$2,"TextToLower");
    }
    /**
     * {@snippet :
     * char* TextToLower(char* text);
     * }
     */
    public static MemorySegment TextToLower(MemorySegment text) {
        var mh$ = TextToLower$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextToPascal$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$3,"TextToPascal");
    }
    /**
     * {@snippet :
     * char* TextToPascal(char* text);
     * }
     */
    public static MemorySegment TextToPascal(MemorySegment text) {
        var mh$ = TextToPascal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextToInteger$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$4,"TextToInteger");
    }
    /**
     * {@snippet :
     * int TextToInteger(char* text);
     * }
     */
    public static int TextToInteger(MemorySegment text) {
        var mh$ = TextToInteger$MH();
        try {
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawLine3D$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$6,"DrawLine3D");
    }
    /**
     * {@snippet :
     * void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);
     * }
     */
    public static void DrawLine3D(MemorySegment startPos, MemorySegment endPos, MemorySegment color) {
        var mh$ = DrawLine3D$MH();
        try {
            mh$.invokeExact(startPos, endPos, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPoint3D$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$1,"DrawPoint3D");
    }
    /**
     * {@snippet :
     * void DrawPoint3D(Vector3 position, Color color);
     * }
     */
    public static void DrawPoint3D(MemorySegment position, MemorySegment color) {
        var mh$ = DrawPoint3D$MH();
        try {
            mh$.invokeExact(position, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCircle3D$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$3,"DrawCircle3D");
    }
    /**
     * {@snippet :
     * void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);
     * }
     */
    public static void DrawCircle3D(MemorySegment center, float radius, MemorySegment rotationAxis, float rotationAngle, MemorySegment color) {
        var mh$ = DrawCircle3D$MH();
        try {
            mh$.invokeExact(center, radius, rotationAxis, rotationAngle, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangle3D$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"DrawTriangle3D");
    }
    /**
     * {@snippet :
     * void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);
     * }
     */
    public static void DrawTriangle3D(MemorySegment v1, MemorySegment v2, MemorySegment v3, MemorySegment color) {
        var mh$ = DrawTriangle3D$MH();
        try {
            mh$.invokeExact(v1, v2, v3, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTriangleStrip3D$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$0,"DrawTriangleStrip3D");
    }
    /**
     * {@snippet :
     * void DrawTriangleStrip3D(Vector3* points, int pointCount, Color color);
     * }
     */
    public static void DrawTriangleStrip3D(MemorySegment points, int pointCount, MemorySegment color) {
        var mh$ = DrawTriangleStrip3D$MH();
        try {
            mh$.invokeExact(points, pointCount, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCube$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$2,"DrawCube");
    }
    /**
     * {@snippet :
     * void DrawCube(Vector3 position, float width, float height, float length, Color color);
     * }
     */
    public static void DrawCube(MemorySegment position, float width, float height, float length, MemorySegment color) {
        var mh$ = DrawCube$MH();
        try {
            mh$.invokeExact(position, width, height, length, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCubeV$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"DrawCubeV");
    }
    /**
     * {@snippet :
     * void DrawCubeV(Vector3 position, Vector3 size, Color color);
     * }
     */
    public static void DrawCubeV(MemorySegment position, MemorySegment size, MemorySegment color) {
        var mh$ = DrawCubeV$MH();
        try {
            mh$.invokeExact(position, size, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCubeWires$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"DrawCubeWires");
    }
    /**
     * {@snippet :
     * void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);
     * }
     */
    public static void DrawCubeWires(MemorySegment position, float width, float height, float length, MemorySegment color) {
        var mh$ = DrawCubeWires$MH();
        try {
            mh$.invokeExact(position, width, height, length, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCubeWiresV$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$5,"DrawCubeWiresV");
    }
    /**
     * {@snippet :
     * void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);
     * }
     */
    public static void DrawCubeWiresV(MemorySegment position, MemorySegment size, MemorySegment color) {
        var mh$ = DrawCubeWiresV$MH();
        try {
            mh$.invokeExact(position, size, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$1,"DrawSphere");
    }
    /**
     * {@snippet :
     * void DrawSphere(Vector3 centerPos, float radius, Color color);
     * }
     */
    public static void DrawSphere(MemorySegment centerPos, float radius, MemorySegment color) {
        var mh$ = DrawSphere$MH();
        try {
            mh$.invokeExact(centerPos, radius, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSphereEx$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"DrawSphereEx");
    }
    /**
     * {@snippet :
     * void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);
     * }
     */
    public static void DrawSphereEx(MemorySegment centerPos, float radius, int rings, int slices, MemorySegment color) {
        var mh$ = DrawSphereEx$MH();
        try {
            mh$.invokeExact(centerPos, radius, rings, slices, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawSphereWires$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$4,"DrawSphereWires");
    }
    /**
     * {@snippet :
     * void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);
     * }
     */
    public static void DrawSphereWires(MemorySegment centerPos, float radius, int rings, int slices, MemorySegment color) {
        var mh$ = DrawSphereWires$MH();
        try {
            mh$.invokeExact(centerPos, radius, rings, slices, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$6,"DrawCylinder");
    }
    /**
     * {@snippet :
     * void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
     * }
     */
    public static void DrawCylinder(MemorySegment position, float radiusTop, float radiusBottom, float height, int slices, MemorySegment color) {
        var mh$ = DrawCylinder$MH();
        try {
            mh$.invokeExact(position, radiusTop, radiusBottom, height, slices, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCylinderEx$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$1,"DrawCylinderEx");
    }
    /**
     * {@snippet :
     * void DrawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
     * }
     */
    public static void DrawCylinderEx(MemorySegment startPos, MemorySegment endPos, float startRadius, float endRadius, int sides, MemorySegment color) {
        var mh$ = DrawCylinderEx$MH();
        try {
            mh$.invokeExact(startPos, endPos, startRadius, endRadius, sides, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCylinderWires$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$2,"DrawCylinderWires");
    }
    /**
     * {@snippet :
     * void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
     * }
     */
    public static void DrawCylinderWires(MemorySegment position, float radiusTop, float radiusBottom, float height, int slices, MemorySegment color) {
        var mh$ = DrawCylinderWires$MH();
        try {
            mh$.invokeExact(position, radiusTop, radiusBottom, height, slices, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCylinderWiresEx$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$3,"DrawCylinderWiresEx");
    }
    /**
     * {@snippet :
     * void DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
     * }
     */
    public static void DrawCylinderWiresEx(MemorySegment startPos, MemorySegment endPos, float startRadius, float endRadius, int sides, MemorySegment color) {
        var mh$ = DrawCylinderWiresEx$MH();
        try {
            mh$.invokeExact(startPos, endPos, startRadius, endRadius, sides, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCapsule$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$5,"DrawCapsule");
    }
    /**
     * {@snippet :
     * void DrawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);
     * }
     */
    public static void DrawCapsule(MemorySegment startPos, MemorySegment endPos, float radius, int slices, int rings, MemorySegment color) {
        var mh$ = DrawCapsule$MH();
        try {
            mh$.invokeExact(startPos, endPos, radius, slices, rings, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCapsuleWires$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$0,"DrawCapsuleWires");
    }
    /**
     * {@snippet :
     * void DrawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);
     * }
     */
    public static void DrawCapsuleWires(MemorySegment startPos, MemorySegment endPos, float radius, int slices, int rings, MemorySegment color) {
        var mh$ = DrawCapsuleWires$MH();
        try {
            mh$.invokeExact(startPos, endPos, radius, slices, rings, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$2,"DrawPlane");
    }
    /**
     * {@snippet :
     * void DrawPlane(Vector3 centerPos, Vector2 size, Color color);
     * }
     */
    public static void DrawPlane(MemorySegment centerPos, MemorySegment size, MemorySegment color) {
        var mh$ = DrawPlane$MH();
        try {
            mh$.invokeExact(centerPos, size, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawRay$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$4,"DrawRay");
    }
    /**
     * {@snippet :
     * void DrawRay(Ray ray, Color color);
     * }
     */
    public static void DrawRay(MemorySegment ray, MemorySegment color) {
        var mh$ = DrawRay$MH();
        try {
            mh$.invokeExact(ray, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$6,"DrawGrid");
    }
    /**
     * {@snippet :
     * void DrawGrid(int slices, float spacing);
     * }
     */
    public static void DrawGrid(int slices, float spacing) {
        var mh$ = DrawGrid$MH();
        try {
            mh$.invokeExact(slices, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadModel$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$1,"LoadModel");
    }
    /**
     * {@snippet :
     * Model LoadModel(char* fileName);
     * }
     */
    public static MemorySegment LoadModel(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadModel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadModelFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$3,"LoadModelFromMesh");
    }
    /**
     * {@snippet :
     * Model LoadModelFromMesh(Mesh mesh);
     * }
     */
    public static MemorySegment LoadModelFromMesh(SegmentAllocator allocator, MemorySegment mesh) {
        var mh$ = LoadModelFromMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsModelReady$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$5,"IsModelReady");
    }
    /**
     * {@snippet :
     * _Bool IsModelReady(Model model);
     * }
     */
    public static boolean IsModelReady(MemorySegment model) {
        var mh$ = IsModelReady$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadModel$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$1,"UnloadModel");
    }
    /**
     * {@snippet :
     * void UnloadModel(Model model);
     * }
     */
    public static void UnloadModel(MemorySegment model) {
        var mh$ = UnloadModel$MH();
        try {
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModelBoundingBox$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$3,"GetModelBoundingBox");
    }
    /**
     * {@snippet :
     * BoundingBox GetModelBoundingBox(Model model);
     * }
     */
    public static MemorySegment GetModelBoundingBox(SegmentAllocator allocator, MemorySegment model) {
        var mh$ = GetModelBoundingBox$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawModel$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$5,"DrawModel");
    }
    /**
     * {@snippet :
     * void DrawModel(Model model, Vector3 position, float scale, Color tint);
     * }
     */
    public static void DrawModel(MemorySegment model, MemorySegment position, float scale, MemorySegment tint) {
        var mh$ = DrawModel$MH();
        try {
            mh$.invokeExact(model, position, scale, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawModelEx$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$1,"DrawModelEx");
    }
    /**
     * {@snippet :
     * void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
     * }
     */
    public static void DrawModelEx(MemorySegment model, MemorySegment position, MemorySegment rotationAxis, float rotationAngle, MemorySegment scale, MemorySegment tint) {
        var mh$ = DrawModelEx$MH();
        try {
            mh$.invokeExact(model, position, rotationAxis, rotationAngle, scale, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawModelWires$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$2,"DrawModelWires");
    }
    /**
     * {@snippet :
     * void DrawModelWires(Model model, Vector3 position, float scale, Color tint);
     * }
     */
    public static void DrawModelWires(MemorySegment model, MemorySegment position, float scale, MemorySegment tint) {
        var mh$ = DrawModelWires$MH();
        try {
            mh$.invokeExact(model, position, scale, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawModelWiresEx$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$3,"DrawModelWiresEx");
    }
    /**
     * {@snippet :
     * void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
     * }
     */
    public static void DrawModelWiresEx(MemorySegment model, MemorySegment position, MemorySegment rotationAxis, float rotationAngle, MemorySegment scale, MemorySegment tint) {
        var mh$ = DrawModelWiresEx$MH();
        try {
            mh$.invokeExact(model, position, rotationAxis, rotationAngle, scale, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawBoundingBox$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$5,"DrawBoundingBox");
    }
    /**
     * {@snippet :
     * void DrawBoundingBox(BoundingBox box, Color color);
     * }
     */
    public static void DrawBoundingBox(MemorySegment box, MemorySegment color) {
        var mh$ = DrawBoundingBox$MH();
        try {
            mh$.invokeExact(box, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawBillboard$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$1,"DrawBillboard");
    }
    /**
     * {@snippet :
     * void DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float size, Color tint);
     * }
     */
    public static void DrawBillboard(MemorySegment camera, MemorySegment texture, MemorySegment position, float size, MemorySegment tint) {
        var mh$ = DrawBillboard$MH();
        try {
            mh$.invokeExact(camera, texture, position, size, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawBillboardRec$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$3,"DrawBillboardRec");
    }
    /**
     * {@snippet :
     * void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint);
     * }
     */
    public static void DrawBillboardRec(MemorySegment camera, MemorySegment texture, MemorySegment source, MemorySegment position, MemorySegment size, MemorySegment tint) {
        var mh$ = DrawBillboardRec$MH();
        try {
            mh$.invokeExact(camera, texture, source, position, size, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawBillboardPro$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$5,"DrawBillboardPro");
    }
    /**
     * {@snippet :
     * void DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint);
     * }
     */
    public static void DrawBillboardPro(MemorySegment camera, MemorySegment texture, MemorySegment source, MemorySegment position, MemorySegment up, MemorySegment size, MemorySegment origin, float rotation, MemorySegment tint) {
        var mh$ = DrawBillboardPro$MH();
        try {
            mh$.invokeExact(camera, texture, source, position, up, size, origin, rotation, tint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UploadMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$1,"UploadMesh");
    }
    /**
     * {@snippet :
     * void UploadMesh(Mesh* mesh, _Bool dynamic);
     * }
     */
    public static void UploadMesh(MemorySegment mesh, boolean dynamic) {
        var mh$ = UploadMesh$MH();
        try {
            mh$.invokeExact(mesh, dynamic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateMeshBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$3,"UpdateMeshBuffer");
    }
    /**
     * {@snippet :
     * void UpdateMeshBuffer(Mesh mesh, int index, void* data, int dataSize, int offset);
     * }
     */
    public static void UpdateMeshBuffer(MemorySegment mesh, int index, MemorySegment data, int dataSize, int offset) {
        var mh$ = UpdateMeshBuffer$MH();
        try {
            mh$.invokeExact(mesh, index, data, dataSize, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$5,"UnloadMesh");
    }
    /**
     * {@snippet :
     * void UnloadMesh(Mesh mesh);
     * }
     */
    public static void UnloadMesh(MemorySegment mesh) {
        var mh$ = UnloadMesh$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$1,"DrawMesh");
    }
    /**
     * {@snippet :
     * void DrawMesh(Mesh mesh, Material material, Matrix transform);
     * }
     */
    public static void DrawMesh(MemorySegment mesh, MemorySegment material, MemorySegment transform) {
        var mh$ = DrawMesh$MH();
        try {
            mh$.invokeExact(mesh, material, transform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawMeshInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$3,"DrawMeshInstanced");
    }
    /**
     * {@snippet :
     * void DrawMeshInstanced(Mesh mesh, Material material, const Matrix* transforms, int instances);
     * }
     */
    public static void DrawMeshInstanced(MemorySegment mesh, MemorySegment material, MemorySegment transforms, int instances) {
        var mh$ = DrawMeshInstanced$MH();
        try {
            mh$.invokeExact(mesh, material, transforms, instances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$5,"ExportMesh");
    }
    /**
     * {@snippet :
     * _Bool ExportMesh(Mesh mesh, char* fileName);
     * }
     */
    public static boolean ExportMesh(MemorySegment mesh, MemorySegment fileName) {
        var mh$ = ExportMesh$MH();
        try {
            return (boolean)mh$.invokeExact(mesh, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMeshBoundingBox$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$1,"GetMeshBoundingBox");
    }
    /**
     * {@snippet :
     * BoundingBox GetMeshBoundingBox(Mesh mesh);
     * }
     */
    public static MemorySegment GetMeshBoundingBox(SegmentAllocator allocator, MemorySegment mesh) {
        var mh$ = GetMeshBoundingBox$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshTangents$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$2,"GenMeshTangents");
    }
    /**
     * {@snippet :
     * void GenMeshTangents(Mesh* mesh);
     * }
     */
    public static void GenMeshTangents(MemorySegment mesh) {
        var mh$ = GenMeshTangents$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshPoly$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$4,"GenMeshPoly");
    }
    /**
     * {@snippet :
     * Mesh GenMeshPoly(int sides, float radius);
     * }
     */
    public static MemorySegment GenMeshPoly(SegmentAllocator allocator, int sides, float radius) {
        var mh$ = GenMeshPoly$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, sides, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$6,"GenMeshPlane");
    }
    /**
     * {@snippet :
     * Mesh GenMeshPlane(float width, float length, int resX, int resZ);
     * }
     */
    public static MemorySegment GenMeshPlane(SegmentAllocator allocator, float width, float length, int resX, int resZ) {
        var mh$ = GenMeshPlane$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, length, resX, resZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshCube$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$1,"GenMeshCube");
    }
    /**
     * {@snippet :
     * Mesh GenMeshCube(float width, float height, float length);
     * }
     */
    public static MemorySegment GenMeshCube(SegmentAllocator allocator, float width, float height, float length) {
        var mh$ = GenMeshCube$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$3,"GenMeshSphere");
    }
    /**
     * {@snippet :
     * Mesh GenMeshSphere(float radius, int rings, int slices);
     * }
     */
    public static MemorySegment GenMeshSphere(SegmentAllocator allocator, float radius, int rings, int slices) {
        var mh$ = GenMeshSphere$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, rings, slices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshHemiSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$4,"GenMeshHemiSphere");
    }
    /**
     * {@snippet :
     * Mesh GenMeshHemiSphere(float radius, int rings, int slices);
     * }
     */
    public static MemorySegment GenMeshHemiSphere(SegmentAllocator allocator, float radius, int rings, int slices) {
        var mh$ = GenMeshHemiSphere$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, rings, slices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$6,"GenMeshCylinder");
    }
    /**
     * {@snippet :
     * Mesh GenMeshCylinder(float radius, float height, int slices);
     * }
     */
    public static MemorySegment GenMeshCylinder(SegmentAllocator allocator, float radius, float height, int slices) {
        var mh$ = GenMeshCylinder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, height, slices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshCone$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$0,"GenMeshCone");
    }
    /**
     * {@snippet :
     * Mesh GenMeshCone(float radius, float height, int slices);
     * }
     */
    public static MemorySegment GenMeshCone(SegmentAllocator allocator, float radius, float height, int slices) {
        var mh$ = GenMeshCone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, height, slices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$1,"GenMeshTorus");
    }
    /**
     * {@snippet :
     * Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);
     * }
     */
    public static MemorySegment GenMeshTorus(SegmentAllocator allocator, float radius, float size, int radSeg, int sides) {
        var mh$ = GenMeshTorus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, size, radSeg, sides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshKnot$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$2,"GenMeshKnot");
    }
    /**
     * {@snippet :
     * Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);
     * }
     */
    public static MemorySegment GenMeshKnot(SegmentAllocator allocator, float radius, float size, int radSeg, int sides) {
        var mh$ = GenMeshKnot$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, radius, size, radSeg, sides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshHeightmap$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$4,"GenMeshHeightmap");
    }
    /**
     * {@snippet :
     * Mesh GenMeshHeightmap(Image heightmap, Vector3 size);
     * }
     */
    public static MemorySegment GenMeshHeightmap(SegmentAllocator allocator, MemorySegment heightmap, MemorySegment size) {
        var mh$ = GenMeshHeightmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, heightmap, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenMeshCubicmap$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$5,"GenMeshCubicmap");
    }
    /**
     * {@snippet :
     * Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);
     * }
     */
    public static MemorySegment GenMeshCubicmap(SegmentAllocator allocator, MemorySegment cubicmap, MemorySegment cubeSize) {
        var mh$ = GenMeshCubicmap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, cubicmap, cubeSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMaterials$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$0,"LoadMaterials");
    }
    /**
     * {@snippet :
     * Material* LoadMaterials(char* fileName, int* materialCount);
     * }
     */
    public static MemorySegment LoadMaterials(MemorySegment fileName, MemorySegment materialCount) {
        var mh$ = LoadMaterials$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileName, materialCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMaterialDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$2,"LoadMaterialDefault");
    }
    /**
     * {@snippet :
     * Material LoadMaterialDefault();
     * }
     */
    public static MemorySegment LoadMaterialDefault(SegmentAllocator allocator) {
        var mh$ = LoadMaterialDefault$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMaterialReady$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$4,"IsMaterialReady");
    }
    /**
     * {@snippet :
     * _Bool IsMaterialReady(Material material);
     * }
     */
    public static boolean IsMaterialReady(MemorySegment material) {
        var mh$ = IsMaterialReady$MH();
        try {
            return (boolean)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$6,"UnloadMaterial");
    }
    /**
     * {@snippet :
     * void UnloadMaterial(Material material);
     * }
     */
    public static void UnloadMaterial(MemorySegment material) {
        var mh$ = UnloadMaterial$MH();
        try {
            mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMaterialTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$1,"SetMaterialTexture");
    }
    /**
     * {@snippet :
     * void SetMaterialTexture(Material* material, int mapType, Texture2D texture);
     * }
     */
    public static void SetMaterialTexture(MemorySegment material, int mapType, MemorySegment texture) {
        var mh$ = SetMaterialTexture$MH();
        try {
            mh$.invokeExact(material, mapType, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetModelMeshMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$2,"SetModelMeshMaterial");
    }
    /**
     * {@snippet :
     * void SetModelMeshMaterial(Model* model, int meshId, int materialId);
     * }
     */
    public static void SetModelMeshMaterial(MemorySegment model, int meshId, int materialId) {
        var mh$ = SetModelMeshMaterial$MH();
        try {
            mh$.invokeExact(model, meshId, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadModelAnimations$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$3,"LoadModelAnimations");
    }
    /**
     * {@snippet :
     * ModelAnimation* LoadModelAnimations(char* fileName, int* animCount);
     * }
     */
    public static MemorySegment LoadModelAnimations(MemorySegment fileName, MemorySegment animCount) {
        var mh$ = LoadModelAnimations$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fileName, animCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateModelAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$5,"UpdateModelAnimation");
    }
    /**
     * {@snippet :
     * void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);
     * }
     */
    public static void UpdateModelAnimation(MemorySegment model, MemorySegment anim, int frame) {
        var mh$ = UpdateModelAnimation$MH();
        try {
            mh$.invokeExact(model, anim, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadModelAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$1,"UnloadModelAnimation");
    }
    /**
     * {@snippet :
     * void UnloadModelAnimation(ModelAnimation anim);
     * }
     */
    public static void UnloadModelAnimation(MemorySegment anim) {
        var mh$ = UnloadModelAnimation$MH();
        try {
            mh$.invokeExact(anim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadModelAnimations$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$2,"UnloadModelAnimations");
    }
    /**
     * {@snippet :
     * void UnloadModelAnimations(ModelAnimation* animations, int animCount);
     * }
     */
    public static void UnloadModelAnimations(MemorySegment animations, int animCount) {
        var mh$ = UnloadModelAnimations$MH();
        try {
            mh$.invokeExact(animations, animCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsModelAnimationValid$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$4,"IsModelAnimationValid");
    }
    /**
     * {@snippet :
     * _Bool IsModelAnimationValid(Model model, ModelAnimation anim);
     * }
     */
    public static boolean IsModelAnimationValid(MemorySegment model, MemorySegment anim) {
        var mh$ = IsModelAnimationValid$MH();
        try {
            return (boolean)mh$.invokeExact(model, anim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionSpheres$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$6,"CheckCollisionSpheres");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2);
     * }
     */
    public static boolean CheckCollisionSpheres(MemorySegment center1, float radius1, MemorySegment center2, float radius2) {
        var mh$ = CheckCollisionSpheres$MH();
        try {
            return (boolean)mh$.invokeExact(center1, radius1, center2, radius2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionBoxes$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$1,"CheckCollisionBoxes");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);
     * }
     */
    public static boolean CheckCollisionBoxes(MemorySegment box1, MemorySegment box2) {
        var mh$ = CheckCollisionBoxes$MH();
        try {
            return (boolean)mh$.invokeExact(box1, box2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckCollisionBoxSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$3,"CheckCollisionBoxSphere");
    }
    /**
     * {@snippet :
     * _Bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);
     * }
     */
    public static boolean CheckCollisionBoxSphere(MemorySegment box, MemorySegment center, float radius) {
        var mh$ = CheckCollisionBoxSphere$MH();
        try {
            return (boolean)mh$.invokeExact(box, center, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRayCollisionSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$5,"GetRayCollisionSphere");
    }
    /**
     * {@snippet :
     * RayCollision GetRayCollisionSphere(Ray ray, Vector3 center, float radius);
     * }
     */
    public static MemorySegment GetRayCollisionSphere(SegmentAllocator allocator, MemorySegment ray, MemorySegment center, float radius) {
        var mh$ = GetRayCollisionSphere$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ray, center, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRayCollisionBox$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$1,"GetRayCollisionBox");
    }
    /**
     * {@snippet :
     * RayCollision GetRayCollisionBox(Ray ray, BoundingBox box);
     * }
     */
    public static MemorySegment GetRayCollisionBox(SegmentAllocator allocator, MemorySegment ray, MemorySegment box) {
        var mh$ = GetRayCollisionBox$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ray, box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRayCollisionMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$3,"GetRayCollisionMesh");
    }
    /**
     * {@snippet :
     * RayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform);
     * }
     */
    public static MemorySegment GetRayCollisionMesh(SegmentAllocator allocator, MemorySegment ray, MemorySegment mesh, MemorySegment transform) {
        var mh$ = GetRayCollisionMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ray, mesh, transform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRayCollisionTriangle$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$5,"GetRayCollisionTriangle");
    }
    /**
     * {@snippet :
     * RayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);
     * }
     */
    public static MemorySegment GetRayCollisionTriangle(SegmentAllocator allocator, MemorySegment ray, MemorySegment p1, MemorySegment p2, MemorySegment p3) {
        var mh$ = GetRayCollisionTriangle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ray, p1, p2, p3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRayCollisionQuad$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$1,"GetRayCollisionQuad");
    }
    /**
     * {@snippet :
     * RayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);
     * }
     */
    public static MemorySegment GetRayCollisionQuad(SegmentAllocator allocator, MemorySegment ray, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4) {
        var mh$ = GetRayCollisionQuad$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ray, p1, p2, p3, p4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$4,"InitAudioDevice");
    }
    /**
     * {@snippet :
     * void InitAudioDevice();
     * }
     */
    public static void InitAudioDevice() {
        var mh$ = InitAudioDevice$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseAudioDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$5,"CloseAudioDevice");
    }
    /**
     * {@snippet :
     * void CloseAudioDevice();
     * }
     */
    public static void CloseAudioDevice() {
        var mh$ = CloseAudioDevice$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAudioDeviceReady$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$0,"IsAudioDeviceReady");
    }
    /**
     * {@snippet :
     * _Bool IsAudioDeviceReady();
     * }
     */
    public static boolean IsAudioDeviceReady() {
        var mh$ = IsAudioDeviceReady$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMasterVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$1,"SetMasterVolume");
    }
    /**
     * {@snippet :
     * void SetMasterVolume(float volume);
     * }
     */
    public static void SetMasterVolume(float volume) {
        var mh$ = SetMasterVolume$MH();
        try {
            mh$.invokeExact(volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMasterVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$2,"GetMasterVolume");
    }
    /**
     * {@snippet :
     * float GetMasterVolume();
     * }
     */
    public static float GetMasterVolume() {
        var mh$ = GetMasterVolume$MH();
        try {
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadWave$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$4,"LoadWave");
    }
    /**
     * {@snippet :
     * Wave LoadWave(char* fileName);
     * }
     */
    public static MemorySegment LoadWave(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadWave$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadWaveFromMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$6,"LoadWaveFromMemory");
    }
    /**
     * {@snippet :
     * Wave LoadWaveFromMemory(char* fileType, unsigned char* fileData, int dataSize);
     * }
     */
    public static MemorySegment LoadWaveFromMemory(SegmentAllocator allocator, MemorySegment fileType, MemorySegment fileData, int dataSize) {
        var mh$ = LoadWaveFromMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileType, fileData, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWaveReady$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$1,"IsWaveReady");
    }
    /**
     * {@snippet :
     * _Bool IsWaveReady(Wave wave);
     * }
     */
    public static boolean IsWaveReady(MemorySegment wave) {
        var mh$ = IsWaveReady$MH();
        try {
            return (boolean)mh$.invokeExact(wave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadSound$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$3,"LoadSound");
    }
    /**
     * {@snippet :
     * Sound LoadSound(char* fileName);
     * }
     */
    public static MemorySegment LoadSound(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadSound$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadSoundFromWave$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$5,"LoadSoundFromWave");
    }
    /**
     * {@snippet :
     * Sound LoadSoundFromWave(Wave wave);
     * }
     */
    public static MemorySegment LoadSoundFromWave(SegmentAllocator allocator, MemorySegment wave) {
        var mh$ = LoadSoundFromWave$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, wave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadSoundAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$1,"LoadSoundAlias");
    }
    /**
     * {@snippet :
     * Sound LoadSoundAlias(Sound source);
     * }
     */
    public static MemorySegment LoadSoundAlias(SegmentAllocator allocator, MemorySegment source) {
        var mh$ = LoadSoundAlias$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsSoundReady$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$3,"IsSoundReady");
    }
    /**
     * {@snippet :
     * _Bool IsSoundReady(Sound sound);
     * }
     */
    public static boolean IsSoundReady(MemorySegment sound) {
        var mh$ = IsSoundReady$MH();
        try {
            return (boolean)mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateSound$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$5,"UpdateSound");
    }
    /**
     * {@snippet :
     * void UpdateSound(Sound sound, void* data, int sampleCount);
     * }
     */
    public static void UpdateSound(MemorySegment sound, MemorySegment data, int sampleCount) {
        var mh$ = UpdateSound$MH();
        try {
            mh$.invokeExact(sound, data, sampleCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadWave$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$1,"UnloadWave");
    }
    /**
     * {@snippet :
     * void UnloadWave(Wave wave);
     * }
     */
    public static void UnloadWave(MemorySegment wave) {
        var mh$ = UnloadWave$MH();
        try {
            mh$.invokeExact(wave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadSound$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$3,"UnloadSound");
    }
    /**
     * {@snippet :
     * void UnloadSound(Sound sound);
     * }
     */
    public static void UnloadSound(MemorySegment sound) {
        var mh$ = UnloadSound$MH();
        try {
            mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadSoundAlias$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$4,"UnloadSoundAlias");
    }
    /**
     * {@snippet :
     * void UnloadSoundAlias(Sound alias);
     * }
     */
    public static void UnloadSoundAlias(MemorySegment alias) {
        var mh$ = UnloadSoundAlias$MH();
        try {
            mh$.invokeExact(alias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportWave$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$6,"ExportWave");
    }
    /**
     * {@snippet :
     * _Bool ExportWave(Wave wave, char* fileName);
     * }
     */
    public static boolean ExportWave(MemorySegment wave, MemorySegment fileName) {
        var mh$ = ExportWave$MH();
        try {
            return (boolean)mh$.invokeExact(wave, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExportWaveAsCode$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$0,"ExportWaveAsCode");
    }
    /**
     * {@snippet :
     * _Bool ExportWaveAsCode(Wave wave, char* fileName);
     * }
     */
    public static boolean ExportWaveAsCode(MemorySegment wave, MemorySegment fileName) {
        var mh$ = ExportWaveAsCode$MH();
        try {
            return (boolean)mh$.invokeExact(wave, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlaySound$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$1,"PlaySound");
    }
    /**
     * {@snippet :
     * void PlaySound(Sound sound);
     * }
     */
    public static void PlaySound(MemorySegment sound) {
        var mh$ = PlaySound$MH();
        try {
            mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StopSound$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$2,"StopSound");
    }
    /**
     * {@snippet :
     * void StopSound(Sound sound);
     * }
     */
    public static void StopSound(MemorySegment sound) {
        var mh$ = StopSound$MH();
        try {
            mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PauseSound$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$3,"PauseSound");
    }
    /**
     * {@snippet :
     * void PauseSound(Sound sound);
     * }
     */
    public static void PauseSound(MemorySegment sound) {
        var mh$ = PauseSound$MH();
        try {
            mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeSound$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$4,"ResumeSound");
    }
    /**
     * {@snippet :
     * void ResumeSound(Sound sound);
     * }
     */
    public static void ResumeSound(MemorySegment sound) {
        var mh$ = ResumeSound$MH();
        try {
            mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsSoundPlaying$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$5,"IsSoundPlaying");
    }
    /**
     * {@snippet :
     * _Bool IsSoundPlaying(Sound sound);
     * }
     */
    public static boolean IsSoundPlaying(MemorySegment sound) {
        var mh$ = IsSoundPlaying$MH();
        try {
            return (boolean)mh$.invokeExact(sound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSoundVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"SetSoundVolume");
    }
    /**
     * {@snippet :
     * void SetSoundVolume(Sound sound, float volume);
     * }
     */
    public static void SetSoundVolume(MemorySegment sound, float volume) {
        var mh$ = SetSoundVolume$MH();
        try {
            mh$.invokeExact(sound, volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSoundPitch$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"SetSoundPitch");
    }
    /**
     * {@snippet :
     * void SetSoundPitch(Sound sound, float pitch);
     * }
     */
    public static void SetSoundPitch(MemorySegment sound, float pitch) {
        var mh$ = SetSoundPitch$MH();
        try {
            mh$.invokeExact(sound, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSoundPan$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$3,"SetSoundPan");
    }
    /**
     * {@snippet :
     * void SetSoundPan(Sound sound, float pan);
     * }
     */
    public static void SetSoundPan(MemorySegment sound, float pan) {
        var mh$ = SetSoundPan$MH();
        try {
            mh$.invokeExact(sound, pan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaveCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$5,"WaveCopy");
    }
    /**
     * {@snippet :
     * Wave WaveCopy(Wave wave);
     * }
     */
    public static MemorySegment WaveCopy(SegmentAllocator allocator, MemorySegment wave) {
        var mh$ = WaveCopy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, wave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaveCrop$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$0,"WaveCrop");
    }
    /**
     * {@snippet :
     * void WaveCrop(Wave* wave, int initSample, int finalSample);
     * }
     */
    public static void WaveCrop(MemorySegment wave, int initSample, int finalSample) {
        var mh$ = WaveCrop$MH();
        try {
            mh$.invokeExact(wave, initSample, finalSample);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaveFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"WaveFormat");
    }
    /**
     * {@snippet :
     * void WaveFormat(Wave* wave, int sampleRate, int sampleSize, int channels);
     * }
     */
    public static void WaveFormat(MemorySegment wave, int sampleRate, int sampleSize, int channels) {
        var mh$ = WaveFormat$MH();
        try {
            mh$.invokeExact(wave, sampleRate, sampleSize, channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadWaveSamples$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$4,"LoadWaveSamples");
    }
    /**
     * {@snippet :
     * float* LoadWaveSamples(Wave wave);
     * }
     */
    public static MemorySegment LoadWaveSamples(MemorySegment wave) {
        var mh$ = LoadWaveSamples$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(wave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadWaveSamples$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$5,"UnloadWaveSamples");
    }
    /**
     * {@snippet :
     * void UnloadWaveSamples(float* samples);
     * }
     */
    public static void UnloadWaveSamples(MemorySegment samples) {
        var mh$ = UnloadWaveSamples$MH();
        try {
            mh$.invokeExact(samples);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$1,"LoadMusicStream");
    }
    /**
     * {@snippet :
     * Music LoadMusicStream(char* fileName);
     * }
     */
    public static MemorySegment LoadMusicStream(SegmentAllocator allocator, MemorySegment fileName) {
        var mh$ = LoadMusicStream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMusicStreamFromMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$3,"LoadMusicStreamFromMemory");
    }
    /**
     * {@snippet :
     * Music LoadMusicStreamFromMemory(char* fileType, unsigned char* data, int dataSize);
     * }
     */
    public static MemorySegment LoadMusicStreamFromMemory(SegmentAllocator allocator, MemorySegment fileType, MemorySegment data, int dataSize) {
        var mh$ = LoadMusicStreamFromMemory$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, fileType, data, dataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMusicReady$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"IsMusicReady");
    }
    /**
     * {@snippet :
     * _Bool IsMusicReady(Music music);
     * }
     */
    public static boolean IsMusicReady(MemorySegment music) {
        var mh$ = IsMusicReady$MH();
        try {
            return (boolean)mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$1,"UnloadMusicStream");
    }
    /**
     * {@snippet :
     * void UnloadMusicStream(Music music);
     * }
     */
    public static void UnloadMusicStream(MemorySegment music) {
        var mh$ = UnloadMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$2,"PlayMusicStream");
    }
    /**
     * {@snippet :
     * void PlayMusicStream(Music music);
     * }
     */
    public static void PlayMusicStream(MemorySegment music) {
        var mh$ = PlayMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMusicStreamPlaying$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$3,"IsMusicStreamPlaying");
    }
    /**
     * {@snippet :
     * _Bool IsMusicStreamPlaying(Music music);
     * }
     */
    public static boolean IsMusicStreamPlaying(MemorySegment music) {
        var mh$ = IsMusicStreamPlaying$MH();
        try {
            return (boolean)mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$4,"UpdateMusicStream");
    }
    /**
     * {@snippet :
     * void UpdateMusicStream(Music music);
     * }
     */
    public static void UpdateMusicStream(MemorySegment music) {
        var mh$ = UpdateMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StopMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$5,"StopMusicStream");
    }
    /**
     * {@snippet :
     * void StopMusicStream(Music music);
     * }
     */
    public static void StopMusicStream(MemorySegment music) {
        var mh$ = StopMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PauseMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$0,"PauseMusicStream");
    }
    /**
     * {@snippet :
     * void PauseMusicStream(Music music);
     * }
     */
    public static void PauseMusicStream(MemorySegment music) {
        var mh$ = PauseMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$1,"ResumeMusicStream");
    }
    /**
     * {@snippet :
     * void ResumeMusicStream(Music music);
     * }
     */
    public static void ResumeMusicStream(MemorySegment music) {
        var mh$ = ResumeMusicStream$MH();
        try {
            mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SeekMusicStream$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$3,"SeekMusicStream");
    }
    /**
     * {@snippet :
     * void SeekMusicStream(Music music, float position);
     * }
     */
    public static void SeekMusicStream(MemorySegment music, float position) {
        var mh$ = SeekMusicStream$MH();
        try {
            mh$.invokeExact(music, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMusicVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$4,"SetMusicVolume");
    }
    /**
     * {@snippet :
     * void SetMusicVolume(Music music, float volume);
     * }
     */
    public static void SetMusicVolume(MemorySegment music, float volume) {
        var mh$ = SetMusicVolume$MH();
        try {
            mh$.invokeExact(music, volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMusicPitch$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$5,"SetMusicPitch");
    }
    /**
     * {@snippet :
     * void SetMusicPitch(Music music, float pitch);
     * }
     */
    public static void SetMusicPitch(MemorySegment music, float pitch) {
        var mh$ = SetMusicPitch$MH();
        try {
            mh$.invokeExact(music, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMusicPan$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$0,"SetMusicPan");
    }
    /**
     * {@snippet :
     * void SetMusicPan(Music music, float pan);
     * }
     */
    public static void SetMusicPan(MemorySegment music, float pan) {
        var mh$ = SetMusicPan$MH();
        try {
            mh$.invokeExact(music, pan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMusicTimeLength$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$2,"GetMusicTimeLength");
    }
    /**
     * {@snippet :
     * float GetMusicTimeLength(Music music);
     * }
     */
    public static float GetMusicTimeLength(MemorySegment music) {
        var mh$ = GetMusicTimeLength$MH();
        try {
            return (float)mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMusicTimePlayed$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$3,"GetMusicTimePlayed");
    }
    /**
     * {@snippet :
     * float GetMusicTimePlayed(Music music);
     * }
     */
    public static float GetMusicTimePlayed(MemorySegment music) {
        var mh$ = GetMusicTimePlayed$MH();
        try {
            return (float)mh$.invokeExact(music);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$5,"LoadAudioStream");
    }
    /**
     * {@snippet :
     * AudioStream LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);
     * }
     */
    public static MemorySegment LoadAudioStream(SegmentAllocator allocator, int sampleRate, int sampleSize, int channels) {
        var mh$ = LoadAudioStream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, sampleRate, sampleSize, channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAudioStreamReady$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$1,"IsAudioStreamReady");
    }
    /**
     * {@snippet :
     * _Bool IsAudioStreamReady(AudioStream stream);
     * }
     */
    public static boolean IsAudioStreamReady(MemorySegment stream) {
        var mh$ = IsAudioStreamReady$MH();
        try {
            return (boolean)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"UnloadAudioStream");
    }
    /**
     * {@snippet :
     * void UnloadAudioStream(AudioStream stream);
     * }
     */
    public static void UnloadAudioStream(MemorySegment stream) {
        var mh$ = UnloadAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"UpdateAudioStream");
    }
    /**
     * {@snippet :
     * void UpdateAudioStream(AudioStream stream, void* data, int frameCount);
     * }
     */
    public static void UpdateAudioStream(MemorySegment stream, MemorySegment data, int frameCount) {
        var mh$ = UpdateAudioStream$MH();
        try {
            mh$.invokeExact(stream, data, frameCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAudioStreamProcessed$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$0,"IsAudioStreamProcessed");
    }
    /**
     * {@snippet :
     * _Bool IsAudioStreamProcessed(AudioStream stream);
     * }
     */
    public static boolean IsAudioStreamProcessed(MemorySegment stream) {
        var mh$ = IsAudioStreamProcessed$MH();
        try {
            return (boolean)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$1,"PlayAudioStream");
    }
    /**
     * {@snippet :
     * void PlayAudioStream(AudioStream stream);
     * }
     */
    public static void PlayAudioStream(MemorySegment stream) {
        var mh$ = PlayAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PauseAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$2,"PauseAudioStream");
    }
    /**
     * {@snippet :
     * void PauseAudioStream(AudioStream stream);
     * }
     */
    public static void PauseAudioStream(MemorySegment stream) {
        var mh$ = PauseAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"ResumeAudioStream");
    }
    /**
     * {@snippet :
     * void ResumeAudioStream(AudioStream stream);
     * }
     */
    public static void ResumeAudioStream(MemorySegment stream) {
        var mh$ = ResumeAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAudioStreamPlaying$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$4,"IsAudioStreamPlaying");
    }
    /**
     * {@snippet :
     * _Bool IsAudioStreamPlaying(AudioStream stream);
     * }
     */
    public static boolean IsAudioStreamPlaying(MemorySegment stream) {
        var mh$ = IsAudioStreamPlaying$MH();
        try {
            return (boolean)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StopAudioStream$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"StopAudioStream");
    }
    /**
     * {@snippet :
     * void StopAudioStream(AudioStream stream);
     * }
     */
    public static void StopAudioStream(MemorySegment stream) {
        var mh$ = StopAudioStream$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAudioStreamVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"SetAudioStreamVolume");
    }
    /**
     * {@snippet :
     * void SetAudioStreamVolume(AudioStream stream, float volume);
     * }
     */
    public static void SetAudioStreamVolume(MemorySegment stream, float volume) {
        var mh$ = SetAudioStreamVolume$MH();
        try {
            mh$.invokeExact(stream, volume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAudioStreamPitch$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$2,"SetAudioStreamPitch");
    }
    /**
     * {@snippet :
     * void SetAudioStreamPitch(AudioStream stream, float pitch);
     * }
     */
    public static void SetAudioStreamPitch(MemorySegment stream, float pitch) {
        var mh$ = SetAudioStreamPitch$MH();
        try {
            mh$.invokeExact(stream, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAudioStreamPan$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"SetAudioStreamPan");
    }
    /**
     * {@snippet :
     * void SetAudioStreamPan(AudioStream stream, float pan);
     * }
     */
    public static void SetAudioStreamPan(MemorySegment stream, float pan) {
        var mh$ = SetAudioStreamPan$MH();
        try {
            mh$.invokeExact(stream, pan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAudioStreamBufferSizeDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"SetAudioStreamBufferSizeDefault");
    }
    /**
     * {@snippet :
     * void SetAudioStreamBufferSizeDefault(int size);
     * }
     */
    public static void SetAudioStreamBufferSizeDefault(int size) {
        var mh$ = SetAudioStreamBufferSizeDefault$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAudioStreamCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$6,"SetAudioStreamCallback");
    }
    /**
     * {@snippet :
     * void SetAudioStreamCallback(AudioStream stream, AudioCallback callback);
     * }
     */
    public static void SetAudioStreamCallback(MemorySegment stream, MemorySegment callback) {
        var mh$ = SetAudioStreamCallback$MH();
        try {
            mh$.invokeExact(stream, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachAudioStreamProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$0,"AttachAudioStreamProcessor");
    }
    /**
     * {@snippet :
     * void AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor);
     * }
     */
    public static void AttachAudioStreamProcessor(MemorySegment stream, MemorySegment processor) {
        var mh$ = AttachAudioStreamProcessor$MH();
        try {
            mh$.invokeExact(stream, processor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DetachAudioStreamProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"DetachAudioStreamProcessor");
    }
    /**
     * {@snippet :
     * void DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor);
     * }
     */
    public static void DetachAudioStreamProcessor(MemorySegment stream, MemorySegment processor) {
        var mh$ = DetachAudioStreamProcessor$MH();
        try {
            mh$.invokeExact(stream, processor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachAudioMixedProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$2,"AttachAudioMixedProcessor");
    }
    /**
     * {@snippet :
     * void AttachAudioMixedProcessor(AudioCallback processor);
     * }
     */
    public static void AttachAudioMixedProcessor(MemorySegment processor) {
        var mh$ = AttachAudioMixedProcessor$MH();
        try {
            mh$.invokeExact(processor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DetachAudioMixedProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"DetachAudioMixedProcessor");
    }
    /**
     * {@snippet :
     * void DetachAudioMixedProcessor(AudioCallback processor);
     * }
     */
    public static void DetachAudioMixedProcessor(MemorySegment processor) {
        var mh$ = DetachAudioMixedProcessor$MH();
        try {
            mh$.invokeExact(processor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define RAYLIB_VERSION "5.0"
     * }
     */
    public static MemorySegment RAYLIB_VERSION() {
        return constants$162.const$4;
    }
    /**
     * {@snippet :
     * #define PI 3.1415927410125732
     * }
     */
    public static float PI() {
        return 3.1415927410125732f;
    }
    /**
     * {@snippet :
     * #define DEG2RAD 0.01745329238474369
     * }
     */
    public static float DEG2RAD() {
        return 0.01745329238474369f;
    }
    /**
     * {@snippet :
     * #define RAD2DEG 57.2957763671875
     * }
     */
    public static float RAD2DEG() {
        return 57.2957763671875f;
    }
    /**
     * {@snippet :
     * #define MOUSE_LEFT_BUTTON 0
     * }
     */
    public static int MOUSE_LEFT_BUTTON() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MOUSE_RIGHT_BUTTON 1
     * }
     */
    public static int MOUSE_RIGHT_BUTTON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MOUSE_MIDDLE_BUTTON 2
     * }
     */
    public static int MOUSE_MIDDLE_BUTTON() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define MATERIAL_MAP_DIFFUSE 0
     * }
     */
    public static int MATERIAL_MAP_DIFFUSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MATERIAL_MAP_SPECULAR 1
     * }
     */
    public static int MATERIAL_MAP_SPECULAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SHADER_LOC_MAP_DIFFUSE 15
     * }
     */
    public static int SHADER_LOC_MAP_DIFFUSE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define SHADER_LOC_MAP_SPECULAR 16
     * }
     */
    public static int SHADER_LOC_MAP_SPECULAR() {
        return (int)16L;
    }
}


