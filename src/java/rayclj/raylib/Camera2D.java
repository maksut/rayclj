// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Camera2D {
 *     Vector2 offset;
 *     Vector2 target;
 *     float rotation;
 *     float zoom;
 * };
 * }
 */
public class Camera2D {

    public static MemoryLayout $LAYOUT() {
        return constants$12.const$1;
    }
    public static MemorySegment offset$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment target$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static VarHandle rotation$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rotation;
     * }
     */
    public static float rotation$get(MemorySegment seg) {
        return (float)constants$12.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rotation;
     * }
     */
    public static void rotation$set(MemorySegment seg, float x) {
        constants$12.const$2.set(seg, x);
    }
    public static float rotation$get(MemorySegment seg, long index) {
        return (float)constants$12.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rotation$set(MemorySegment seg, long index, float x) {
        constants$12.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle zoom$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float zoom;
     * }
     */
    public static float zoom$get(MemorySegment seg) {
        return (float)constants$12.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float zoom;
     * }
     */
    public static void zoom$set(MemorySegment seg, float x) {
        constants$12.const$3.set(seg, x);
    }
    public static float zoom$get(MemorySegment seg, long index) {
        return (float)constants$12.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void zoom$set(MemorySegment seg, long index, float x) {
        constants$12.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


