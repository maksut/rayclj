// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Camera3D {
 *     Vector3 position;
 *     Vector3 target;
 *     Vector3 up;
 *     float fovy;
 *     int projection;
 * };
 * }
 */
public class Camera3D {

    public static MemoryLayout $LAYOUT() {
        return constants$11.const$4;
    }
    public static MemorySegment position$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment target$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static MemorySegment up$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    public static VarHandle fovy$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fovy;
     * }
     */
    public static float fovy$get(MemorySegment seg) {
        return (float)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fovy;
     * }
     */
    public static void fovy$set(MemorySegment seg, float x) {
        constants$11.const$5.set(seg, x);
    }
    public static float fovy$get(MemorySegment seg, long index) {
        return (float)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fovy$set(MemorySegment seg, long index, float x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle projection$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int projection;
     * }
     */
    public static int projection$get(MemorySegment seg) {
        return (int)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int projection;
     * }
     */
    public static void projection$set(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, x);
    }
    public static int projection$get(MemorySegment seg, long index) {
        return (int)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void projection$set(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


