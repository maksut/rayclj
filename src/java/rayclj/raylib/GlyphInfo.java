// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct GlyphInfo {
 *     int value;
 *     int offsetX;
 *     int offsetY;
 *     int advanceX;
 *     Image image;
 * };
 * }
 */
public class GlyphInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$9.const$5;
    }
    public static VarHandle value$VH() {
        return constants$10.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int value;
     * }
     */
    public static int value$get(MemorySegment seg) {
        return (int)constants$10.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int value;
     * }
     */
    public static void value$set(MemorySegment seg, int x) {
        constants$10.const$0.set(seg, x);
    }
    public static int value$get(MemorySegment seg, long index) {
        return (int)constants$10.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, int x) {
        constants$10.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offsetX$VH() {
        return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int offsetX;
     * }
     */
    public static int offsetX$get(MemorySegment seg) {
        return (int)constants$10.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int offsetX;
     * }
     */
    public static void offsetX$set(MemorySegment seg, int x) {
        constants$10.const$1.set(seg, x);
    }
    public static int offsetX$get(MemorySegment seg, long index) {
        return (int)constants$10.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void offsetX$set(MemorySegment seg, long index, int x) {
        constants$10.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offsetY$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int offsetY;
     * }
     */
    public static int offsetY$get(MemorySegment seg) {
        return (int)constants$10.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int offsetY;
     * }
     */
    public static void offsetY$set(MemorySegment seg, int x) {
        constants$10.const$2.set(seg, x);
    }
    public static int offsetY$get(MemorySegment seg, long index) {
        return (int)constants$10.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offsetY$set(MemorySegment seg, long index, int x) {
        constants$10.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle advanceX$VH() {
        return constants$10.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int advanceX;
     * }
     */
    public static int advanceX$get(MemorySegment seg) {
        return (int)constants$10.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int advanceX;
     * }
     */
    public static void advanceX$set(MemorySegment seg, int x) {
        constants$10.const$3.set(seg, x);
    }
    public static int advanceX$get(MemorySegment seg, long index) {
        return (int)constants$10.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void advanceX$set(MemorySegment seg, long index, int x) {
        constants$10.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment image$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


