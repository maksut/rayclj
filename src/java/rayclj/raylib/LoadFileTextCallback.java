// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * char* (*LoadFileTextCallback)(char* fileName);
 * }
 */
public interface LoadFileTextCallback {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment fileName);
    static MemorySegment allocate(LoadFileTextCallback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$28.const$3, fi, constants$28.const$2, scope);
    }
    static LoadFileTextCallback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _fileName) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$28.const$4.invokeExact(symbol, _fileName);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


