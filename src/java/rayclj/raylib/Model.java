// Generated by jextract

package rayclj.raylib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct Model {
 *     Matrix transform;
 *     int meshCount;
 *     int materialCount;
 *     Mesh* meshes;
 *     Material* materials;
 *     int* meshMaterial;
 *     int boneCount;
 *     BoneInfo* bones;
 *     Transform* bindPose;
 * };
 * }
 */
public class Model {

    public static MemoryLayout $LAYOUT() {
        return constants$17.const$0;
    }
    public static MemorySegment transform$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static VarHandle meshCount$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int meshCount;
     * }
     */
    public static int meshCount$get(MemorySegment seg) {
        return (int)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int meshCount;
     * }
     */
    public static void meshCount$set(MemorySegment seg, int x) {
        constants$17.const$1.set(seg, x);
    }
    public static int meshCount$get(MemorySegment seg, long index) {
        return (int)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void meshCount$set(MemorySegment seg, long index, int x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle materialCount$VH() {
        return constants$17.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int materialCount;
     * }
     */
    public static int materialCount$get(MemorySegment seg) {
        return (int)constants$17.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int materialCount;
     * }
     */
    public static void materialCount$set(MemorySegment seg, int x) {
        constants$17.const$2.set(seg, x);
    }
    public static int materialCount$get(MemorySegment seg, long index) {
        return (int)constants$17.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void materialCount$set(MemorySegment seg, long index, int x) {
        constants$17.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle meshes$VH() {
        return constants$17.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Mesh* meshes;
     * }
     */
    public static MemorySegment meshes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Mesh* meshes;
     * }
     */
    public static void meshes$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$3.set(seg, x);
    }
    public static MemorySegment meshes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void meshes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle materials$VH() {
        return constants$17.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Material* materials;
     * }
     */
    public static MemorySegment materials$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Material* materials;
     * }
     */
    public static void materials$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$4.set(seg, x);
    }
    public static MemorySegment materials$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void materials$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle meshMaterial$VH() {
        return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* meshMaterial;
     * }
     */
    public static MemorySegment meshMaterial$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* meshMaterial;
     * }
     */
    public static void meshMaterial$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$5.set(seg, x);
    }
    public static MemorySegment meshMaterial$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void meshMaterial$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle boneCount$VH() {
        return constants$18.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int boneCount;
     * }
     */
    public static int boneCount$get(MemorySegment seg) {
        return (int)constants$18.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int boneCount;
     * }
     */
    public static void boneCount$set(MemorySegment seg, int x) {
        constants$18.const$0.set(seg, x);
    }
    public static int boneCount$get(MemorySegment seg, long index) {
        return (int)constants$18.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void boneCount$set(MemorySegment seg, long index, int x) {
        constants$18.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bones$VH() {
        return constants$18.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BoneInfo* bones;
     * }
     */
    public static MemorySegment bones$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BoneInfo* bones;
     * }
     */
    public static void bones$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$1.set(seg, x);
    }
    public static MemorySegment bones$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bones$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bindPose$VH() {
        return constants$18.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Transform* bindPose;
     * }
     */
    public static MemorySegment bindPose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Transform* bindPose;
     * }
     */
    public static void bindPose$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$2.set(seg, x);
    }
    public static MemorySegment bindPose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bindPose$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


