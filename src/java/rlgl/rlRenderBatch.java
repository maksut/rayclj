// Generated by jextract

package rlgl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rlRenderBatch {
 *     int bufferCount;
 *     int currentBuffer;
 *     rlVertexBuffer* vertexBuffer;
 *     rlDrawCall* draws;
 *     int drawCounter;
 *     float currentDepth;
 * };
 * }
 */
public class rlRenderBatch {

    public static MemoryLayout $LAYOUT() {
        return constants$4.const$5;
    }
    public static VarHandle bufferCount$VH() {
        return constants$5.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bufferCount;
     * }
     */
    public static int bufferCount$get(MemorySegment seg) {
        return (int)constants$5.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bufferCount;
     * }
     */
    public static void bufferCount$set(MemorySegment seg, int x) {
        constants$5.const$0.set(seg, x);
    }
    public static int bufferCount$get(MemorySegment seg, long index) {
        return (int)constants$5.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferCount$set(MemorySegment seg, long index, int x) {
        constants$5.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle currentBuffer$VH() {
        return constants$5.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int currentBuffer;
     * }
     */
    public static int currentBuffer$get(MemorySegment seg) {
        return (int)constants$5.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int currentBuffer;
     * }
     */
    public static void currentBuffer$set(MemorySegment seg, int x) {
        constants$5.const$1.set(seg, x);
    }
    public static int currentBuffer$get(MemorySegment seg, long index) {
        return (int)constants$5.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void currentBuffer$set(MemorySegment seg, long index, int x) {
        constants$5.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vertexBuffer$VH() {
        return constants$5.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * rlVertexBuffer* vertexBuffer;
     * }
     */
    public static MemorySegment vertexBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * rlVertexBuffer* vertexBuffer;
     * }
     */
    public static void vertexBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$2.set(seg, x);
    }
    public static MemorySegment vertexBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void vertexBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle draws$VH() {
        return constants$5.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * rlDrawCall* draws;
     * }
     */
    public static MemorySegment draws$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * rlDrawCall* draws;
     * }
     */
    public static void draws$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$3.set(seg, x);
    }
    public static MemorySegment draws$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void draws$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle drawCounter$VH() {
        return constants$5.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int drawCounter;
     * }
     */
    public static int drawCounter$get(MemorySegment seg) {
        return (int)constants$5.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int drawCounter;
     * }
     */
    public static void drawCounter$set(MemorySegment seg, int x) {
        constants$5.const$4.set(seg, x);
    }
    public static int drawCounter$get(MemorySegment seg, long index) {
        return (int)constants$5.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drawCounter$set(MemorySegment seg, long index, int x) {
        constants$5.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle currentDepth$VH() {
        return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float currentDepth;
     * }
     */
    public static float currentDepth$get(MemorySegment seg) {
        return (float)constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float currentDepth;
     * }
     */
    public static void currentDepth$set(MemorySegment seg, float x) {
        constants$5.const$5.set(seg, x);
    }
    public static float currentDepth$get(MemorySegment seg, long index) {
        return (float)constants$5.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void currentDepth$set(MemorySegment seg, long index, float x) {
        constants$5.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


